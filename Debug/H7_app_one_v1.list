
H7_app_one_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8b4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800cb60  0800cb60  0001cb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cbb4  0800cbb4  0001cbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cbbc  0800cbbc  0001cbbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cbc0  0800cbc0  0001cbc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800cbc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004314  24000010  0800cbd4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004324  0800cbd4  00024324  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033ca3  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050a8  00000000  00000000  00053ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001858  00000000  00000000  00058d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016b0  00000000  00000000  0005a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035bed  00000000  00000000  0005bc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022d71  00000000  00000000  00091885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159b65  00000000  00000000  000b45f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0020e15b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006628  00000000  00000000  0020e1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800cb48 	.word	0x0800cb48

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800cb48 	.word	0x0800cb48

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_ADC_MspInit>:
  /* USER CODE END ADC2_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b0b2      	sub	sp, #200	; 0xc8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	22b8      	movs	r2, #184	; 0xb8
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f00c fa9f 	bl	800cb38 <memset>
  if(adcHandle->Instance==ADC2)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a25      	ldr	r2, [pc, #148]	; (8000694 <HAL_ADC_MspInit+0xb0>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d143      	bne.n	800068c <HAL_ADC_MspInit+0xa8>
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000604:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000608:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 800060e:	2310      	movs	r3, #16
 8000610:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000612:	2304      	movs	r3, #4
 8000614:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800061e:	23c0      	movs	r3, #192	; 0xc0
 8000620:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000622:	2300      	movs	r3, #0
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800062a:	2300      	movs	r3, #0
 800062c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	4618      	mov	r0, r3
 8000636:	f005 fa91 	bl	8005b5c <HAL_RCCEx_PeriphCLKConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000640:	f000 fbf2 	bl	8000e28 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <HAL_ADC_MspInit+0xb4>)
 8000646:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <HAL_ADC_MspInit+0xb4>)
 800064c:	f043 0320 	orr.w	r3, r3, #32
 8000650:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <HAL_ADC_MspInit+0xb4>)
 8000656:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800065a:	f003 0320 	and.w	r3, r3, #32
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <HAL_ADC_MspInit+0xb4>)
 8000664:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000668:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <HAL_ADC_MspInit+0xb4>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <HAL_ADC_MspInit+0xb4>)
 8000674:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC2_C     ------> ADC2_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000680:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000684:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000688:	f000 ff0e 	bl	80014a8 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800068c:	bf00      	nop
 800068e:	37c8      	adds	r7, #200	; 0xc8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40022100 	.word	0x40022100
 8000698:	58024400 	.word	0x58024400

0800069c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08e      	sub	sp, #56	; 0x38
 80006a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b87      	ldr	r3, [pc, #540]	; (80008d0 <MX_GPIO_Init+0x234>)
 80006b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b8:	4a85      	ldr	r2, [pc, #532]	; (80008d0 <MX_GPIO_Init+0x234>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006c2:	4b83      	ldr	r3, [pc, #524]	; (80008d0 <MX_GPIO_Init+0x234>)
 80006c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	623b      	str	r3, [r7, #32]
 80006ce:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d0:	4b7f      	ldr	r3, [pc, #508]	; (80008d0 <MX_GPIO_Init+0x234>)
 80006d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d6:	4a7e      	ldr	r2, [pc, #504]	; (80008d0 <MX_GPIO_Init+0x234>)
 80006d8:	f043 0320 	orr.w	r3, r3, #32
 80006dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e0:	4b7b      	ldr	r3, [pc, #492]	; (80008d0 <MX_GPIO_Init+0x234>)
 80006e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006e6:	f003 0320 	and.w	r3, r3, #32
 80006ea:	61fb      	str	r3, [r7, #28]
 80006ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	4b78      	ldr	r3, [pc, #480]	; (80008d0 <MX_GPIO_Init+0x234>)
 80006f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006f4:	4a76      	ldr	r2, [pc, #472]	; (80008d0 <MX_GPIO_Init+0x234>)
 80006f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006fe:	4b74      	ldr	r3, [pc, #464]	; (80008d0 <MX_GPIO_Init+0x234>)
 8000700:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070c:	4b70      	ldr	r3, [pc, #448]	; (80008d0 <MX_GPIO_Init+0x234>)
 800070e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000712:	4a6f      	ldr	r2, [pc, #444]	; (80008d0 <MX_GPIO_Init+0x234>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800071c:	4b6c      	ldr	r3, [pc, #432]	; (80008d0 <MX_GPIO_Init+0x234>)
 800071e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	4b69      	ldr	r3, [pc, #420]	; (80008d0 <MX_GPIO_Init+0x234>)
 800072c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000730:	4a67      	ldr	r2, [pc, #412]	; (80008d0 <MX_GPIO_Init+0x234>)
 8000732:	f043 0308 	orr.w	r3, r3, #8
 8000736:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800073a:	4b65      	ldr	r3, [pc, #404]	; (80008d0 <MX_GPIO_Init+0x234>)
 800073c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000748:	4b61      	ldr	r3, [pc, #388]	; (80008d0 <MX_GPIO_Init+0x234>)
 800074a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800074e:	4a60      	ldr	r2, [pc, #384]	; (80008d0 <MX_GPIO_Init+0x234>)
 8000750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000754:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000758:	4b5d      	ldr	r3, [pc, #372]	; (80008d0 <MX_GPIO_Init+0x234>)
 800075a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800075e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b5a      	ldr	r3, [pc, #360]	; (80008d0 <MX_GPIO_Init+0x234>)
 8000768:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800076c:	4a58      	ldr	r2, [pc, #352]	; (80008d0 <MX_GPIO_Init+0x234>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000776:	4b56      	ldr	r3, [pc, #344]	; (80008d0 <MX_GPIO_Init+0x234>)
 8000778:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000784:	4b52      	ldr	r3, [pc, #328]	; (80008d0 <MX_GPIO_Init+0x234>)
 8000786:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800078a:	4a51      	ldr	r2, [pc, #324]	; (80008d0 <MX_GPIO_Init+0x234>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000794:	4b4e      	ldr	r3, [pc, #312]	; (80008d0 <MX_GPIO_Init+0x234>)
 8000796:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079a:	f003 0310 	and.w	r3, r3, #16
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80007a8:	484a      	ldr	r0, [pc, #296]	; (80008d4 <MX_GPIO_Init+0x238>)
 80007aa:	f004 f9d3 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f244 0101 	movw	r1, #16385	; 0x4001
 80007b4:	4848      	ldr	r0, [pc, #288]	; (80008d8 <MX_GPIO_Init+0x23c>)
 80007b6:	f004 f9cd 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2102      	movs	r1, #2
 80007be:	4847      	ldr	r0, [pc, #284]	; (80008dc <MX_GPIO_Init+0x240>)
 80007c0:	f004 f9c8 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	4619      	mov	r1, r3
 80007d8:	4841      	ldr	r0, [pc, #260]	; (80008e0 <MX_GPIO_Init+0x244>)
 80007da:	f003 fff3 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f4:	4619      	mov	r1, r3
 80007f6:	4837      	ldr	r0, [pc, #220]	; (80008d4 <MX_GPIO_Init+0x238>)
 80007f8:	f003 ffe4 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80007fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000812:	4619      	mov	r1, r3
 8000814:	482f      	ldr	r0, [pc, #188]	; (80008d4 <MX_GPIO_Init+0x238>)
 8000816:	f003 ffd5 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800081a:	f244 0301 	movw	r3, #16385	; 0x4001
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4829      	ldr	r0, [pc, #164]	; (80008d8 <MX_GPIO_Init+0x23c>)
 8000834:	f003 ffc6 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	4619      	mov	r1, r3
 800084c:	4825      	ldr	r0, [pc, #148]	; (80008e4 <MX_GPIO_Init+0x248>)
 800084e:	f003 ffb9 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000864:	4619      	mov	r1, r3
 8000866:	4820      	ldr	r0, [pc, #128]	; (80008e8 <MX_GPIO_Init+0x24c>)
 8000868:	f003 ffac 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800086c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800087e:	230a      	movs	r3, #10
 8000880:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	4619      	mov	r1, r3
 8000888:	4817      	ldr	r0, [pc, #92]	; (80008e8 <MX_GPIO_Init+0x24c>)
 800088a:	f003 ff9b 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800088e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4810      	ldr	r0, [pc, #64]	; (80008e8 <MX_GPIO_Init+0x24c>)
 80008a8:	f003 ff8c 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ac:	2302      	movs	r3, #2
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <MX_GPIO_Init+0x240>)
 80008c4:	f003 ff7e 	bl	80047c4 <HAL_GPIO_Init>

}
 80008c8:	bf00      	nop
 80008ca:	3738      	adds	r7, #56	; 0x38
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	58024400 	.word	0x58024400
 80008d4:	58021400 	.word	0x58021400
 80008d8:	58020400 	.word	0x58020400
 80008dc:	58021000 	.word	0x58021000
 80008e0:	58020800 	.word	0x58020800
 80008e4:	58021800 	.word	0x58021800
 80008e8:	58020000 	.word	0x58020000

080008ec <HAL_ADC_ConvCpltCallback>:
  //not called, go to stm32h7xx_it.c
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  newData = 1;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_ADC_ConvCpltCallback+0x30>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
  if(PIN_DEBUG_ON) HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000900:	4807      	ldr	r0, [pc, #28]	; (8000920 <HAL_ADC_ConvCpltCallback+0x34>)
 8000902:	f004 f927 	bl	8004b54 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Stop_IT(&htim2);
 8000906:	4807      	ldr	r0, [pc, #28]	; (8000924 <HAL_ADC_ConvCpltCallback+0x38>)
 8000908:	f009 f8bd 	bl	8009a86 <HAL_TIM_Base_Stop_IT>
  HAL_ADC_Stop_DMA(&hadc1);
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <HAL_ADC_ConvCpltCallback+0x3c>)
 800090e:	f001 fa27 	bl	8001d60 <HAL_ADC_Stop_DMA>
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCxValues, buffSize);
  //HAL_TIM_Base_Start_IT(&htim2);
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	24000038 	.word	0x24000038
 8000920:	58021400 	.word	0x58021400
 8000924:	24003174 	.word	0x24003174
 8000928:	24001088 	.word	0x24001088

0800092c <my_toggle>:
    temp = values *3.3 / 65536;

    //printf("ADCxValues = %d, %5.3f\r\n", values, temp);
}

static void my_toggle(){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  if(toggle_state){
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <my_toggle+0x34>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d008      	beq.n	800094a <my_toggle+0x1e>
   HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2101      	movs	r1, #1
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <my_toggle+0x38>)
 800093e:	f004 f909 	bl	8004b54 <HAL_GPIO_WritePin>
   toggle_state=0;
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <my_toggle+0x34>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
    toggle_state=1;
  }


}
 8000948:	e007      	b.n	800095a <my_toggle+0x2e>
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	2101      	movs	r1, #1
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <my_toggle+0x38>)
 8000950:	f004 f900 	bl	8004b54 <HAL_GPIO_WritePin>
    toggle_state=1;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <my_toggle+0x34>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	240010ec 	.word	0x240010ec
 8000964:	58020400 	.word	0x58020400

08000968 <DMA1_Stream1_IRQHandler>:
 * Formal parameter: None
 * Return value: None
*********************************************************************************************************
*/
void DMA1_Stream1_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    /*  Transfer complete interrupt */
    if((DMA1->LISR & DMA_FLAG_TCIF1_5) != RESET)
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <DMA1_Stream1_IRQHandler+0x68>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000974:	2b00      	cmp	r3, #0
 8000976:	d008      	beq.n	800098a <DMA1_Stream1_IRQHandler+0x22>
    {
        my_toggle();
 8000978:	f7ff ffd8 	bl	800092c <my_toggle>
        s_DmaFlag = 2;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <DMA1_Stream1_IRQHandler+0x6c>)
 800097e:	2202      	movs	r2, #2
 8000980:	601a      	str	r2, [r3, #0]
        /*  Clear flag */
        DMA1->LIFCR = DMA_FLAG_TCIF1_5;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <DMA1_Stream1_IRQHandler+0x68>)
 8000984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000988:	609a      	str	r2, [r3, #8]
    }

    /*  Half transfer completed interrupt */
    if((DMA1->LISR & DMA_FLAG_HTIF1_5) != RESET)
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <DMA1_Stream1_IRQHandler+0x68>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000992:	2b00      	cmp	r3, #0
 8000994:	d006      	beq.n	80009a4 <DMA1_Stream1_IRQHandler+0x3c>
    {
        s_DmaFlag = 1;
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <DMA1_Stream1_IRQHandler+0x6c>)
 8000998:	2201      	movs	r2, #1
 800099a:	601a      	str	r2, [r3, #0]
        /*  Clear flag */
        DMA1->LIFCR = DMA_FLAG_HTIF1_5;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <DMA1_Stream1_IRQHandler+0x68>)
 800099e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a2:	609a      	str	r2, [r3, #8]
    }

    /*  Transmission error interrupt */
    if((DMA1->LISR & DMA_FLAG_TEIF1_5) != RESET)
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <DMA1_Stream1_IRQHandler+0x68>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <DMA1_Stream1_IRQHandler+0x50>
    {
        /*  Clear flag */
        DMA1->LIFCR = DMA_FLAG_TEIF1_5;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <DMA1_Stream1_IRQHandler+0x68>)
 80009b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b6:	609a      	str	r2, [r3, #8]
    }

    /*  Direct mode error interrupt */
    if((DMA1->LISR & DMA_FLAG_DMEIF1_5) != RESET)
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <DMA1_Stream1_IRQHandler+0x68>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d003      	beq.n	80009cc <DMA1_Stream1_IRQHandler+0x64>
    {
        /*  Clear flag */
        DMA1->LIFCR = DMA_FLAG_DMEIF1_5;
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <DMA1_Stream1_IRQHandler+0x68>)
 80009c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ca:	609a      	str	r2, [r3, #8]
    }
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40020000 	.word	0x40020000
 80009d4:	24000054 	.word	0x24000054

080009d8 <my_InitADC>:
 * Parameter: None
 * Return value: None
    ******************************************************************************************************
    */
void my_InitADC(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b0c6      	sub	sp, #280	; 0x118
 80009dc:	af00      	add	r7, sp, #0
    ADC_HandleTypeDef   AdcHandle = {0};
 80009de:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80009e2:	2264      	movs	r2, #100	; 0x64
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00c f8a6 	bl	800cb38 <memset>
    DMA_HandleTypeDef   DmaHandle = {0};
 80009ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009f0:	2278      	movs	r2, #120	; 0x78
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f00c f89f 	bl	800cb38 <memset>
    ADC_ChannelConfTypeDef   sConfig = {0};
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
 8000a0a:	615a      	str	r2, [r3, #20]
 8000a0c:	619a      	str	r2, [r3, #24]
  /*  If AHB clock is used, no configuration is required, default selection*/

  #endif

  /*  ##-2-Configure the collection pins used for ADC sampling ################################### ## */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b7a      	ldr	r3, [pc, #488]	; (8000bf8 <my_InitADC+0x220>)
 8000a10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a14:	4a78      	ldr	r2, [pc, #480]	; (8000bf8 <my_InitADC+0x220>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a1e:	4b76      	ldr	r3, [pc, #472]	; (8000bf8 <my_InitADC+0x220>)
 8000a20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a24:	f003 0204 	and.w	r2, r3, #4
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	681b      	ldr	r3, [r3, #0]

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2201      	movs	r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2203      	movs	r2, #3
 8000a42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4619      	mov	r1, r3
 8000a52:	486a      	ldr	r0, [pc, #424]	; (8000bfc <my_InitADC+0x224>)
 8000a54:	f003 feb6 	bl	80047c4 <HAL_GPIO_Init>

  /*  ##-3-Configure the clock used for ADC sampling ##################################### */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a58:	4b67      	ldr	r3, [pc, #412]	; (8000bf8 <my_InitADC+0x220>)
 8000a5a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a5e:	4a66      	ldr	r2, [pc, #408]	; (8000bf8 <my_InitADC+0x220>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000a68:	4b63      	ldr	r3, [pc, #396]	; (8000bf8 <my_InitADC+0x220>)
 8000a6a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a6e:	f003 0201 	and.w	r2, r3, #1
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	681b      	ldr	r3, [r3, #0]
  DmaHandle.Instance                 = DMA1_Stream1;            /*  DMA1 Stream1 used */
 8000a7a:	4b61      	ldr	r3, [pc, #388]	; (8000c00 <my_InitADC+0x228>)
 8000a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  DmaHandle.Init.Request             = DMA_REQUEST_ADC1;        /*  The request type uses DMA_REQUEST_ADC1 */
 8000a7e:	2309      	movs	r3, #9
 8000a80:	643b      	str	r3, [r7, #64]	; 0x40
  DmaHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;    /*  The transfer direction is from the peripheral to the memory */
 8000a82:	2300      	movs	r3, #0
 8000a84:	647b      	str	r3, [r7, #68]	; 0x44
  DmaHandle.Init.PeriphInc           = DMA_PINC_DISABLE;        /*  Peripheral address auto-increment prohibited */
 8000a86:	2300      	movs	r3, #0
 8000a88:	64bb      	str	r3, [r7, #72]	; 0x48
  DmaHandle.Init.MemInc              = DMA_MINC_ENABLE;         /*  Memory address increment enable */
 8000a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;/*  Peripheral data transmission bit width selection half word, 16bit */
 8000a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a94:	653b      	str	r3, [r7, #80]	; 0x50
  DmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;/*  Memory data transmission bit width select half word, 16bit */
 8000a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9a:	657b      	str	r3, [r7, #84]	; 0x54
  DmaHandle.Init.Mode                = DMA_CIRCULAR;            /*  Loop mode */
 8000a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa0:	65bb      	str	r3, [r7, #88]	; 0x58
  DmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;        /*  Low priority */
 8000aa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
  DmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;    /*  Disable FIFO*/
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	663b      	str	r3, [r7, #96]	; 0x60
  DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL; /*  Disable FIFO This bit has no effect and is used to set the threshold */
 8000aac:	2303      	movs	r3, #3
 8000aae:	667b      	str	r3, [r7, #100]	; 0x64
  DmaHandle.Init.MemBurst      = DMA_MBURST_SINGLE;       /*  Disable FIFO this bit has no effect, used for memory burst */
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	66bb      	str	r3, [r7, #104]	; 0x68
  DmaHandle.Init.PeriphBurst   = DMA_PBURST_SINGLE;      /*  Disable FIFO this bit has no effect, it is used for peripheral burst */
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /*  Initialize DMA */
  if(HAL_DMA_Init(&DmaHandle) != HAL_OK)
 8000ab8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 f949 	bl	8002d54 <HAL_DMA_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <my_InitADC+0xf4>
  {
      Error_Handler();
 8000ac8:	f000 f9ae 	bl	8000e28 <Error_Handler>
  }

  /*  Enable interrupt of DMA1 Stream1 */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2102      	movs	r1, #2
 8000ad0:	200c      	movs	r0, #12
 8000ad2:	f002 f90a 	bl	8002cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ad6:	200c      	movs	r0, #12
 8000ad8:	f002 f921 	bl	8002d1e <HAL_NVIC_EnableIRQ>

  /*  Associate ADC handle and DMA handle */
  __HAL_LINKDMA(&AdcHandle, DMA_Handle, DmaHandle);
 8000adc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ae0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000ae4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ae8:	677b      	str	r3, [r7, #116]	; 0x74

  /*  ##-4-Configure ADC ######################################## ################ */
  __HAL_RCC_ADC12_CLK_ENABLE();
 8000aea:	4b43      	ldr	r3, [pc, #268]	; (8000bf8 <my_InitADC+0x220>)
 8000aec:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000af0:	4a41      	ldr	r2, [pc, #260]	; (8000bf8 <my_InitADC+0x220>)
 8000af2:	f043 0320 	orr.w	r3, r3, #32
 8000af6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000afa:	4b3f      	ldr	r3, [pc, #252]	; (8000bf8 <my_InitADC+0x220>)
 8000afc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b00:	f003 0220 	and.w	r2, r3, #32
 8000b04:	463b      	mov	r3, r7
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	463b      	mov	r3, r7
 8000b0a:	681b      	ldr	r3, [r3, #0]
  AdcHandle.Instance = ADC1;
 8000b0c:	4b3d      	ldr	r3, [pc, #244]	; (8000c04 <my_InitADC+0x22c>)
 8000b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  #if defined (ADC_CLOCK_SOURCE_PLL)
    AdcHandle.Init.ClockPrescaler  = ADC_CLOCK_ASYNC_DIV2;     /*  Using PLL asynchronous clock, divided by 2, that is 72MHz/2
                                                                    = 36MHz */
  #elif defined (ADC_CLOCK_SOURCE_AHB)
    AdcHandle.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV4;  /*  Using AHB synchronous clock, divided by 4, that is, 200MHz/4
 8000b12:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000b16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                                                                      = 50MHz */
  #endif
  AdcHandle.Init.Resolution            = ADC_RESOLUTION_14B;   /*  16-bit resolution */
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  AdcHandle.Init.ScanConvMode          = ADC_SCAN_DISABLE;     /*  Scanning is prohibited because only one channel is opened */
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  AdcHandle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;  /*  EOC conversion end flag */
 8000b26:	2304      	movs	r3, #4
 8000b28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  AdcHandle.Init.LowPowerAutoWait      = DISABLE;              /*  Disable low-power automatic delay feature */
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
  AdcHandle.Init.ContinuousConvMode    = DISABLE;            /*  Prohibit automatic conversion, the timer used to trigger the conversion */
 8000b32:	2300      	movs	r3, #0
 8000b34:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
  AdcHandle.Init.NbrOfConversion       = 1;         /*  1 conversion channel used */
 8000b38:	2301      	movs	r3, #1
 8000b3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  AdcHandle.Init.DiscontinuousConvMode = DISABLE;   /*  Discontinuous mode is prohibited */
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
  AdcHandle.Init.NbrOfDiscConversion   = 1;         /*  After discontinuous mode is disabled, this parameter is ignored, this bit is used to configure Number of channels in discontinuous subgroups */
 8000b44:	2301      	movs	r3, #1
 8000b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  AdcHandle.Init.ExternalTrigConv      = ADC_EXTERNALTRIG_T1_CC1;            /*  CC1 trigger of timer 1 */
 8000b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;    /*  Rising edge trigger */
 8000b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  AdcHandle.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR; /*  DMA cycle mode to receive ADCConverted data */
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  //AdcHandle.Init.BoostMode    = ENABLE;                 /*  If the ADC clock exceeds 20MHz, enable boost */
  AdcHandle.Init.Overrun    = ADC_OVR_DATA_OVERWRITTEN; /*  If the ADC conversion overflows, overwrite the ADC data register */
 8000b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AdcHandle.Init.OversamplingMode         = DISABLE;    /*  Prohibit oversampling */
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec

  /*  Initialize ADC */
  if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8000b6e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fee6 	bl	8001944 <HAL_ADC_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <my_InitADC+0x1aa>
  {
      Error_Handler();
 8000b7e:	f000 f953 	bl	8000e28 <Error_Handler>
  }

  /*  Calibrate ADC, using offset calibration */
  if (HAL_ADCEx_Calibration_Start(&AdcHandle, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8000b82:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000b86:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 ff6d 	bl	8002a6c <HAL_ADCEx_Calibration_Start>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <my_InitADC+0x1c4>
  {
      Error_Handler();
 8000b98:	f000 f946 	bl	8000e28 <Error_Handler>
  }

  /*  Configure ADC channel  */
  sConfig.Channel      = ADC_CHANNEL_10;              /*  Configure the ADC channel used */
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <my_InitADC+0x230>)
 8000b9e:	623b      	str	r3, [r7, #32]
  sConfig.Rank         = ADC_REGULAR_RANK_1;          /*  The first in the sampling sequence */
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;     /*  The sampling period  */
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SingleDiff   = ADC_SINGLE_ENDED;            /*  Single-ended input */
 8000ba8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;             /*  No offset */
 8000bae:	2304      	movs	r3, #4
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.Offset = 0;                                 /*  In the case of no offset, this parameter is ignored */
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8000bb6:	f107 0220 	add.w	r2, r7, #32
 8000bba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 f943 	bl	8001e4c <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <my_InitADC+0x1f8>
  {
      Error_Handler();
 8000bcc:	f000 f92c 	bl	8000e28 <Error_Handler>
  }

  /*  ##-5-Configure ADC timer trigger ##################################### */
  my_TIM1_Config();
 8000bd0:	f000 f81e 	bl	8000c10 <my_TIM1_Config>

  /*  ##-6-Start ADC DMA transfer ##################################### */
  if (HAL_ADC_Start_DMA(&AdcHandle, (uint32_t *)ADCxValues, buffSize) != HAL_OK)
 8000bd4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000bd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bdc:	490b      	ldr	r1, [pc, #44]	; (8000c0c <my_InitADC+0x234>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 f80a 	bl	8001bf8 <HAL_ADC_Start_DMA>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <my_InitADC+0x216>
  {
      Error_Handler();
 8000bea:	f000 f91d 	bl	8000e28 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	58024400 	.word	0x58024400
 8000bfc:	58020800 	.word	0x58020800
 8000c00:	40020028 	.word	0x40020028
 8000c04:	40022000 	.word	0x40022000
 8000c08:	2a000400 	.word	0x2a000400
 8000c0c:	24001124 	.word	0x24001124

08000c10 <my_TIM1_Config>:
    TIM12CLK = 200MHz/(Period + 1) / (Prescaler + 1) = 200MHz / 100 / 1 = 2MHz -> 99 arr , 0 psc
    Duty cycle = Pulse / (Period + 1) = 50 / (99+1) = 50%    -> 50 pulse
 *****************************************************************************************************
**/
static void my_TIM1_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b0a0      	sub	sp, #128	; 0x80
 8000c14:	af00      	add	r7, sp, #0
    TIM_HandleTypeDef  htim ={0};
 8000c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c1a:	224c      	movs	r2, #76	; 0x4c
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f00b ff8a 	bl	800cb38 <memset>
    TIM_OC_InitTypeDef sConfig = {0};
 8000c24:	f107 0318 	add.w	r3, r7, #24
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	619a      	str	r2, [r3, #24]
    TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]
    /*  Enable clock */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c46:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <my_TIM1_Config+0xf0>)
 8000c48:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000c4c:	4a2c      	ldr	r2, [pc, #176]	; (8000d00 <my_TIM1_Config+0xf0>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000c56:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <my_TIM1_Config+0xf0>)
 8000c58:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	683b      	ldr	r3, [r7, #0]

   HAL_TIM_Base_DeInit(&htim);
 8000c64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f008 fe9c 	bl	80099a6 <HAL_TIM_Base_DeInit>

    htim.Instance = TIM1;
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <my_TIM1_Config+0xf4>)
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
   htim.Init.Period            = 99;
 8000c72:	2363      	movs	r3, #99	; 0x63
 8000c74:	643b      	str	r3, [r7, #64]	; 0x40
   htim.Init.Prescaler         = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
   htim.Init.ClockDivision     = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	647b      	str	r3, [r7, #68]	; 0x44
   htim.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63fb      	str	r3, [r7, #60]	; 0x3c
    htim.Init.RepetitionCounter = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	64bb      	str	r3, [r7, #72]	; 0x48
   HAL_TIM_Base_Init(&htim);
 8000c86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f008 fe34 	bl	80098f8 <HAL_TIM_Base_Init>

   sConfig.OCMode     = TIM_OCMODE_PWM1;
 8000c90:	2360      	movs	r3, #96	; 0x60
 8000c92:	61bb      	str	r3, [r7, #24]
   sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c94:	2302      	movs	r3, #2
 8000c96:	623b      	str	r3, [r7, #32]

   /*  50% duty cycle */
   sConfig.Pulse = 50;
 8000c98:	2332      	movs	r3, #50	; 0x32
 8000c9a:	61fb      	str	r3, [r7, #28]
   if(HAL_TIM_OC_ConfigChannel(&htim, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 8000c9c:	f107 0118 	add.w	r1, r7, #24
 8000ca0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f009 f82a 	bl	8009d00 <HAL_TIM_OC_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <my_TIM1_Config+0xa6>
   {
       Error_Handler();
 8000cb2:	f000 f8b9 	bl	8000e28 <Error_Handler>
   }


	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000cb6:	2306      	movs	r3, #6
 8000cb8:	607b      	str	r3, [r7, #4]
	sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000cba:	2370      	movs	r3, #112	; 0x70
 8000cbc:	60bb      	str	r3, [r7, #8]
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cc2:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
	sSlaveConfig.TriggerFilter = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <my_TIM1_Config+0xf8>)
 8000cd2:	f009 f88f 	bl	8009df4 <HAL_TIM_SlaveConfigSynchro>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <my_TIM1_Config+0xd0>
	{
		Error_Handler();
 8000cdc:	f000 f8a4 	bl	8000e28 <Error_Handler>
	}


   /*  Start OC1 */
    if(HAL_TIM_OC_Start(&htim, TIM_CHANNEL_1) != HAL_OK)
 8000ce0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f008 fefc 	bl	8009ae4 <HAL_TIM_OC_Start>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <my_TIM1_Config+0xe6>
  {
       Error_Handler();
 8000cf2:	f000 f899 	bl	8000e28 <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3780      	adds	r7, #128	; 0x80
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	58024400 	.word	0x58024400
 8000d04:	40010000 	.word	0x40010000
 8000d08:	24003174 	.word	0x24003174

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f000 fb14 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f80e 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f7ff fcc0 	bl	800069c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d1c:	f000 fa2a 	bl	8001174 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000d20:	f000 fada 	bl	80012d8 <MX_USB_OTG_HS_USB_Init>
  MX_SDMMC1_SD_Init();
 8000d24:	f000 f886 	bl	8000e34 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000d28:	f00b fcd4 	bl	800c6d4 <MX_FATFS_Init>
  //MX_ADC2_Init();
  /* USER CODE BEGIN 2 */
  my_InitADC();
 8000d2c:	f7ff fe54 	bl	80009d8 <my_InitADC>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <main+0x24>
	...

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b09c      	sub	sp, #112	; 0x70
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	224c      	movs	r2, #76	; 0x4c
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f00b fef8 	bl	800cb38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2220      	movs	r2, #32
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f00b fef2 	bl	800cb38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d54:	2004      	movs	r0, #4
 8000d56:	f003 ff17 	bl	8004b88 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <SystemClock_Config+0xec>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a2f      	ldr	r2, [pc, #188]	; (8000e20 <SystemClock_Config+0xec>)
 8000d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d68:	6193      	str	r3, [r2, #24]
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <SystemClock_Config+0xec>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d76:	bf00      	nop
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <SystemClock_Config+0xec>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d84:	d1f8      	bne.n	8000d78 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <SystemClock_Config+0xf0>)
 8000d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8a:	f023 0303 	bic.w	r3, r3, #3
 8000d8e:	4a25      	ldr	r2, [pc, #148]	; (8000e24 <SystemClock_Config+0xf0>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000d96:	2321      	movs	r3, #33	; 0x21
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d9a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000da0:	2301      	movs	r3, #1
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da4:	2302      	movs	r3, #2
 8000da6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da8:	2302      	movs	r3, #2
 8000daa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000db0:	2332      	movs	r3, #50	; 0x32
 8000db2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000db8:	2308      	movs	r3, #8
 8000dba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 ff33 	bl	8004c3c <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ddc:	f000 f824 	bl	8000e28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de0:	233f      	movs	r3, #63	; 0x3f
 8000de2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	2303      	movs	r3, #3
 8000de6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000df0:	2340      	movs	r3, #64	; 0x40
 8000df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000df4:	2340      	movs	r3, #64	; 0x40
 8000df6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dfe:	2340      	movs	r3, #64	; 0x40
 8000e00:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2104      	movs	r1, #4
 8000e06:	4618      	mov	r0, r3
 8000e08:	f004 fb1c 	bl	8005444 <HAL_RCC_ClockConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000e12:	f000 f809 	bl	8000e28 <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3770      	adds	r7, #112	; 0x70
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	58024800 	.word	0x58024800
 8000e24:	58024400 	.word	0x58024400

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <Error_Handler+0x8>
	...

08000e34 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_SDMMC1_SD_Init+0x34>)
 8000e3a:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <MX_SDMMC1_SD_Init+0x38>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <MX_SDMMC1_SD_Init+0x34>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_SDMMC1_SD_Init+0x34>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <MX_SDMMC1_SD_Init+0x34>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <MX_SDMMC1_SD_Init+0x34>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <MX_SDMMC1_SD_Init+0x34>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	24004214 	.word	0x24004214
 8000e6c:	52007000 	.word	0x52007000

08000e70 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0ba      	sub	sp, #232	; 0xe8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	22b8      	movs	r2, #184	; 0xb8
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f00b fe51 	bl	800cb38 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a4e      	ldr	r2, [pc, #312]	; (8000fd4 <HAL_SD_MspInit+0x164>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	f040 8094 	bne.w	8000fca <HAL_SD_MspInit+0x15a>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f004 fe53 	bl	8005b5c <HAL_RCCEx_PeriphCLKConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8000ebc:	f7ff ffb4 	bl	8000e28 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ec0:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <HAL_SD_MspInit+0x168>)
 8000ec2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000ec6:	4a44      	ldr	r2, [pc, #272]	; (8000fd8 <HAL_SD_MspInit+0x168>)
 8000ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ecc:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000ed0:	4b41      	ldr	r3, [pc, #260]	; (8000fd8 <HAL_SD_MspInit+0x168>)
 8000ed2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b3e      	ldr	r3, [pc, #248]	; (8000fd8 <HAL_SD_MspInit+0x168>)
 8000ee0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee4:	4a3c      	ldr	r2, [pc, #240]	; (8000fd8 <HAL_SD_MspInit+0x168>)
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eee:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <HAL_SD_MspInit+0x168>)
 8000ef0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efc:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <HAL_SD_MspInit+0x168>)
 8000efe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f02:	4a35      	ldr	r2, [pc, #212]	; (8000fd8 <HAL_SD_MspInit+0x168>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f0c:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <HAL_SD_MspInit+0x168>)
 8000f0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1a:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <HAL_SD_MspInit+0x168>)
 8000f1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f20:	4a2d      	ldr	r2, [pc, #180]	; (8000fd8 <HAL_SD_MspInit+0x168>)
 8000f22:	f043 0308 	orr.w	r3, r3, #8
 8000f26:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <HAL_SD_MspInit+0x168>)
 8000f2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PB13     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f52:	230c      	movs	r3, #12
 8000f54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481f      	ldr	r0, [pc, #124]	; (8000fdc <HAL_SD_MspInit+0x16c>)
 8000f60:	f003 fc30 	bl	80047c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f7e:	230c      	movs	r3, #12
 8000f80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <HAL_SD_MspInit+0x170>)
 8000f8c:	f003 fc1a 	bl	80047c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f90:	2304      	movs	r3, #4
 8000f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000fa8:	230c      	movs	r3, #12
 8000faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <HAL_SD_MspInit+0x174>)
 8000fb6:	f003 fc05 	bl	80047c4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2031      	movs	r0, #49	; 0x31
 8000fc0:	f001 fe93 	bl	8002cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000fc4:	2031      	movs	r0, #49	; 0x31
 8000fc6:	f001 feaa 	bl	8002d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	37e8      	adds	r7, #232	; 0xe8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	52007000 	.word	0x52007000
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	58020400 	.word	0x58020400
 8000fe0:	58020800 	.word	0x58020800
 8000fe4:	58020c00 	.word	0x58020c00

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_MspInit+0x30>)
 8000ff0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x30>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x30>)
 8001000:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	58024400 	.word	0x58024400

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001068:	f000 f9da 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <SDMMC1_IRQHandler+0x10>)
 8001076:	f007 fa4d 	bl	8008514 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	24004214 	.word	0x24004214

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <SystemInit+0xd0>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108e:	4a31      	ldr	r2, [pc, #196]	; (8001154 <SystemInit+0xd0>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <SystemInit+0xd4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d807      	bhi.n	80010b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010a4:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <SystemInit+0xd4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 030f 	bic.w	r3, r3, #15
 80010ac:	4a2a      	ldr	r2, [pc, #168]	; (8001158 <SystemInit+0xd4>)
 80010ae:	f043 0303 	orr.w	r3, r3, #3
 80010b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <SystemInit+0xd8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a28      	ldr	r2, [pc, #160]	; (800115c <SystemInit+0xd8>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <SystemInit+0xd8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <SystemInit+0xd8>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4924      	ldr	r1, [pc, #144]	; (800115c <SystemInit+0xd8>)
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <SystemInit+0xdc>)
 80010ce:	4013      	ands	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <SystemInit+0xd4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010de:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <SystemInit+0xd4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 030f 	bic.w	r3, r3, #15
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <SystemInit+0xd4>)
 80010e8:	f043 0303 	orr.w	r3, r3, #3
 80010ec:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <SystemInit+0xd8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <SystemInit+0xd8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <SystemInit+0xd8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <SystemInit+0xd8>)
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <SystemInit+0xe0>)
 8001104:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <SystemInit+0xd8>)
 8001108:	4a17      	ldr	r2, [pc, #92]	; (8001168 <SystemInit+0xe4>)
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <SystemInit+0xd8>)
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <SystemInit+0xe8>)
 8001110:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <SystemInit+0xd8>)
 8001114:	2200      	movs	r2, #0
 8001116:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <SystemInit+0xd8>)
 800111a:	4a14      	ldr	r2, [pc, #80]	; (800116c <SystemInit+0xe8>)
 800111c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <SystemInit+0xd8>)
 8001120:	2200      	movs	r2, #0
 8001122:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <SystemInit+0xd8>)
 8001126:	4a11      	ldr	r2, [pc, #68]	; (800116c <SystemInit+0xe8>)
 8001128:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <SystemInit+0xd8>)
 800112c:	2200      	movs	r2, #0
 800112e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <SystemInit+0xd8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a09      	ldr	r2, [pc, #36]	; (800115c <SystemInit+0xd8>)
 8001136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <SystemInit+0xd8>)
 800113e:	2200      	movs	r2, #0
 8001140:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <SystemInit+0xec>)
 8001144:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001148:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00
 8001158:	52002000 	.word	0x52002000
 800115c:	58024400 	.word	0x58024400
 8001160:	eaf6ed7f 	.word	0xeaf6ed7f
 8001164:	02020200 	.word	0x02020200
 8001168:	01ff0000 	.word	0x01ff0000
 800116c:	01010280 	.word	0x01010280
 8001170:	52004000 	.word	0x52004000

08001174 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_USART3_UART_Init+0x90>)
 800117a:	4a23      	ldr	r2, [pc, #140]	; (8001208 <MX_USART3_UART_Init+0x94>)
 800117c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_USART3_UART_Init+0x90>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_USART3_UART_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_USART3_UART_Init+0x90>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_USART3_UART_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_USART3_UART_Init+0x90>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_USART3_UART_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_USART3_UART_Init+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_USART3_UART_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_USART3_UART_Init+0x90>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_USART3_UART_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011bc:	4811      	ldr	r0, [pc, #68]	; (8001204 <MX_USART3_UART_Init+0x90>)
 80011be:	f009 fb59 	bl	800a874 <HAL_UART_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011c8:	f7ff fe2e 	bl	8000e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011cc:	2100      	movs	r1, #0
 80011ce:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_USART3_UART_Init+0x90>)
 80011d0:	f00a fbec 	bl	800b9ac <HAL_UARTEx_SetTxFifoThreshold>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011da:	f7ff fe25 	bl	8000e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011de:	2100      	movs	r1, #0
 80011e0:	4808      	ldr	r0, [pc, #32]	; (8001204 <MX_USART3_UART_Init+0x90>)
 80011e2:	f00a fc21 	bl	800ba28 <HAL_UARTEx_SetRxFifoThreshold>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011ec:	f7ff fe1c 	bl	8000e28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <MX_USART3_UART_Init+0x90>)
 80011f2:	f00a fba2 	bl	800b93a <HAL_UARTEx_DisableFifoMode>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011fc:	f7ff fe14 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	24004290 	.word	0x24004290
 8001208:	40004800 	.word	0x40004800

0800120c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0b8      	sub	sp, #224	; 0xe0
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	22b8      	movs	r2, #184	; 0xb8
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f00b fc83 	bl	800cb38 <memset>
  if(uartHandle->Instance==USART3)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a25      	ldr	r2, [pc, #148]	; (80012cc <HAL_UART_MspInit+0xc0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d142      	bne.n	80012c2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800123c:	2302      	movs	r3, #2
 800123e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4618      	mov	r0, r3
 800124c:	f004 fc86 	bl	8005b5c <HAL_RCCEx_PeriphCLKConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001256:	f7ff fde7 	bl	8000e28 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_UART_MspInit+0xc4>)
 800125c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <HAL_UART_MspInit+0xc4>)
 8001262:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001266:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_UART_MspInit+0xc4>)
 800126c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_UART_MspInit+0xc4>)
 800127a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <HAL_UART_MspInit+0xc4>)
 8001280:	f043 0308 	orr.w	r3, r3, #8
 8001284:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_UART_MspInit+0xc4>)
 800128a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001296:	f44f 7340 	mov.w	r3, #768	; 0x300
 800129a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012b0:	2307      	movs	r3, #7
 80012b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_UART_MspInit+0xc8>)
 80012be:	f003 fa81 	bl	80047c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012c2:	bf00      	nop
 80012c4:	37e0      	adds	r7, #224	; 0xe0
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40004800 	.word	0x40004800
 80012d0:	58024400 	.word	0x58024400
 80012d4:	58020c00 	.word	0x58020c00

080012d8 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001320 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012ec:	f7ff feca 	bl	8001084 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012f2:	490d      	ldr	r1, [pc, #52]	; (8001328 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001308:	4c0a      	ldr	r4, [pc, #40]	; (8001334 <LoopFillZerobss+0x22>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001316:	f00b fbeb 	bl	800caf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131a:	f7ff fcf7 	bl	8000d0c <main>
  bx  lr
 800131e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001320:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001324:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001328:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800132c:	0800cbc4 	.word	0x0800cbc4
  ldr r2, =_sbss
 8001330:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001334:	24004324 	.word	0x24004324

08001338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC_IRQHandler>
	...

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001342:	2003      	movs	r0, #3
 8001344:	f001 fcc6 	bl	8002cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001348:	f004 fa32 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 800134c:	4602      	mov	r2, r0
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_Init+0x68>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	0a1b      	lsrs	r3, r3, #8
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	4913      	ldr	r1, [pc, #76]	; (80013a8 <HAL_Init+0x6c>)
 800135a:	5ccb      	ldrb	r3, [r1, r3]
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_Init+0x68>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <HAL_Init+0x6c>)
 8001370:	5cd3      	ldrb	r3, [r2, r3]
 8001372:	f003 031f 	and.w	r3, r3, #31
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	fa22 f303 	lsr.w	r3, r2, r3
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <HAL_Init+0x70>)
 800137e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <HAL_Init+0x74>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001386:	2000      	movs	r0, #0
 8001388:	f000 f814 	bl	80013b4 <HAL_InitTick>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e002      	b.n	800139c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001396:	f7ff fe27 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	58024400 	.word	0x58024400
 80013a8:	0800cb60 	.word	0x0800cb60
 80013ac:	24000004 	.word	0x24000004
 80013b0:	24000000 	.word	0x24000000

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_InitTick+0x60>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e021      	b.n	800140c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_InitTick+0x64>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_InitTick+0x60>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 fcab 	bl	8002d3a <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f001 fc75 	bl	8002cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_InitTick+0x68>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2400000c 	.word	0x2400000c
 8001418:	24000000 	.word	0x24000000
 800141c:	24000008 	.word	0x24000008

08001420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	2400000c 	.word	0x2400000c
 8001444:	24004320 	.word	0x24004320

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	24004320 	.word	0x24004320

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffde 	bl	8001448 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2400000c 	.word	0x2400000c

080014a8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	401a      	ands	r2, r3
 80014bc:	4904      	ldr	r1, [pc, #16]	; (80014d0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	58000400 	.word	0x58000400

080014d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	609a      	str	r2, [r3, #8]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3360      	adds	r3, #96	; 0x60
 800154e:	461a      	mov	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	430b      	orrs	r3, r1
 800156a:	431a      	orrs	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001570:	bf00      	nop
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	431a      	orrs	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	611a      	str	r2, [r3, #16]
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b087      	sub	sp, #28
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3360      	adds	r3, #96	; 0x60
 80015be:	461a      	mov	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	431a      	orrs	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	601a      	str	r2, [r3, #0]
  }
}
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800160a:	b480      	push	{r7}
 800160c:	b087      	sub	sp, #28
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3330      	adds	r3, #48	; 0x30
 800161a:	461a      	mov	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	4413      	add	r3, r2
 8001628:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	211f      	movs	r1, #31
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	401a      	ands	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	0e9b      	lsrs	r3, r3, #26
 8001642:	f003 011f 	and.w	r1, r3, #31
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	f003 031f 	and.w	r3, r3, #31
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	431a      	orrs	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f023 0203 	bic.w	r2, r3, #3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	60da      	str	r2, [r3, #12]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3314      	adds	r3, #20
 8001698:	461a      	mov	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	0e5b      	lsrs	r3, r3, #25
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	4413      	add	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	0d1b      	lsrs	r3, r3, #20
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	2107      	movs	r1, #7
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	401a      	ands	r2, r3
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	0d1b      	lsrs	r3, r3, #20
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	431a      	orrs	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016d2:	bf00      	nop
 80016d4:	371c      	adds	r7, #28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016f8:	43db      	mvns	r3, r3
 80016fa:	401a      	ands	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0318 	and.w	r3, r3, #24
 8001702:	4908      	ldr	r1, [pc, #32]	; (8001724 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001704:	40d9      	lsrs	r1, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	400b      	ands	r3, r1
 800170a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800170e:	431a      	orrs	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	000fffff 	.word	0x000fffff

08001728 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 031f 	and.w	r3, r3, #31
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001752:	4013      	ands	r3, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6093      	str	r3, [r2, #8]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	5fffffc0 	.word	0x5fffffc0

08001768 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800177c:	d101      	bne.n	8001782 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800179e:	4013      	ands	r3, r2
 80017a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	6fffffc0 	.word	0x6fffffc0

080017b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017cc:	d101      	bne.n	80017d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <LL_ADC_Enable+0x24>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	f043 0201 	orr.w	r2, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	7fffffc0 	.word	0x7fffffc0

08001808 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <LL_ADC_Disable+0x24>)
 8001816:	4013      	ands	r3, r2
 8001818:	f043 0202 	orr.w	r2, r3, #2
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	7fffffc0 	.word	0x7fffffc0

08001830 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <LL_ADC_IsEnabled+0x18>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <LL_ADC_IsEnabled+0x1a>
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b02      	cmp	r3, #2
 8001868:	d101      	bne.n	800186e <LL_ADC_IsDisableOngoing+0x18>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <LL_ADC_IsDisableOngoing+0x1a>
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <LL_ADC_REG_StartConversion+0x24>)
 800188a:	4013      	ands	r3, r2
 800188c:	f043 0204 	orr.w	r2, r3, #4
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	7fffffc0 	.word	0x7fffffc0

080018a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <LL_ADC_REG_StopConversion+0x24>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	f043 0210 	orr.w	r2, r3, #16
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	7fffffc0 	.word	0x7fffffc0

080018cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d101      	bne.n	80018e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <LL_ADC_INJ_StopConversion+0x24>)
 8001902:	4013      	ands	r3, r2
 8001904:	f043 0220 	orr.w	r2, r3, #32
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	7fffffc0 	.word	0x7fffffc0

0800191c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b08      	cmp	r3, #8
 800192e:	d101      	bne.n	8001934 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e138      	b.n	8001bd0 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7fe fe39 	bl	80005e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff feef 	bl	8001768 <LL_ADC_IsDeepPowerDownEnabled>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fed5 	bl	8001744 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff0a 	bl	80017b8 <LL_ADC_IsInternalRegulatorEnabled>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d114      	bne.n	80019d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff feee 	bl	8001790 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019b4:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <HAL_ADC_Init+0x294>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	4a88      	ldr	r2, [pc, #544]	; (8001bdc <HAL_ADC_Init+0x298>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	3301      	adds	r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019c6:	e002      	b.n	80019ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f9      	bne.n	80019c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff feed 	bl	80017b8 <LL_ADC_IsInternalRegulatorEnabled>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10d      	bne.n	8001a00 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e8:	f043 0210 	orr.w	r2, r3, #16
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	f043 0201 	orr.w	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff61 	bl	80018cc <LL_ADC_REG_IsConversionOngoing>
 8001a0a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f040 80d2 	bne.w	8001bbe <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f040 80ce 	bne.w	8001bbe <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a2a:	f043 0202 	orr.w	r2, r3, #2
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fefa 	bl	8001830 <LL_ADC_IsEnabled>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d110      	bne.n	8001a64 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a42:	4867      	ldr	r0, [pc, #412]	; (8001be0 <HAL_ADC_Init+0x29c>)
 8001a44:	f7ff fef4 	bl	8001830 <LL_ADC_IsEnabled>
 8001a48:	4604      	mov	r4, r0
 8001a4a:	4866      	ldr	r0, [pc, #408]	; (8001be4 <HAL_ADC_Init+0x2a0>)
 8001a4c:	f7ff fef0 	bl	8001830 <LL_ADC_IsEnabled>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4323      	orrs	r3, r4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4862      	ldr	r0, [pc, #392]	; (8001be8 <HAL_ADC_Init+0x2a4>)
 8001a60:	f7ff fd38 	bl	80014d4 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7d5b      	ldrb	r3, [r3, #21]
 8001a68:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a6e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001a74:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7f1b      	ldrb	r3, [r3, #28]
 8001a7a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7f1b      	ldrb	r3, [r3, #28]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	045b      	lsls	r3, r3, #17
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <HAL_ADC_Init+0x2a8>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	69b9      	ldr	r1, [r7, #24]
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fefe 	bl	80018cc <LL_ADC_REG_IsConversionOngoing>
 8001ad0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff20 	bl	800191c <LL_ADC_INJ_IsConversionOngoing>
 8001adc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d14a      	bne.n	8001b7a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d147      	bne.n	8001b7a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7d1b      	ldrb	r3, [r3, #20]
 8001aee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	4b3c      	ldr	r3, [pc, #240]	; (8001bf0 <HAL_ADC_Init+0x2ac>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	69b9      	ldr	r1, [r7, #24]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d11b      	bne.n	8001b4e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <HAL_ADC_Init+0x2b0>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b2a:	3a01      	subs	r2, #1
 8001b2c:	0411      	lsls	r1, r2, #16
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b32:	4311      	orrs	r1, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b38:	4311      	orrs	r1, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	611a      	str	r2, [r3, #16]
 8001b4c:	e007      	b.n	8001b5e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fe7b 	bl	8002870 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d10c      	bne.n	8001b9c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	f023 010f 	bic.w	r1, r3, #15
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30
 8001b9a:	e007      	b.n	8001bac <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 020f 	bic.w	r2, r2, #15
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb0:	f023 0303 	bic.w	r3, r3, #3
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	655a      	str	r2, [r3, #84]	; 0x54
 8001bbc:	e007      	b.n	8001bce <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	f043 0210 	orr.w	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bce:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3724      	adds	r7, #36	; 0x24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	24000000 	.word	0x24000000
 8001bdc:	053e2d63 	.word	0x053e2d63
 8001be0:	40022000 	.word	0x40022000
 8001be4:	40022100 	.word	0x40022100
 8001be8:	40022300 	.word	0x40022300
 8001bec:	fff0c003 	.word	0xfff0c003
 8001bf0:	ffffbffc 	.word	0xffffbffc
 8001bf4:	fc00f81e 	.word	0xfc00f81e

08001bf8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c04:	484f      	ldr	r0, [pc, #316]	; (8001d44 <HAL_ADC_Start_DMA+0x14c>)
 8001c06:	f7ff fd8f 	bl	8001728 <LL_ADC_GetMultimode>
 8001c0a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fe5b 	bl	80018cc <LL_ADC_REG_IsConversionOngoing>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f040 808c 	bne.w	8001d36 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_Start_DMA+0x34>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e087      	b.n	8001d3c <HAL_ADC_Start_DMA+0x144>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d002      	beq.n	8001c46 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b09      	cmp	r3, #9
 8001c44:	d170      	bne.n	8001d28 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fca2 	bl	8002590 <ADC_Enable>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d163      	bne.n	8001d1e <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c5a:	4b3b      	ldr	r3, [pc, #236]	; (8001d48 <HAL_ADC_Start_DMA+0x150>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a38      	ldr	r2, [pc, #224]	; (8001d4c <HAL_ADC_Start_DMA+0x154>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d002      	beq.n	8001c76 <HAL_ADC_Start_DMA+0x7e>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	e000      	b.n	8001c78 <HAL_ADC_Start_DMA+0x80>
 8001c76:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_ADC_Start_DMA+0x158>)
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d002      	beq.n	8001c86 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d105      	bne.n	8001c92 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca2:	f023 0206 	bic.w	r2, r3, #6
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	659a      	str	r2, [r3, #88]	; 0x58
 8001caa:	e002      	b.n	8001cb2 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <HAL_ADC_Start_DMA+0x15c>)
 8001cb8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	4a26      	ldr	r2, [pc, #152]	; (8001d58 <HAL_ADC_Start_DMA+0x160>)
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <HAL_ADC_Start_DMA+0x164>)
 8001cc8:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	221c      	movs	r2, #28
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0210 	orr.w	r2, r2, #16
 8001ce8:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	f7ff fcb4 	bl	8001662 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3340      	adds	r3, #64	; 0x40
 8001d04:	4619      	mov	r1, r3
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f001 fbb3 	bl	8003474 <HAL_DMA_Start_IT>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fdb0 	bl	800187c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d1c:	e00d      	b.n	8001d3a <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001d26:	e008      	b.n	8001d3a <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d34:	e001      	b.n	8001d3a <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d36:	2302      	movs	r3, #2
 8001d38:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40022300 	.word	0x40022300
 8001d48:	fffff0fe 	.word	0xfffff0fe
 8001d4c:	40022100 	.word	0x40022100
 8001d50:	40022000 	.word	0x40022000
 8001d54:	08002747 	.word	0x08002747
 8001d58:	0800281f 	.word	0x0800281f
 8001d5c:	0800283b 	.word	0x0800283b

08001d60 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_Stop_DMA+0x16>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e04f      	b.n	8001e16 <HAL_ADC_Stop_DMA+0xb6>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001d7e:	2103      	movs	r1, #3
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fb49 	bl	8002418 <ADC_ConversionStop>
 8001d86:	4603      	mov	r3, r0
 8001d88:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d13d      	bne.n	8001e0c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0203 	bic.w	r2, r2, #3
 8001d9e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d10f      	bne.n	8001dce <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 fdc8 	bl	8003948 <HAL_DMA_Abort>
 8001db8:	4603      	mov	r3, r0
 8001dba:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0210 	bic.w	r2, r2, #16
 8001ddc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 fc4f 	bl	8002688 <ADC_Disable>
 8001dea:	4603      	mov	r3, r0
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	e002      	b.n	8001df6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fc49 	bl	8002688 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d107      	bne.n	8001e0c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_ADC_Stop_DMA+0xc0>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	ffffeefe 	.word	0xffffeefe

08001e24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b0a1      	sub	sp, #132	; 0x84
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a9a      	ldr	r2, [pc, #616]	; (80020d0 <HAL_ADC_ConfigChannel+0x284>)
 8001e66:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x2a>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e2bc      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x5a4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fd22 	bl	80018cc <LL_ADC_REG_IsConversionOngoing>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 82a1 	bne.w	80023d2 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d108      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x62>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0e9b      	lsrs	r3, r3, #26
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	e016      	b.n	8001edc <HAL_ADC_ConfigChannel+0x90>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ebe:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	e003      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	69d1      	ldr	r1, [r2, #28]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	430b      	orrs	r3, r1
 8001ee8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f7ff fb87 	bl	800160a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fce3 	bl	80018cc <LL_ADC_REG_IsConversionOngoing>
 8001f06:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fd05 	bl	800191c <LL_ADC_INJ_IsConversionOngoing>
 8001f12:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 80a0 	bne.w	800205c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f040 809c 	bne.w	800205c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6819      	ldr	r1, [r3, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	461a      	mov	r2, r3
 8001f32:	f7ff fba9 	bl	8001688 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10b      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x110>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	e00a      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x126>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d027      	beq.n	8001fcc <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6919      	ldr	r1, [r3, #16]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f8a:	f7ff fad7 	bl	800153c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6919      	ldr	r1, [r3, #16]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	7e5b      	ldrb	r3, [r3, #25]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d102      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x158>
 8001f9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001fa2:	e000      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x15a>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f7ff fb01 	bl	80015ae <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6919      	ldr	r1, [r3, #16]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	7e1b      	ldrb	r3, [r3, #24]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d102      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x176>
 8001fbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fc0:	e000      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x178>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f7ff fad9 	bl	800157c <LL_ADC_SetDataRightShift>
 8001fca:	e047      	b.n	800205c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	069b      	lsls	r3, r3, #26
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d107      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fee:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	069b      	lsls	r3, r3, #26
 8002000:	429a      	cmp	r2, r3
 8002002:	d107      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002012:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800201a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	069b      	lsls	r3, r3, #26
 8002024:	429a      	cmp	r2, r3
 8002026:	d107      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002036:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800203e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	069b      	lsls	r3, r3, #26
 8002048:	429a      	cmp	r2, r3
 800204a:	d107      	bne.n	800205c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800205a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fbe5 	bl	8001830 <LL_ADC_IsEnabled>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	f040 81bb 	bne.w	80023e4 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6819      	ldr	r1, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	461a      	mov	r2, r3
 800207c:	f7ff fb30 	bl	80016e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <HAL_ADC_ConfigChannel+0x284>)
 8002086:	4293      	cmp	r3, r2
 8002088:	f040 8130 	bne.w	80022ec <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x268>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	3301      	adds	r3, #1
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	2b09      	cmp	r3, #9
 80020aa:	bf94      	ite	ls
 80020ac:	2301      	movls	r3, #1
 80020ae:	2300      	movhi	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	e01b      	b.n	80020ec <HAL_ADC_ConfigChannel+0x2a0>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80020c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80020c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e005      	b.n	80020dc <HAL_ADC_ConfigChannel+0x290>
 80020d0:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80020d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	2b09      	cmp	r3, #9
 80020e4:	bf94      	ite	ls
 80020e6:	2301      	movls	r3, #1
 80020e8:	2300      	movhi	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d079      	beq.n	80021e4 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_ADC_ConfigChannel+0x2c0>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	3301      	adds	r3, #1
 8002104:	069b      	lsls	r3, r3, #26
 8002106:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800210a:	e015      	b.n	8002138 <HAL_ADC_ConfigChannel+0x2ec>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800211a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800211c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800211e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002124:	2320      	movs	r3, #32
 8002126:	e003      	b.n	8002130 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	3301      	adds	r3, #1
 8002132:	069b      	lsls	r3, r3, #26
 8002134:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x30c>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	3301      	adds	r3, #1
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2101      	movs	r1, #1
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	e017      	b.n	8002188 <HAL_ADC_ConfigChannel+0x33c>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002168:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800216a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002170:	2320      	movs	r3, #32
 8002172:	e003      	b.n	800217c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	ea42 0103 	orr.w	r1, r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x362>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0e9b      	lsrs	r3, r3, #26
 800219e:	3301      	adds	r3, #1
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	051b      	lsls	r3, r3, #20
 80021ac:	e018      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x394>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80021c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80021c6:	2320      	movs	r3, #32
 80021c8:	e003      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80021ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021cc:	fab3 f383 	clz	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	3301      	adds	r3, #1
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e0:	430b      	orrs	r3, r1
 80021e2:	e07e      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x3b4>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	3301      	adds	r3, #1
 80021f8:	069b      	lsls	r3, r3, #26
 80021fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021fe:	e015      	b.n	800222c <HAL_ADC_ConfigChannel+0x3e0>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e003      	b.n	8002224 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	069b      	lsls	r3, r3, #26
 8002228:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_ADC_ConfigChannel+0x400>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0e9b      	lsrs	r3, r3, #26
 800223e:	3301      	adds	r3, #1
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	e017      	b.n	800227c <HAL_ADC_ConfigChannel+0x430>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	61bb      	str	r3, [r7, #24]
  return result;
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e003      	b.n	8002270 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2101      	movs	r1, #1
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	ea42 0103 	orr.w	r1, r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10d      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x45c>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0e9b      	lsrs	r3, r3, #26
 8002292:	3301      	adds	r3, #1
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	3b1e      	subs	r3, #30
 80022a0:	051b      	lsls	r3, r3, #20
 80022a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a6:	e01b      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x494>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	60fb      	str	r3, [r7, #12]
  return result;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e003      	b.n	80022cc <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	f003 021f 	and.w	r2, r3, #31
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	3b1e      	subs	r3, #30
 80022da:	051b      	lsls	r3, r3, #20
 80022dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e0:	430b      	orrs	r3, r1
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	6892      	ldr	r2, [r2, #8]
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7ff f9ce 	bl	8001688 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da77      	bge.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022f4:	4840      	ldr	r0, [pc, #256]	; (80023f8 <HAL_ADC_ConfigChannel+0x5ac>)
 80022f6:	f7ff f913 	bl	8001520 <LL_ADC_GetCommonPathInternalCh>
 80022fa:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022fc:	483f      	ldr	r0, [pc, #252]	; (80023fc <HAL_ADC_ConfigChannel+0x5b0>)
 80022fe:	f7ff fa97 	bl	8001830 <LL_ADC_IsEnabled>
 8002302:	4604      	mov	r4, r0
 8002304:	483e      	ldr	r0, [pc, #248]	; (8002400 <HAL_ADC_ConfigChannel+0x5b4>)
 8002306:	f7ff fa93 	bl	8001830 <LL_ADC_IsEnabled>
 800230a:	4603      	mov	r3, r0
 800230c:	4323      	orrs	r3, r4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d155      	bne.n	80023be <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <HAL_ADC_ConfigChannel+0x5b8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d122      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x516>
 800231c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11d      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a35      	ldr	r2, [pc, #212]	; (8002400 <HAL_ADC_ConfigChannel+0x5b4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d159      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002332:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002336:	4619      	mov	r1, r3
 8002338:	482f      	ldr	r0, [pc, #188]	; (80023f8 <HAL_ADC_ConfigChannel+0x5ac>)
 800233a:	f7ff f8de 	bl	80014fa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800233e:	4b32      	ldr	r3, [pc, #200]	; (8002408 <HAL_ADC_ConfigChannel+0x5bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	099b      	lsrs	r3, r3, #6
 8002344:	4a31      	ldr	r2, [pc, #196]	; (800240c <HAL_ADC_ConfigChannel+0x5c0>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	099b      	lsrs	r3, r3, #6
 800234c:	3301      	adds	r3, #1
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002352:	e002      	b.n	800235a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	3b01      	subs	r3, #1
 8002358:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f9      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002360:	e040      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a2a      	ldr	r2, [pc, #168]	; (8002410 <HAL_ADC_ConfigChannel+0x5c4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d111      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x544>
 800236c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10c      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a21      	ldr	r2, [pc, #132]	; (8002400 <HAL_ADC_ConfigChannel+0x5b4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d131      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002386:	4619      	mov	r1, r3
 8002388:	481b      	ldr	r0, [pc, #108]	; (80023f8 <HAL_ADC_ConfigChannel+0x5ac>)
 800238a:	f7ff f8b6 	bl	80014fa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800238e:	e029      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_ADC_ConfigChannel+0x5c8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d124      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
 800239a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d11f      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a15      	ldr	r2, [pc, #84]	; (8002400 <HAL_ADC_ConfigChannel+0x5b4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d11a      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80023ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b4:	4619      	mov	r1, r3
 80023b6:	4810      	ldr	r0, [pc, #64]	; (80023f8 <HAL_ADC_ConfigChannel+0x5ac>)
 80023b8:	f7ff f89f 	bl	80014fa <LL_ADC_SetCommonPathInternalCh>
 80023bc:	e012      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f043 0220 	orr.w	r2, r3, #32
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023d0:	e008      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	f043 0220 	orr.w	r2, r3, #32
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023ec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3784      	adds	r7, #132	; 0x84
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd90      	pop	{r4, r7, pc}
 80023f8:	40022300 	.word	0x40022300
 80023fc:	40022000 	.word	0x40022000
 8002400:	40022100 	.word	0x40022100
 8002404:	cb840000 	.word	0xcb840000
 8002408:	24000000 	.word	0x24000000
 800240c:	053e2d63 	.word	0x053e2d63
 8002410:	bac04000 	.word	0xbac04000
 8002414:	cfb80000 	.word	0xcfb80000

08002418 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fa4c 	bl	80018cc <LL_ADC_REG_IsConversionOngoing>
 8002434:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fa6e 	bl	800191c <LL_ADC_INJ_IsConversionOngoing>
 8002440:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d103      	bne.n	8002450 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8098 	beq.w	8002580 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d02a      	beq.n	80024b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7d5b      	ldrb	r3, [r3, #21]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d126      	bne.n	80024b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7d1b      	ldrb	r3, [r3, #20]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d122      	bne.n	80024b4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800246e:	2301      	movs	r3, #1
 8002470:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002472:	e014      	b.n	800249e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4a45      	ldr	r2, [pc, #276]	; (800258c <ADC_ConversionStop+0x174>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d90d      	bls.n	8002498 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	f043 0210 	orr.w	r2, r3, #16
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e074      	b.n	8002582 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	3301      	adds	r3, #1
 800249c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b40      	cmp	r3, #64	; 0x40
 80024aa:	d1e3      	bne.n	8002474 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2240      	movs	r2, #64	; 0x40
 80024b2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d014      	beq.n	80024e4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fa04 	bl	80018cc <LL_ADC_REG_IsConversionOngoing>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00c      	beq.n	80024e4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff f9c1 	bl	8001856 <LL_ADC_IsDisableOngoing>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff f9e0 	bl	80018a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d014      	beq.n	8002514 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fa14 	bl	800191c <LL_ADC_INJ_IsConversionOngoing>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00c      	beq.n	8002514 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f9a9 	bl	8001856 <LL_ADC_IsDisableOngoing>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d104      	bne.n	8002514 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f9f0 	bl	80018f4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d005      	beq.n	8002526 <ADC_ConversionStop+0x10e>
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d105      	bne.n	800252c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002520:	230c      	movs	r3, #12
 8002522:	617b      	str	r3, [r7, #20]
        break;
 8002524:	e005      	b.n	8002532 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002526:	2308      	movs	r3, #8
 8002528:	617b      	str	r3, [r7, #20]
        break;
 800252a:	e002      	b.n	8002532 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800252c:	2304      	movs	r3, #4
 800252e:	617b      	str	r3, [r7, #20]
        break;
 8002530:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002532:	f7fe ff89 	bl	8001448 <HAL_GetTick>
 8002536:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002538:	e01b      	b.n	8002572 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800253a:	f7fe ff85 	bl	8001448 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b05      	cmp	r3, #5
 8002546:	d914      	bls.n	8002572 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00d      	beq.n	8002572 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	f043 0210 	orr.w	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e007      	b.n	8002582 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1dc      	bne.n	800253a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	000cdbff 	.word	0x000cdbff

08002590 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff f947 	bl	8001830 <LL_ADC_IsEnabled>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d161      	bne.n	800266c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	4b32      	ldr	r3, [pc, #200]	; (8002678 <ADC_Enable+0xe8>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ba:	f043 0210 	orr.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e04d      	b.n	800266e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff f902 	bl	80017e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025dc:	f7fe ff34 	bl	8001448 <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025e2:	4826      	ldr	r0, [pc, #152]	; (800267c <ADC_Enable+0xec>)
 80025e4:	f7ff f8a0 	bl	8001728 <LL_ADC_GetMultimode>
 80025e8:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a24      	ldr	r2, [pc, #144]	; (8002680 <ADC_Enable+0xf0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d002      	beq.n	80025fa <ADC_Enable+0x6a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	e000      	b.n	80025fc <ADC_Enable+0x6c>
 80025fa:	4b22      	ldr	r3, [pc, #136]	; (8002684 <ADC_Enable+0xf4>)
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	4293      	cmp	r3, r2
 8002602:	d02c      	beq.n	800265e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d130      	bne.n	800266c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800260a:	e028      	b.n	800265e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff f90d 	bl	8001830 <LL_ADC_IsEnabled>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d104      	bne.n	8002626 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff f8dd 	bl	80017e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002626:	f7fe ff0f 	bl	8001448 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d914      	bls.n	800265e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b01      	cmp	r3, #1
 8002640:	d00d      	beq.n	800265e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e007      	b.n	800266e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b01      	cmp	r3, #1
 800266a:	d1cf      	bne.n	800260c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	8000003f 	.word	0x8000003f
 800267c:	40022300 	.word	0x40022300
 8002680:	40022100 	.word	0x40022100
 8002684:	40022000 	.word	0x40022000

08002688 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff f8de 	bl	8001856 <LL_ADC_IsDisableOngoing>
 800269a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff f8c5 	bl	8001830 <LL_ADC_IsEnabled>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d047      	beq.n	800273c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d144      	bne.n	800273c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 030d 	and.w	r3, r3, #13
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10c      	bne.n	80026da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff f89f 	bl	8001808 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2203      	movs	r2, #3
 80026d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026d2:	f7fe feb9 	bl	8001448 <HAL_GetTick>
 80026d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026d8:	e029      	b.n	800272e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026de:	f043 0210 	orr.w	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	f043 0201 	orr.w	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e023      	b.n	800273e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026f6:	f7fe fea7 	bl	8001448 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d914      	bls.n	800272e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f043 0210 	orr.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e007      	b.n	800273e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1dc      	bne.n	80026f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800275c:	2b00      	cmp	r3, #0
 800275e:	d14b      	bne.n	80027f8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d021      	beq.n	80027be <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe ff30 	bl	80015e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d032      	beq.n	80027f0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d12b      	bne.n	80027f0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d11f      	bne.n	80027f0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	f043 0201 	orr.w	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	655a      	str	r2, [r3, #84]	; 0x54
 80027bc:	e018      	b.n	80027f0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d111      	bne.n	80027f0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f7fe f87b 	bl	80008ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027f6:	e00e      	b.n	8002816 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7ff fb17 	bl	8001e38 <HAL_ADC_ErrorCallback>
}
 800280a:	e004      	b.n	8002816 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff faf9 	bl	8001e24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002858:	f043 0204 	orr.w	r2, r3, #4
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7ff fae9 	bl	8001e38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002878:	4b5f      	ldr	r3, [pc, #380]	; (80029f8 <ADC_ConfigureBoostMode+0x188>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01c      	beq.n	80028be <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002884:	f003 f90e 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8002888:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002892:	d010      	beq.n	80028b6 <ADC_ConfigureBoostMode+0x46>
 8002894:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002898:	d871      	bhi.n	800297e <ADC_ConfigureBoostMode+0x10e>
 800289a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289e:	d002      	beq.n	80028a6 <ADC_ConfigureBoostMode+0x36>
 80028a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028a4:	d16b      	bne.n	800297e <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b2:	60fb      	str	r3, [r7, #12]
        break;
 80028b4:	e066      	b.n	8002984 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	089b      	lsrs	r3, r3, #2
 80028ba:	60fb      	str	r3, [r7, #12]
        break;
 80028bc:	e062      	b.n	8002984 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80028be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028c2:	f004 f857 	bl	8006974 <HAL_RCCEx_GetPeriphCLKFreq>
 80028c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028d0:	d051      	beq.n	8002976 <ADC_ConfigureBoostMode+0x106>
 80028d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028d6:	d854      	bhi.n	8002982 <ADC_ConfigureBoostMode+0x112>
 80028d8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028dc:	d047      	beq.n	800296e <ADC_ConfigureBoostMode+0xfe>
 80028de:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028e2:	d84e      	bhi.n	8002982 <ADC_ConfigureBoostMode+0x112>
 80028e4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028e8:	d03d      	beq.n	8002966 <ADC_ConfigureBoostMode+0xf6>
 80028ea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028ee:	d848      	bhi.n	8002982 <ADC_ConfigureBoostMode+0x112>
 80028f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028f4:	d033      	beq.n	800295e <ADC_ConfigureBoostMode+0xee>
 80028f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028fa:	d842      	bhi.n	8002982 <ADC_ConfigureBoostMode+0x112>
 80028fc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002900:	d029      	beq.n	8002956 <ADC_ConfigureBoostMode+0xe6>
 8002902:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002906:	d83c      	bhi.n	8002982 <ADC_ConfigureBoostMode+0x112>
 8002908:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800290c:	d01a      	beq.n	8002944 <ADC_ConfigureBoostMode+0xd4>
 800290e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002912:	d836      	bhi.n	8002982 <ADC_ConfigureBoostMode+0x112>
 8002914:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002918:	d014      	beq.n	8002944 <ADC_ConfigureBoostMode+0xd4>
 800291a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800291e:	d830      	bhi.n	8002982 <ADC_ConfigureBoostMode+0x112>
 8002920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002924:	d00e      	beq.n	8002944 <ADC_ConfigureBoostMode+0xd4>
 8002926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800292a:	d82a      	bhi.n	8002982 <ADC_ConfigureBoostMode+0x112>
 800292c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002930:	d008      	beq.n	8002944 <ADC_ConfigureBoostMode+0xd4>
 8002932:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002936:	d824      	bhi.n	8002982 <ADC_ConfigureBoostMode+0x112>
 8002938:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800293c:	d002      	beq.n	8002944 <ADC_ConfigureBoostMode+0xd4>
 800293e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002942:	d11e      	bne.n	8002982 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	0c9b      	lsrs	r3, r3, #18
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	60fb      	str	r3, [r7, #12]
        break;
 8002954:	e016      	b.n	8002984 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	60fb      	str	r3, [r7, #12]
        break;
 800295c:	e012      	b.n	8002984 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	60fb      	str	r3, [r7, #12]
        break;
 8002964:	e00e      	b.n	8002984 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	099b      	lsrs	r3, r3, #6
 800296a:	60fb      	str	r3, [r7, #12]
        break;
 800296c:	e00a      	b.n	8002984 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	09db      	lsrs	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]
        break;
 8002974:	e006      	b.n	8002984 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	60fb      	str	r3, [r7, #12]
        break;
 800297c:	e002      	b.n	8002984 <ADC_ConfigureBoostMode+0x114>
        break;
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002982:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <ADC_ConfigureBoostMode+0x18c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d808      	bhi.n	80029a4 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029a0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80029a2:	e025      	b.n	80029f0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <ADC_ConfigureBoostMode+0x190>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d80a      	bhi.n	80029c2 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029be:	609a      	str	r2, [r3, #8]
}
 80029c0:	e016      	b.n	80029f0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4a0f      	ldr	r2, [pc, #60]	; (8002a04 <ADC_ConfigureBoostMode+0x194>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d80a      	bhi.n	80029e0 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029dc:	609a      	str	r2, [r3, #8]
}
 80029de:	e007      	b.n	80029f0 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80029ee:	609a      	str	r2, [r3, #8]
}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40022300 	.word	0x40022300
 80029fc:	005f5e10 	.word	0x005f5e10
 8002a00:	00bebc20 	.word	0x00bebc20
 8002a04:	017d7840 	.word	0x017d7840

08002a08 <LL_ADC_StartCalibration>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <LL_ADC_StartCalibration+0x38>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	609a      	str	r2, [r3, #8]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	3ffeffc0 	.word	0x3ffeffc0

08002a44 <LL_ADC_IsCalibrationOnGoing>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a58:	d101      	bne.n	8002a5e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_ADCEx_Calibration_Start+0x1e>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e04c      	b.n	8002b24 <HAL_ADCEx_Calibration_Start+0xb8>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff fdf8 	bl	8002688 <ADC_Disable>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d135      	bne.n	8002b0e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aa6:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <HAL_ADCEx_Calibration_Start+0xc0>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	f043 0202 	orr.w	r2, r3, #2
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ffa4 	bl	8002a08 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ac0:	e014      	b.n	8002aec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d30d      	bcc.n	8002aec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad4:	f023 0312 	bic.w	r3, r3, #18
 8002ad8:	f043 0210 	orr.w	r2, r3, #16
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e01b      	b.n	8002b24 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ffa7 	bl	8002a44 <LL_ADC_IsCalibrationOnGoing>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e2      	bne.n	8002ac2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	f023 0303 	bic.w	r3, r3, #3
 8002b04:	f043 0201 	orr.w	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54
 8002b0c:	e005      	b.n	8002b1a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	f043 0210 	orr.w	r2, r3, #16
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	ffffeefd 	.word	0xffffeefd
 8002b30:	25c3f800 	.word	0x25c3f800

08002b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <__NVIC_SetPriorityGrouping+0x40>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b50:	4013      	ands	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <__NVIC_SetPriorityGrouping+0x44>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b62:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <__NVIC_SetPriorityGrouping+0x40>)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	60d3      	str	r3, [r2, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00
 8002b78:	05fa0000 	.word	0x05fa0000

08002b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <__NVIC_GetPriorityGrouping+0x18>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	0a1b      	lsrs	r3, r3, #8
 8002b86:	f003 0307 	and.w	r3, r3, #7
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	db0b      	blt.n	8002bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	f003 021f 	and.w	r2, r3, #31
 8002bb0:	4907      	ldr	r1, [pc, #28]	; (8002bd0 <__NVIC_EnableIRQ+0x38>)
 8002bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	2001      	movs	r0, #1
 8002bba:	fa00 f202 	lsl.w	r2, r0, r2
 8002bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	e000e100 	.word	0xe000e100

08002bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	6039      	str	r1, [r7, #0]
 8002bde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002be0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	db0a      	blt.n	8002bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	490c      	ldr	r1, [pc, #48]	; (8002c20 <__NVIC_SetPriority+0x4c>)
 8002bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf2:	0112      	lsls	r2, r2, #4
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bfc:	e00a      	b.n	8002c14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4908      	ldr	r1, [pc, #32]	; (8002c24 <__NVIC_SetPriority+0x50>)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	3b04      	subs	r3, #4
 8002c0c:	0112      	lsls	r2, r2, #4
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	440b      	add	r3, r1
 8002c12:	761a      	strb	r2, [r3, #24]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000e100 	.word	0xe000e100
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f1c3 0307 	rsb	r3, r3, #7
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	bf28      	it	cs
 8002c46:	2304      	movcs	r3, #4
 8002c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d902      	bls.n	8002c58 <NVIC_EncodePriority+0x30>
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3b03      	subs	r3, #3
 8002c56:	e000      	b.n	8002c5a <NVIC_EncodePriority+0x32>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43da      	mvns	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c70:	f04f 31ff 	mov.w	r1, #4294967295
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	43d9      	mvns	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	4313      	orrs	r3, r2
         );
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3724      	adds	r7, #36	; 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca0:	d301      	bcc.n	8002ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e00f      	b.n	8002cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <SysTick_Config+0x40>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cae:	210f      	movs	r1, #15
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	f7ff ff8e 	bl	8002bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <SysTick_Config+0x40>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cbe:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <SysTick_Config+0x40>)
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	e000e010 	.word	0xe000e010

08002cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff ff29 	bl	8002b34 <__NVIC_SetPriorityGrouping>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf8:	f7ff ff40 	bl	8002b7c <__NVIC_GetPriorityGrouping>
 8002cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff90 	bl	8002c28 <NVIC_EncodePriority>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff5f 	bl	8002bd4 <__NVIC_SetPriority>
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	4603      	mov	r3, r0
 8002d26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff33 	bl	8002b98 <__NVIC_EnableIRQ>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ffa4 	bl	8002c90 <SysTick_Config>
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d5c:	f7fe fb74 	bl	8001448 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e37f      	b.n	800346c <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a66      	ldr	r2, [pc, #408]	; (8002f0c <HAL_DMA_Init+0x1b8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d04a      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a65      	ldr	r2, [pc, #404]	; (8002f10 <HAL_DMA_Init+0x1bc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d045      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a63      	ldr	r2, [pc, #396]	; (8002f14 <HAL_DMA_Init+0x1c0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d040      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a62      	ldr	r2, [pc, #392]	; (8002f18 <HAL_DMA_Init+0x1c4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d03b      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a60      	ldr	r2, [pc, #384]	; (8002f1c <HAL_DMA_Init+0x1c8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d036      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5f      	ldr	r2, [pc, #380]	; (8002f20 <HAL_DMA_Init+0x1cc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d031      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a5d      	ldr	r2, [pc, #372]	; (8002f24 <HAL_DMA_Init+0x1d0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d02c      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a5c      	ldr	r2, [pc, #368]	; (8002f28 <HAL_DMA_Init+0x1d4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d027      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a5a      	ldr	r2, [pc, #360]	; (8002f2c <HAL_DMA_Init+0x1d8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d022      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a59      	ldr	r2, [pc, #356]	; (8002f30 <HAL_DMA_Init+0x1dc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d01d      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a57      	ldr	r2, [pc, #348]	; (8002f34 <HAL_DMA_Init+0x1e0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d018      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a56      	ldr	r2, [pc, #344]	; (8002f38 <HAL_DMA_Init+0x1e4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d013      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a54      	ldr	r2, [pc, #336]	; (8002f3c <HAL_DMA_Init+0x1e8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00e      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a53      	ldr	r2, [pc, #332]	; (8002f40 <HAL_DMA_Init+0x1ec>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d009      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a51      	ldr	r2, [pc, #324]	; (8002f44 <HAL_DMA_Init+0x1f0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d004      	beq.n	8002e0c <HAL_DMA_Init+0xb8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a50      	ldr	r2, [pc, #320]	; (8002f48 <HAL_DMA_Init+0x1f4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d101      	bne.n	8002e10 <HAL_DMA_Init+0xbc>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_DMA_Init+0xbe>
 8002e10:	2300      	movs	r3, #0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 813c 	beq.w	8003090 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a37      	ldr	r2, [pc, #220]	; (8002f0c <HAL_DMA_Init+0x1b8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d04a      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a36      	ldr	r2, [pc, #216]	; (8002f10 <HAL_DMA_Init+0x1bc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d045      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <HAL_DMA_Init+0x1c0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d040      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a33      	ldr	r2, [pc, #204]	; (8002f18 <HAL_DMA_Init+0x1c4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d03b      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a31      	ldr	r2, [pc, #196]	; (8002f1c <HAL_DMA_Init+0x1c8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d036      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a30      	ldr	r2, [pc, #192]	; (8002f20 <HAL_DMA_Init+0x1cc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d031      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a2e      	ldr	r2, [pc, #184]	; (8002f24 <HAL_DMA_Init+0x1d0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d02c      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2d      	ldr	r2, [pc, #180]	; (8002f28 <HAL_DMA_Init+0x1d4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d027      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2b      	ldr	r2, [pc, #172]	; (8002f2c <HAL_DMA_Init+0x1d8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d022      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <HAL_DMA_Init+0x1dc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d01d      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a28      	ldr	r2, [pc, #160]	; (8002f34 <HAL_DMA_Init+0x1e0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d018      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <HAL_DMA_Init+0x1e4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d013      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <HAL_DMA_Init+0x1e8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00e      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a24      	ldr	r2, [pc, #144]	; (8002f40 <HAL_DMA_Init+0x1ec>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d009      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <HAL_DMA_Init+0x1f0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_DMA_Init+0x174>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <HAL_DMA_Init+0x1f4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d108      	bne.n	8002eda <HAL_DMA_Init+0x186>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	e007      	b.n	8002eea <HAL_DMA_Init+0x196>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002eea:	e02f      	b.n	8002f4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eec:	f7fe faac 	bl	8001448 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d928      	bls.n	8002f4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2220      	movs	r2, #32
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2203      	movs	r2, #3
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e2af      	b.n	800346c <HAL_DMA_Init+0x718>
 8002f0c:	40020010 	.word	0x40020010
 8002f10:	40020028 	.word	0x40020028
 8002f14:	40020040 	.word	0x40020040
 8002f18:	40020058 	.word	0x40020058
 8002f1c:	40020070 	.word	0x40020070
 8002f20:	40020088 	.word	0x40020088
 8002f24:	400200a0 	.word	0x400200a0
 8002f28:	400200b8 	.word	0x400200b8
 8002f2c:	40020410 	.word	0x40020410
 8002f30:	40020428 	.word	0x40020428
 8002f34:	40020440 	.word	0x40020440
 8002f38:	40020458 	.word	0x40020458
 8002f3c:	40020470 	.word	0x40020470
 8002f40:	40020488 	.word	0x40020488
 8002f44:	400204a0 	.word	0x400204a0
 8002f48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1c8      	bne.n	8002eec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4b73      	ldr	r3, [pc, #460]	; (8003134 <HAL_DMA_Init+0x3e0>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d107      	bne.n	8002fb0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b28      	cmp	r3, #40	; 0x28
 8002fb6:	d903      	bls.n	8002fc0 <HAL_DMA_Init+0x26c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8002fbe:	d91f      	bls.n	8003000 <HAL_DMA_Init+0x2ac>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b3e      	cmp	r3, #62	; 0x3e
 8002fc6:	d903      	bls.n	8002fd0 <HAL_DMA_Init+0x27c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b42      	cmp	r3, #66	; 0x42
 8002fce:	d917      	bls.n	8003000 <HAL_DMA_Init+0x2ac>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b46      	cmp	r3, #70	; 0x46
 8002fd6:	d903      	bls.n	8002fe0 <HAL_DMA_Init+0x28c>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b48      	cmp	r3, #72	; 0x48
 8002fde:	d90f      	bls.n	8003000 <HAL_DMA_Init+0x2ac>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b4e      	cmp	r3, #78	; 0x4e
 8002fe6:	d903      	bls.n	8002ff0 <HAL_DMA_Init+0x29c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b52      	cmp	r3, #82	; 0x52
 8002fee:	d907      	bls.n	8003000 <HAL_DMA_Init+0x2ac>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b73      	cmp	r3, #115	; 0x73
 8002ff6:	d905      	bls.n	8003004 <HAL_DMA_Init+0x2b0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b77      	cmp	r3, #119	; 0x77
 8002ffe:	d801      	bhi.n	8003004 <HAL_DMA_Init+0x2b0>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <HAL_DMA_Init+0x2b2>
 8003004:	2300      	movs	r3, #0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003010:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f023 0307 	bic.w	r3, r3, #7
 8003028:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	2b04      	cmp	r3, #4
 800303a:	d117      	bne.n	800306c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00e      	beq.n	800306c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f001 fa2e 	bl	80044b0 <DMA_CheckFifoParam>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2240      	movs	r2, #64	; 0x40
 800305e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e1ff      	b.n	800346c <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f001 f969 	bl	800434c <DMA_CalcBaseAndBitshift>
 800307a:	4603      	mov	r3, r0
 800307c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	223f      	movs	r2, #63	; 0x3f
 8003088:	409a      	lsls	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	e0fe      	b.n	800328e <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a28      	ldr	r2, [pc, #160]	; (8003138 <HAL_DMA_Init+0x3e4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d04a      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a27      	ldr	r2, [pc, #156]	; (800313c <HAL_DMA_Init+0x3e8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d045      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a25      	ldr	r2, [pc, #148]	; (8003140 <HAL_DMA_Init+0x3ec>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d040      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a24      	ldr	r2, [pc, #144]	; (8003144 <HAL_DMA_Init+0x3f0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d03b      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a22      	ldr	r2, [pc, #136]	; (8003148 <HAL_DMA_Init+0x3f4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d036      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a21      	ldr	r2, [pc, #132]	; (800314c <HAL_DMA_Init+0x3f8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d031      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1f      	ldr	r2, [pc, #124]	; (8003150 <HAL_DMA_Init+0x3fc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d02c      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <HAL_DMA_Init+0x400>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d027      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1c      	ldr	r2, [pc, #112]	; (8003158 <HAL_DMA_Init+0x404>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d022      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1b      	ldr	r2, [pc, #108]	; (800315c <HAL_DMA_Init+0x408>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d01d      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <HAL_DMA_Init+0x40c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d018      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_DMA_Init+0x410>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d013      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a16      	ldr	r2, [pc, #88]	; (8003168 <HAL_DMA_Init+0x414>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00e      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a15      	ldr	r2, [pc, #84]	; (800316c <HAL_DMA_Init+0x418>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d009      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a13      	ldr	r2, [pc, #76]	; (8003170 <HAL_DMA_Init+0x41c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_DMA_Init+0x3dc>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <HAL_DMA_Init+0x420>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d123      	bne.n	8003178 <HAL_DMA_Init+0x424>
 8003130:	2301      	movs	r3, #1
 8003132:	e022      	b.n	800317a <HAL_DMA_Init+0x426>
 8003134:	fe10803f 	.word	0xfe10803f
 8003138:	48022c08 	.word	0x48022c08
 800313c:	48022c1c 	.word	0x48022c1c
 8003140:	48022c30 	.word	0x48022c30
 8003144:	48022c44 	.word	0x48022c44
 8003148:	48022c58 	.word	0x48022c58
 800314c:	48022c6c 	.word	0x48022c6c
 8003150:	48022c80 	.word	0x48022c80
 8003154:	48022c94 	.word	0x48022c94
 8003158:	58025408 	.word	0x58025408
 800315c:	5802541c 	.word	0x5802541c
 8003160:	58025430 	.word	0x58025430
 8003164:	58025444 	.word	0x58025444
 8003168:	58025458 	.word	0x58025458
 800316c:	5802546c 	.word	0x5802546c
 8003170:	58025480 	.word	0x58025480
 8003174:	58025494 	.word	0x58025494
 8003178:	2300      	movs	r3, #0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d07e      	beq.n	800327c <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a80      	ldr	r2, [pc, #512]	; (8003384 <HAL_DMA_Init+0x630>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d021      	beq.n	80031cc <HAL_DMA_Init+0x478>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a7e      	ldr	r2, [pc, #504]	; (8003388 <HAL_DMA_Init+0x634>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01c      	beq.n	80031cc <HAL_DMA_Init+0x478>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a7d      	ldr	r2, [pc, #500]	; (800338c <HAL_DMA_Init+0x638>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d017      	beq.n	80031cc <HAL_DMA_Init+0x478>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a7b      	ldr	r2, [pc, #492]	; (8003390 <HAL_DMA_Init+0x63c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d012      	beq.n	80031cc <HAL_DMA_Init+0x478>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a7a      	ldr	r2, [pc, #488]	; (8003394 <HAL_DMA_Init+0x640>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00d      	beq.n	80031cc <HAL_DMA_Init+0x478>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a78      	ldr	r2, [pc, #480]	; (8003398 <HAL_DMA_Init+0x644>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d008      	beq.n	80031cc <HAL_DMA_Init+0x478>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a77      	ldr	r2, [pc, #476]	; (800339c <HAL_DMA_Init+0x648>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d003      	beq.n	80031cc <HAL_DMA_Init+0x478>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a75      	ldr	r2, [pc, #468]	; (80033a0 <HAL_DMA_Init+0x64c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4b6e      	ldr	r3, [pc, #440]	; (80033a4 <HAL_DMA_Init+0x650>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d008      	beq.n	8003208 <HAL_DMA_Init+0x4b4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b80      	cmp	r3, #128	; 0x80
 80031fc:	d102      	bne.n	8003204 <HAL_DMA_Init+0x4b0>
 80031fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003202:	e002      	b.n	800320a <HAL_DMA_Init+0x4b6>
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <HAL_DMA_Init+0x4b6>
 8003208:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68d2      	ldr	r2, [r2, #12]
 800320e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003210:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003218:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003220:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003228:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003230:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003238:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	4b56      	ldr	r3, [pc, #344]	; (80033a8 <HAL_DMA_Init+0x654>)
 8003250:	4413      	add	r3, r2
 8003252:	4a56      	ldr	r2, [pc, #344]	; (80033ac <HAL_DMA_Init+0x658>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	009a      	lsls	r2, r3, #2
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f001 f873 	bl	800434c <DMA_CalcBaseAndBitshift>
 8003266:	4603      	mov	r3, r0
 8003268:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	2201      	movs	r2, #1
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	e008      	b.n	800328e <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2203      	movs	r2, #3
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0ee      	b.n	800346c <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a47      	ldr	r2, [pc, #284]	; (80033b0 <HAL_DMA_Init+0x65c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d072      	beq.n	800337e <HAL_DMA_Init+0x62a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a45      	ldr	r2, [pc, #276]	; (80033b4 <HAL_DMA_Init+0x660>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d06d      	beq.n	800337e <HAL_DMA_Init+0x62a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a44      	ldr	r2, [pc, #272]	; (80033b8 <HAL_DMA_Init+0x664>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d068      	beq.n	800337e <HAL_DMA_Init+0x62a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a42      	ldr	r2, [pc, #264]	; (80033bc <HAL_DMA_Init+0x668>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d063      	beq.n	800337e <HAL_DMA_Init+0x62a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a41      	ldr	r2, [pc, #260]	; (80033c0 <HAL_DMA_Init+0x66c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d05e      	beq.n	800337e <HAL_DMA_Init+0x62a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a3f      	ldr	r2, [pc, #252]	; (80033c4 <HAL_DMA_Init+0x670>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d059      	beq.n	800337e <HAL_DMA_Init+0x62a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a3e      	ldr	r2, [pc, #248]	; (80033c8 <HAL_DMA_Init+0x674>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d054      	beq.n	800337e <HAL_DMA_Init+0x62a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a3c      	ldr	r2, [pc, #240]	; (80033cc <HAL_DMA_Init+0x678>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d04f      	beq.n	800337e <HAL_DMA_Init+0x62a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a3b      	ldr	r2, [pc, #236]	; (80033d0 <HAL_DMA_Init+0x67c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d04a      	beq.n	800337e <HAL_DMA_Init+0x62a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a39      	ldr	r2, [pc, #228]	; (80033d4 <HAL_DMA_Init+0x680>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d045      	beq.n	800337e <HAL_DMA_Init+0x62a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a38      	ldr	r2, [pc, #224]	; (80033d8 <HAL_DMA_Init+0x684>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d040      	beq.n	800337e <HAL_DMA_Init+0x62a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a36      	ldr	r2, [pc, #216]	; (80033dc <HAL_DMA_Init+0x688>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d03b      	beq.n	800337e <HAL_DMA_Init+0x62a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a35      	ldr	r2, [pc, #212]	; (80033e0 <HAL_DMA_Init+0x68c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d036      	beq.n	800337e <HAL_DMA_Init+0x62a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a33      	ldr	r2, [pc, #204]	; (80033e4 <HAL_DMA_Init+0x690>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d031      	beq.n	800337e <HAL_DMA_Init+0x62a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a32      	ldr	r2, [pc, #200]	; (80033e8 <HAL_DMA_Init+0x694>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d02c      	beq.n	800337e <HAL_DMA_Init+0x62a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a30      	ldr	r2, [pc, #192]	; (80033ec <HAL_DMA_Init+0x698>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d027      	beq.n	800337e <HAL_DMA_Init+0x62a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a14      	ldr	r2, [pc, #80]	; (8003384 <HAL_DMA_Init+0x630>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <HAL_DMA_Init+0x62a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a12      	ldr	r2, [pc, #72]	; (8003388 <HAL_DMA_Init+0x634>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01d      	beq.n	800337e <HAL_DMA_Init+0x62a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a11      	ldr	r2, [pc, #68]	; (800338c <HAL_DMA_Init+0x638>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d018      	beq.n	800337e <HAL_DMA_Init+0x62a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <HAL_DMA_Init+0x63c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_DMA_Init+0x62a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a0e      	ldr	r2, [pc, #56]	; (8003394 <HAL_DMA_Init+0x640>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_DMA_Init+0x62a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <HAL_DMA_Init+0x644>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_DMA_Init+0x62a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a0b      	ldr	r2, [pc, #44]	; (800339c <HAL_DMA_Init+0x648>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_DMA_Init+0x62a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_DMA_Init+0x64c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d138      	bne.n	80033f0 <HAL_DMA_Init+0x69c>
 800337e:	2301      	movs	r3, #1
 8003380:	e037      	b.n	80033f2 <HAL_DMA_Init+0x69e>
 8003382:	bf00      	nop
 8003384:	58025408 	.word	0x58025408
 8003388:	5802541c 	.word	0x5802541c
 800338c:	58025430 	.word	0x58025430
 8003390:	58025444 	.word	0x58025444
 8003394:	58025458 	.word	0x58025458
 8003398:	5802546c 	.word	0x5802546c
 800339c:	58025480 	.word	0x58025480
 80033a0:	58025494 	.word	0x58025494
 80033a4:	fffe000f 	.word	0xfffe000f
 80033a8:	a7fdabf8 	.word	0xa7fdabf8
 80033ac:	cccccccd 	.word	0xcccccccd
 80033b0:	40020010 	.word	0x40020010
 80033b4:	40020028 	.word	0x40020028
 80033b8:	40020040 	.word	0x40020040
 80033bc:	40020058 	.word	0x40020058
 80033c0:	40020070 	.word	0x40020070
 80033c4:	40020088 	.word	0x40020088
 80033c8:	400200a0 	.word	0x400200a0
 80033cc:	400200b8 	.word	0x400200b8
 80033d0:	40020410 	.word	0x40020410
 80033d4:	40020428 	.word	0x40020428
 80033d8:	40020440 	.word	0x40020440
 80033dc:	40020458 	.word	0x40020458
 80033e0:	40020470 	.word	0x40020470
 80033e4:	40020488 	.word	0x40020488
 80033e8:	400204a0 	.word	0x400204a0
 80033ec:	400204b8 	.word	0x400204b8
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d032      	beq.n	800345c <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f001 f8d6 	bl	80045a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b80      	cmp	r3, #128	; 0x80
 8003402:	d102      	bne.n	800340a <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800341e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d010      	beq.n	800344a <HAL_DMA_Init+0x6f6>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b08      	cmp	r3, #8
 800342e:	d80c      	bhi.n	800344a <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f001 f953 	bl	80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	e008      	b.n	800345c <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e226      	b.n	80038de <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_DMA_Start_IT+0x2a>
 800349a:	2302      	movs	r3, #2
 800349c:	e21f      	b.n	80038de <HAL_DMA_Start_IT+0x46a>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	f040 820a 	bne.w	80038c8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a68      	ldr	r2, [pc, #416]	; (8003668 <HAL_DMA_Start_IT+0x1f4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d04a      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a66      	ldr	r2, [pc, #408]	; (800366c <HAL_DMA_Start_IT+0x1f8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d045      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a65      	ldr	r2, [pc, #404]	; (8003670 <HAL_DMA_Start_IT+0x1fc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d040      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a63      	ldr	r2, [pc, #396]	; (8003674 <HAL_DMA_Start_IT+0x200>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d03b      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a62      	ldr	r2, [pc, #392]	; (8003678 <HAL_DMA_Start_IT+0x204>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d036      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a60      	ldr	r2, [pc, #384]	; (800367c <HAL_DMA_Start_IT+0x208>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d031      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a5f      	ldr	r2, [pc, #380]	; (8003680 <HAL_DMA_Start_IT+0x20c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d02c      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a5d      	ldr	r2, [pc, #372]	; (8003684 <HAL_DMA_Start_IT+0x210>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d027      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a5c      	ldr	r2, [pc, #368]	; (8003688 <HAL_DMA_Start_IT+0x214>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d022      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a5a      	ldr	r2, [pc, #360]	; (800368c <HAL_DMA_Start_IT+0x218>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01d      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a59      	ldr	r2, [pc, #356]	; (8003690 <HAL_DMA_Start_IT+0x21c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d018      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a57      	ldr	r2, [pc, #348]	; (8003694 <HAL_DMA_Start_IT+0x220>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a56      	ldr	r2, [pc, #344]	; (8003698 <HAL_DMA_Start_IT+0x224>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00e      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a54      	ldr	r2, [pc, #336]	; (800369c <HAL_DMA_Start_IT+0x228>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d009      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a53      	ldr	r2, [pc, #332]	; (80036a0 <HAL_DMA_Start_IT+0x22c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_DMA_Start_IT+0xee>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a51      	ldr	r2, [pc, #324]	; (80036a4 <HAL_DMA_Start_IT+0x230>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d108      	bne.n	8003574 <HAL_DMA_Start_IT+0x100>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	e007      	b.n	8003584 <HAL_DMA_Start_IT+0x110>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fcfa 	bl	8003f84 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a34      	ldr	r2, [pc, #208]	; (8003668 <HAL_DMA_Start_IT+0x1f4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d04a      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a33      	ldr	r2, [pc, #204]	; (800366c <HAL_DMA_Start_IT+0x1f8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d045      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a31      	ldr	r2, [pc, #196]	; (8003670 <HAL_DMA_Start_IT+0x1fc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d040      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a30      	ldr	r2, [pc, #192]	; (8003674 <HAL_DMA_Start_IT+0x200>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d03b      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2e      	ldr	r2, [pc, #184]	; (8003678 <HAL_DMA_Start_IT+0x204>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d036      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a2d      	ldr	r2, [pc, #180]	; (800367c <HAL_DMA_Start_IT+0x208>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d031      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <HAL_DMA_Start_IT+0x20c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d02c      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <HAL_DMA_Start_IT+0x210>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d027      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a28      	ldr	r2, [pc, #160]	; (8003688 <HAL_DMA_Start_IT+0x214>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d022      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a27      	ldr	r2, [pc, #156]	; (800368c <HAL_DMA_Start_IT+0x218>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d01d      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a25      	ldr	r2, [pc, #148]	; (8003690 <HAL_DMA_Start_IT+0x21c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d018      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a24      	ldr	r2, [pc, #144]	; (8003694 <HAL_DMA_Start_IT+0x220>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a22      	ldr	r2, [pc, #136]	; (8003698 <HAL_DMA_Start_IT+0x224>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00e      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a21      	ldr	r2, [pc, #132]	; (800369c <HAL_DMA_Start_IT+0x228>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d009      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1f      	ldr	r2, [pc, #124]	; (80036a0 <HAL_DMA_Start_IT+0x22c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <HAL_DMA_Start_IT+0x1bc>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1e      	ldr	r2, [pc, #120]	; (80036a4 <HAL_DMA_Start_IT+0x230>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_DMA_Start_IT+0x1c0>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <HAL_DMA_Start_IT+0x1c2>
 8003634:	2300      	movs	r3, #0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d036      	beq.n	80036a8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 021e 	bic.w	r2, r3, #30
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0216 	orr.w	r2, r2, #22
 800364c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d03e      	beq.n	80036d4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0208 	orr.w	r2, r2, #8
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e035      	b.n	80036d4 <HAL_DMA_Start_IT+0x260>
 8003668:	40020010 	.word	0x40020010
 800366c:	40020028 	.word	0x40020028
 8003670:	40020040 	.word	0x40020040
 8003674:	40020058 	.word	0x40020058
 8003678:	40020070 	.word	0x40020070
 800367c:	40020088 	.word	0x40020088
 8003680:	400200a0 	.word	0x400200a0
 8003684:	400200b8 	.word	0x400200b8
 8003688:	40020410 	.word	0x40020410
 800368c:	40020428 	.word	0x40020428
 8003690:	40020440 	.word	0x40020440
 8003694:	40020458 	.word	0x40020458
 8003698:	40020470 	.word	0x40020470
 800369c:	40020488 	.word	0x40020488
 80036a0:	400204a0 	.word	0x400204a0
 80036a4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 020e 	bic.w	r2, r3, #14
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 020a 	orr.w	r2, r2, #10
 80036ba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0204 	orr.w	r2, r2, #4
 80036d2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a83      	ldr	r2, [pc, #524]	; (80038e8 <HAL_DMA_Start_IT+0x474>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d072      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a82      	ldr	r2, [pc, #520]	; (80038ec <HAL_DMA_Start_IT+0x478>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d06d      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a80      	ldr	r2, [pc, #512]	; (80038f0 <HAL_DMA_Start_IT+0x47c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d068      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a7f      	ldr	r2, [pc, #508]	; (80038f4 <HAL_DMA_Start_IT+0x480>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d063      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a7d      	ldr	r2, [pc, #500]	; (80038f8 <HAL_DMA_Start_IT+0x484>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d05e      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a7c      	ldr	r2, [pc, #496]	; (80038fc <HAL_DMA_Start_IT+0x488>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d059      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a7a      	ldr	r2, [pc, #488]	; (8003900 <HAL_DMA_Start_IT+0x48c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d054      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a79      	ldr	r2, [pc, #484]	; (8003904 <HAL_DMA_Start_IT+0x490>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d04f      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a77      	ldr	r2, [pc, #476]	; (8003908 <HAL_DMA_Start_IT+0x494>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d04a      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a76      	ldr	r2, [pc, #472]	; (800390c <HAL_DMA_Start_IT+0x498>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d045      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a74      	ldr	r2, [pc, #464]	; (8003910 <HAL_DMA_Start_IT+0x49c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d040      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a73      	ldr	r2, [pc, #460]	; (8003914 <HAL_DMA_Start_IT+0x4a0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d03b      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a71      	ldr	r2, [pc, #452]	; (8003918 <HAL_DMA_Start_IT+0x4a4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d036      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a70      	ldr	r2, [pc, #448]	; (800391c <HAL_DMA_Start_IT+0x4a8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d031      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a6e      	ldr	r2, [pc, #440]	; (8003920 <HAL_DMA_Start_IT+0x4ac>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d02c      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a6d      	ldr	r2, [pc, #436]	; (8003924 <HAL_DMA_Start_IT+0x4b0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d027      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a6b      	ldr	r2, [pc, #428]	; (8003928 <HAL_DMA_Start_IT+0x4b4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d022      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a6a      	ldr	r2, [pc, #424]	; (800392c <HAL_DMA_Start_IT+0x4b8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d01d      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a68      	ldr	r2, [pc, #416]	; (8003930 <HAL_DMA_Start_IT+0x4bc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d018      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a67      	ldr	r2, [pc, #412]	; (8003934 <HAL_DMA_Start_IT+0x4c0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a65      	ldr	r2, [pc, #404]	; (8003938 <HAL_DMA_Start_IT+0x4c4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a64      	ldr	r2, [pc, #400]	; (800393c <HAL_DMA_Start_IT+0x4c8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a62      	ldr	r2, [pc, #392]	; (8003940 <HAL_DMA_Start_IT+0x4cc>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_DMA_Start_IT+0x350>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a61      	ldr	r2, [pc, #388]	; (8003944 <HAL_DMA_Start_IT+0x4d0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_DMA_Start_IT+0x354>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_DMA_Start_IT+0x356>
 80037c8:	2300      	movs	r3, #0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01a      	beq.n	8003804 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003802:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a37      	ldr	r2, [pc, #220]	; (80038e8 <HAL_DMA_Start_IT+0x474>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d04a      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a36      	ldr	r2, [pc, #216]	; (80038ec <HAL_DMA_Start_IT+0x478>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d045      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a34      	ldr	r2, [pc, #208]	; (80038f0 <HAL_DMA_Start_IT+0x47c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d040      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a33      	ldr	r2, [pc, #204]	; (80038f4 <HAL_DMA_Start_IT+0x480>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d03b      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a31      	ldr	r2, [pc, #196]	; (80038f8 <HAL_DMA_Start_IT+0x484>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d036      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a30      	ldr	r2, [pc, #192]	; (80038fc <HAL_DMA_Start_IT+0x488>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d031      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <HAL_DMA_Start_IT+0x48c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02c      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2d      	ldr	r2, [pc, #180]	; (8003904 <HAL_DMA_Start_IT+0x490>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d027      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2b      	ldr	r2, [pc, #172]	; (8003908 <HAL_DMA_Start_IT+0x494>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d022      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2a      	ldr	r2, [pc, #168]	; (800390c <HAL_DMA_Start_IT+0x498>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d01d      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a28      	ldr	r2, [pc, #160]	; (8003910 <HAL_DMA_Start_IT+0x49c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d018      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a27      	ldr	r2, [pc, #156]	; (8003914 <HAL_DMA_Start_IT+0x4a0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a25      	ldr	r2, [pc, #148]	; (8003918 <HAL_DMA_Start_IT+0x4a4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00e      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a24      	ldr	r2, [pc, #144]	; (800391c <HAL_DMA_Start_IT+0x4a8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d009      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a22      	ldr	r2, [pc, #136]	; (8003920 <HAL_DMA_Start_IT+0x4ac>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_DMA_Start_IT+0x430>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a21      	ldr	r2, [pc, #132]	; (8003924 <HAL_DMA_Start_IT+0x4b0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d108      	bne.n	80038b6 <HAL_DMA_Start_IT+0x442>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e012      	b.n	80038dc <HAL_DMA_Start_IT+0x468>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0201 	orr.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e009      	b.n	80038dc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40020010 	.word	0x40020010
 80038ec:	40020028 	.word	0x40020028
 80038f0:	40020040 	.word	0x40020040
 80038f4:	40020058 	.word	0x40020058
 80038f8:	40020070 	.word	0x40020070
 80038fc:	40020088 	.word	0x40020088
 8003900:	400200a0 	.word	0x400200a0
 8003904:	400200b8 	.word	0x400200b8
 8003908:	40020410 	.word	0x40020410
 800390c:	40020428 	.word	0x40020428
 8003910:	40020440 	.word	0x40020440
 8003914:	40020458 	.word	0x40020458
 8003918:	40020470 	.word	0x40020470
 800391c:	40020488 	.word	0x40020488
 8003920:	400204a0 	.word	0x400204a0
 8003924:	400204b8 	.word	0x400204b8
 8003928:	58025408 	.word	0x58025408
 800392c:	5802541c 	.word	0x5802541c
 8003930:	58025430 	.word	0x58025430
 8003934:	58025444 	.word	0x58025444
 8003938:	58025458 	.word	0x58025458
 800393c:	5802546c 	.word	0x5802546c
 8003940:	58025480 	.word	0x58025480
 8003944:	58025494 	.word	0x58025494

08003948 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003950:	f7fd fd7a 	bl	8001448 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e2dc      	b.n	8003f1a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d008      	beq.n	800397e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2280      	movs	r2, #128	; 0x80
 8003970:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e2cd      	b.n	8003f1a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a76      	ldr	r2, [pc, #472]	; (8003b5c <HAL_DMA_Abort+0x214>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d04a      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a74      	ldr	r2, [pc, #464]	; (8003b60 <HAL_DMA_Abort+0x218>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d045      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a73      	ldr	r2, [pc, #460]	; (8003b64 <HAL_DMA_Abort+0x21c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d040      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a71      	ldr	r2, [pc, #452]	; (8003b68 <HAL_DMA_Abort+0x220>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d03b      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a70      	ldr	r2, [pc, #448]	; (8003b6c <HAL_DMA_Abort+0x224>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d036      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a6e      	ldr	r2, [pc, #440]	; (8003b70 <HAL_DMA_Abort+0x228>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d031      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6d      	ldr	r2, [pc, #436]	; (8003b74 <HAL_DMA_Abort+0x22c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d02c      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a6b      	ldr	r2, [pc, #428]	; (8003b78 <HAL_DMA_Abort+0x230>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d027      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a6a      	ldr	r2, [pc, #424]	; (8003b7c <HAL_DMA_Abort+0x234>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d022      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a68      	ldr	r2, [pc, #416]	; (8003b80 <HAL_DMA_Abort+0x238>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01d      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a67      	ldr	r2, [pc, #412]	; (8003b84 <HAL_DMA_Abort+0x23c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d018      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a65      	ldr	r2, [pc, #404]	; (8003b88 <HAL_DMA_Abort+0x240>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a64      	ldr	r2, [pc, #400]	; (8003b8c <HAL_DMA_Abort+0x244>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00e      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a62      	ldr	r2, [pc, #392]	; (8003b90 <HAL_DMA_Abort+0x248>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a61      	ldr	r2, [pc, #388]	; (8003b94 <HAL_DMA_Abort+0x24c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_DMA_Abort+0xd6>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a5f      	ldr	r2, [pc, #380]	; (8003b98 <HAL_DMA_Abort+0x250>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d101      	bne.n	8003a22 <HAL_DMA_Abort+0xda>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_DMA_Abort+0xdc>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 021e 	bic.w	r2, r2, #30
 8003a36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a46:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e00a      	b.n	8003a66 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 020e 	bic.w	r2, r2, #14
 8003a5e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a3c      	ldr	r2, [pc, #240]	; (8003b5c <HAL_DMA_Abort+0x214>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d072      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a3a      	ldr	r2, [pc, #232]	; (8003b60 <HAL_DMA_Abort+0x218>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d06d      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a39      	ldr	r2, [pc, #228]	; (8003b64 <HAL_DMA_Abort+0x21c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d068      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a37      	ldr	r2, [pc, #220]	; (8003b68 <HAL_DMA_Abort+0x220>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d063      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a36      	ldr	r2, [pc, #216]	; (8003b6c <HAL_DMA_Abort+0x224>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d05e      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a34      	ldr	r2, [pc, #208]	; (8003b70 <HAL_DMA_Abort+0x228>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d059      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a33      	ldr	r2, [pc, #204]	; (8003b74 <HAL_DMA_Abort+0x22c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d054      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a31      	ldr	r2, [pc, #196]	; (8003b78 <HAL_DMA_Abort+0x230>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d04f      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a30      	ldr	r2, [pc, #192]	; (8003b7c <HAL_DMA_Abort+0x234>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d04a      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2e      	ldr	r2, [pc, #184]	; (8003b80 <HAL_DMA_Abort+0x238>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d045      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2d      	ldr	r2, [pc, #180]	; (8003b84 <HAL_DMA_Abort+0x23c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d040      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2b      	ldr	r2, [pc, #172]	; (8003b88 <HAL_DMA_Abort+0x240>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d03b      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2a      	ldr	r2, [pc, #168]	; (8003b8c <HAL_DMA_Abort+0x244>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d036      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a28      	ldr	r2, [pc, #160]	; (8003b90 <HAL_DMA_Abort+0x248>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d031      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a27      	ldr	r2, [pc, #156]	; (8003b94 <HAL_DMA_Abort+0x24c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d02c      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a25      	ldr	r2, [pc, #148]	; (8003b98 <HAL_DMA_Abort+0x250>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d027      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a24      	ldr	r2, [pc, #144]	; (8003b9c <HAL_DMA_Abort+0x254>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d022      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a22      	ldr	r2, [pc, #136]	; (8003ba0 <HAL_DMA_Abort+0x258>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01d      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a21      	ldr	r2, [pc, #132]	; (8003ba4 <HAL_DMA_Abort+0x25c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d018      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1f      	ldr	r2, [pc, #124]	; (8003ba8 <HAL_DMA_Abort+0x260>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <HAL_DMA_Abort+0x264>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00e      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1c      	ldr	r2, [pc, #112]	; (8003bb0 <HAL_DMA_Abort+0x268>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1b      	ldr	r2, [pc, #108]	; (8003bb4 <HAL_DMA_Abort+0x26c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_DMA_Abort+0x20e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a19      	ldr	r2, [pc, #100]	; (8003bb8 <HAL_DMA_Abort+0x270>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d132      	bne.n	8003bbc <HAL_DMA_Abort+0x274>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e031      	b.n	8003bbe <HAL_DMA_Abort+0x276>
 8003b5a:	bf00      	nop
 8003b5c:	40020010 	.word	0x40020010
 8003b60:	40020028 	.word	0x40020028
 8003b64:	40020040 	.word	0x40020040
 8003b68:	40020058 	.word	0x40020058
 8003b6c:	40020070 	.word	0x40020070
 8003b70:	40020088 	.word	0x40020088
 8003b74:	400200a0 	.word	0x400200a0
 8003b78:	400200b8 	.word	0x400200b8
 8003b7c:	40020410 	.word	0x40020410
 8003b80:	40020428 	.word	0x40020428
 8003b84:	40020440 	.word	0x40020440
 8003b88:	40020458 	.word	0x40020458
 8003b8c:	40020470 	.word	0x40020470
 8003b90:	40020488 	.word	0x40020488
 8003b94:	400204a0 	.word	0x400204a0
 8003b98:	400204b8 	.word	0x400204b8
 8003b9c:	58025408 	.word	0x58025408
 8003ba0:	5802541c 	.word	0x5802541c
 8003ba4:	58025430 	.word	0x58025430
 8003ba8:	58025444 	.word	0x58025444
 8003bac:	58025458 	.word	0x58025458
 8003bb0:	5802546c 	.word	0x5802546c
 8003bb4:	58025480 	.word	0x58025480
 8003bb8:	58025494 	.word	0x58025494
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a6d      	ldr	r2, [pc, #436]	; (8003d8c <HAL_DMA_Abort+0x444>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d04a      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a6b      	ldr	r2, [pc, #428]	; (8003d90 <HAL_DMA_Abort+0x448>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d045      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a6a      	ldr	r2, [pc, #424]	; (8003d94 <HAL_DMA_Abort+0x44c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d040      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a68      	ldr	r2, [pc, #416]	; (8003d98 <HAL_DMA_Abort+0x450>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d03b      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a67      	ldr	r2, [pc, #412]	; (8003d9c <HAL_DMA_Abort+0x454>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d036      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a65      	ldr	r2, [pc, #404]	; (8003da0 <HAL_DMA_Abort+0x458>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d031      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a64      	ldr	r2, [pc, #400]	; (8003da4 <HAL_DMA_Abort+0x45c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d02c      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a62      	ldr	r2, [pc, #392]	; (8003da8 <HAL_DMA_Abort+0x460>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d027      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a61      	ldr	r2, [pc, #388]	; (8003dac <HAL_DMA_Abort+0x464>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d022      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a5f      	ldr	r2, [pc, #380]	; (8003db0 <HAL_DMA_Abort+0x468>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01d      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a5e      	ldr	r2, [pc, #376]	; (8003db4 <HAL_DMA_Abort+0x46c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d018      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a5c      	ldr	r2, [pc, #368]	; (8003db8 <HAL_DMA_Abort+0x470>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a5b      	ldr	r2, [pc, #364]	; (8003dbc <HAL_DMA_Abort+0x474>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00e      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a59      	ldr	r2, [pc, #356]	; (8003dc0 <HAL_DMA_Abort+0x478>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d009      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a58      	ldr	r2, [pc, #352]	; (8003dc4 <HAL_DMA_Abort+0x47c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_DMA_Abort+0x32a>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a56      	ldr	r2, [pc, #344]	; (8003dc8 <HAL_DMA_Abort+0x480>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d108      	bne.n	8003c84 <HAL_DMA_Abort+0x33c>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	e007      	b.n	8003c94 <HAL_DMA_Abort+0x34c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c94:	e013      	b.n	8003cbe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c96:	f7fd fbd7 	bl	8001448 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b05      	cmp	r3, #5
 8003ca2:	d90c      	bls.n	8003cbe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2203      	movs	r2, #3
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e12d      	b.n	8003f1a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e5      	bne.n	8003c96 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2f      	ldr	r2, [pc, #188]	; (8003d8c <HAL_DMA_Abort+0x444>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d04a      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2d      	ldr	r2, [pc, #180]	; (8003d90 <HAL_DMA_Abort+0x448>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d045      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2c      	ldr	r2, [pc, #176]	; (8003d94 <HAL_DMA_Abort+0x44c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d040      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a2a      	ldr	r2, [pc, #168]	; (8003d98 <HAL_DMA_Abort+0x450>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d03b      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a29      	ldr	r2, [pc, #164]	; (8003d9c <HAL_DMA_Abort+0x454>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d036      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a27      	ldr	r2, [pc, #156]	; (8003da0 <HAL_DMA_Abort+0x458>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d031      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <HAL_DMA_Abort+0x45c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d02c      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a24      	ldr	r2, [pc, #144]	; (8003da8 <HAL_DMA_Abort+0x460>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d027      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a23      	ldr	r2, [pc, #140]	; (8003dac <HAL_DMA_Abort+0x464>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d022      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a21      	ldr	r2, [pc, #132]	; (8003db0 <HAL_DMA_Abort+0x468>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01d      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a20      	ldr	r2, [pc, #128]	; (8003db4 <HAL_DMA_Abort+0x46c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d018      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <HAL_DMA_Abort+0x470>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1d      	ldr	r2, [pc, #116]	; (8003dbc <HAL_DMA_Abort+0x474>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00e      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1b      	ldr	r2, [pc, #108]	; (8003dc0 <HAL_DMA_Abort+0x478>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1a      	ldr	r2, [pc, #104]	; (8003dc4 <HAL_DMA_Abort+0x47c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_DMA_Abort+0x422>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a18      	ldr	r2, [pc, #96]	; (8003dc8 <HAL_DMA_Abort+0x480>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d101      	bne.n	8003d6e <HAL_DMA_Abort+0x426>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_DMA_Abort+0x428>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d02b      	beq.n	8003dcc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	223f      	movs	r2, #63	; 0x3f
 8003d84:	409a      	lsls	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	e02a      	b.n	8003de2 <HAL_DMA_Abort+0x49a>
 8003d8c:	40020010 	.word	0x40020010
 8003d90:	40020028 	.word	0x40020028
 8003d94:	40020040 	.word	0x40020040
 8003d98:	40020058 	.word	0x40020058
 8003d9c:	40020070 	.word	0x40020070
 8003da0:	40020088 	.word	0x40020088
 8003da4:	400200a0 	.word	0x400200a0
 8003da8:	400200b8 	.word	0x400200b8
 8003dac:	40020410 	.word	0x40020410
 8003db0:	40020428 	.word	0x40020428
 8003db4:	40020440 	.word	0x40020440
 8003db8:	40020458 	.word	0x40020458
 8003dbc:	40020470 	.word	0x40020470
 8003dc0:	40020488 	.word	0x40020488
 8003dc4:	400204a0 	.word	0x400204a0
 8003dc8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2201      	movs	r2, #1
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a4f      	ldr	r2, [pc, #316]	; (8003f24 <HAL_DMA_Abort+0x5dc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d072      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a4d      	ldr	r2, [pc, #308]	; (8003f28 <HAL_DMA_Abort+0x5e0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d06d      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a4c      	ldr	r2, [pc, #304]	; (8003f2c <HAL_DMA_Abort+0x5e4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d068      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a4a      	ldr	r2, [pc, #296]	; (8003f30 <HAL_DMA_Abort+0x5e8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d063      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a49      	ldr	r2, [pc, #292]	; (8003f34 <HAL_DMA_Abort+0x5ec>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d05e      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a47      	ldr	r2, [pc, #284]	; (8003f38 <HAL_DMA_Abort+0x5f0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d059      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a46      	ldr	r2, [pc, #280]	; (8003f3c <HAL_DMA_Abort+0x5f4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d054      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a44      	ldr	r2, [pc, #272]	; (8003f40 <HAL_DMA_Abort+0x5f8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d04f      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a43      	ldr	r2, [pc, #268]	; (8003f44 <HAL_DMA_Abort+0x5fc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d04a      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a41      	ldr	r2, [pc, #260]	; (8003f48 <HAL_DMA_Abort+0x600>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d045      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a40      	ldr	r2, [pc, #256]	; (8003f4c <HAL_DMA_Abort+0x604>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d040      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a3e      	ldr	r2, [pc, #248]	; (8003f50 <HAL_DMA_Abort+0x608>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d03b      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a3d      	ldr	r2, [pc, #244]	; (8003f54 <HAL_DMA_Abort+0x60c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d036      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a3b      	ldr	r2, [pc, #236]	; (8003f58 <HAL_DMA_Abort+0x610>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d031      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a3a      	ldr	r2, [pc, #232]	; (8003f5c <HAL_DMA_Abort+0x614>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d02c      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a38      	ldr	r2, [pc, #224]	; (8003f60 <HAL_DMA_Abort+0x618>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d027      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a37      	ldr	r2, [pc, #220]	; (8003f64 <HAL_DMA_Abort+0x61c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d022      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a35      	ldr	r2, [pc, #212]	; (8003f68 <HAL_DMA_Abort+0x620>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01d      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a34      	ldr	r2, [pc, #208]	; (8003f6c <HAL_DMA_Abort+0x624>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d018      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a32      	ldr	r2, [pc, #200]	; (8003f70 <HAL_DMA_Abort+0x628>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a31      	ldr	r2, [pc, #196]	; (8003f74 <HAL_DMA_Abort+0x62c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2f      	ldr	r2, [pc, #188]	; (8003f78 <HAL_DMA_Abort+0x630>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a2e      	ldr	r2, [pc, #184]	; (8003f7c <HAL_DMA_Abort+0x634>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_DMA_Abort+0x58a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2c      	ldr	r2, [pc, #176]	; (8003f80 <HAL_DMA_Abort+0x638>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <HAL_DMA_Abort+0x58e>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_DMA_Abort+0x590>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d015      	beq.n	8003f08 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ee4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003efc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f06:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40020010 	.word	0x40020010
 8003f28:	40020028 	.word	0x40020028
 8003f2c:	40020040 	.word	0x40020040
 8003f30:	40020058 	.word	0x40020058
 8003f34:	40020070 	.word	0x40020070
 8003f38:	40020088 	.word	0x40020088
 8003f3c:	400200a0 	.word	0x400200a0
 8003f40:	400200b8 	.word	0x400200b8
 8003f44:	40020410 	.word	0x40020410
 8003f48:	40020428 	.word	0x40020428
 8003f4c:	40020440 	.word	0x40020440
 8003f50:	40020458 	.word	0x40020458
 8003f54:	40020470 	.word	0x40020470
 8003f58:	40020488 	.word	0x40020488
 8003f5c:	400204a0 	.word	0x400204a0
 8003f60:	400204b8 	.word	0x400204b8
 8003f64:	58025408 	.word	0x58025408
 8003f68:	5802541c 	.word	0x5802541c
 8003f6c:	58025430 	.word	0x58025430
 8003f70:	58025444 	.word	0x58025444
 8003f74:	58025458 	.word	0x58025458
 8003f78:	5802546c 	.word	0x5802546c
 8003f7c:	58025480 	.word	0x58025480
 8003f80:	58025494 	.word	0x58025494

08003f84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a84      	ldr	r2, [pc, #528]	; (80041b4 <DMA_SetConfig+0x230>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d072      	beq.n	800408e <DMA_SetConfig+0x10a>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a82      	ldr	r2, [pc, #520]	; (80041b8 <DMA_SetConfig+0x234>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d06d      	beq.n	800408e <DMA_SetConfig+0x10a>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a81      	ldr	r2, [pc, #516]	; (80041bc <DMA_SetConfig+0x238>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d068      	beq.n	800408e <DMA_SetConfig+0x10a>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a7f      	ldr	r2, [pc, #508]	; (80041c0 <DMA_SetConfig+0x23c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d063      	beq.n	800408e <DMA_SetConfig+0x10a>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a7e      	ldr	r2, [pc, #504]	; (80041c4 <DMA_SetConfig+0x240>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d05e      	beq.n	800408e <DMA_SetConfig+0x10a>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a7c      	ldr	r2, [pc, #496]	; (80041c8 <DMA_SetConfig+0x244>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d059      	beq.n	800408e <DMA_SetConfig+0x10a>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a7b      	ldr	r2, [pc, #492]	; (80041cc <DMA_SetConfig+0x248>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d054      	beq.n	800408e <DMA_SetConfig+0x10a>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a79      	ldr	r2, [pc, #484]	; (80041d0 <DMA_SetConfig+0x24c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d04f      	beq.n	800408e <DMA_SetConfig+0x10a>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a78      	ldr	r2, [pc, #480]	; (80041d4 <DMA_SetConfig+0x250>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d04a      	beq.n	800408e <DMA_SetConfig+0x10a>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a76      	ldr	r2, [pc, #472]	; (80041d8 <DMA_SetConfig+0x254>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d045      	beq.n	800408e <DMA_SetConfig+0x10a>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a75      	ldr	r2, [pc, #468]	; (80041dc <DMA_SetConfig+0x258>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d040      	beq.n	800408e <DMA_SetConfig+0x10a>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a73      	ldr	r2, [pc, #460]	; (80041e0 <DMA_SetConfig+0x25c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d03b      	beq.n	800408e <DMA_SetConfig+0x10a>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a72      	ldr	r2, [pc, #456]	; (80041e4 <DMA_SetConfig+0x260>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d036      	beq.n	800408e <DMA_SetConfig+0x10a>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a70      	ldr	r2, [pc, #448]	; (80041e8 <DMA_SetConfig+0x264>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d031      	beq.n	800408e <DMA_SetConfig+0x10a>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a6f      	ldr	r2, [pc, #444]	; (80041ec <DMA_SetConfig+0x268>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d02c      	beq.n	800408e <DMA_SetConfig+0x10a>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a6d      	ldr	r2, [pc, #436]	; (80041f0 <DMA_SetConfig+0x26c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d027      	beq.n	800408e <DMA_SetConfig+0x10a>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a6c      	ldr	r2, [pc, #432]	; (80041f4 <DMA_SetConfig+0x270>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d022      	beq.n	800408e <DMA_SetConfig+0x10a>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6a      	ldr	r2, [pc, #424]	; (80041f8 <DMA_SetConfig+0x274>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01d      	beq.n	800408e <DMA_SetConfig+0x10a>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a69      	ldr	r2, [pc, #420]	; (80041fc <DMA_SetConfig+0x278>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d018      	beq.n	800408e <DMA_SetConfig+0x10a>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a67      	ldr	r2, [pc, #412]	; (8004200 <DMA_SetConfig+0x27c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <DMA_SetConfig+0x10a>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a66      	ldr	r2, [pc, #408]	; (8004204 <DMA_SetConfig+0x280>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00e      	beq.n	800408e <DMA_SetConfig+0x10a>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a64      	ldr	r2, [pc, #400]	; (8004208 <DMA_SetConfig+0x284>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d009      	beq.n	800408e <DMA_SetConfig+0x10a>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a63      	ldr	r2, [pc, #396]	; (800420c <DMA_SetConfig+0x288>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d004      	beq.n	800408e <DMA_SetConfig+0x10a>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a61      	ldr	r2, [pc, #388]	; (8004210 <DMA_SetConfig+0x28c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <DMA_SetConfig+0x10e>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <DMA_SetConfig+0x110>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040a0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040b2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a3e      	ldr	r2, [pc, #248]	; (80041b4 <DMA_SetConfig+0x230>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d04a      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a3d      	ldr	r2, [pc, #244]	; (80041b8 <DMA_SetConfig+0x234>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d045      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a3b      	ldr	r2, [pc, #236]	; (80041bc <DMA_SetConfig+0x238>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d040      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a3a      	ldr	r2, [pc, #232]	; (80041c0 <DMA_SetConfig+0x23c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d03b      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a38      	ldr	r2, [pc, #224]	; (80041c4 <DMA_SetConfig+0x240>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d036      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a37      	ldr	r2, [pc, #220]	; (80041c8 <DMA_SetConfig+0x244>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d031      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a35      	ldr	r2, [pc, #212]	; (80041cc <DMA_SetConfig+0x248>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d02c      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a34      	ldr	r2, [pc, #208]	; (80041d0 <DMA_SetConfig+0x24c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d027      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a32      	ldr	r2, [pc, #200]	; (80041d4 <DMA_SetConfig+0x250>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d022      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a31      	ldr	r2, [pc, #196]	; (80041d8 <DMA_SetConfig+0x254>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d01d      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a2f      	ldr	r2, [pc, #188]	; (80041dc <DMA_SetConfig+0x258>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d018      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a2e      	ldr	r2, [pc, #184]	; (80041e0 <DMA_SetConfig+0x25c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d013      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a2c      	ldr	r2, [pc, #176]	; (80041e4 <DMA_SetConfig+0x260>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00e      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2b      	ldr	r2, [pc, #172]	; (80041e8 <DMA_SetConfig+0x264>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d009      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a29      	ldr	r2, [pc, #164]	; (80041ec <DMA_SetConfig+0x268>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d004      	beq.n	8004154 <DMA_SetConfig+0x1d0>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a28      	ldr	r2, [pc, #160]	; (80041f0 <DMA_SetConfig+0x26c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d101      	bne.n	8004158 <DMA_SetConfig+0x1d4>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <DMA_SetConfig+0x1d6>
 8004158:	2300      	movs	r3, #0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d05a      	beq.n	8004214 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004162:	f003 031f 	and.w	r3, r3, #31
 8004166:	223f      	movs	r2, #63	; 0x3f
 8004168:	409a      	lsls	r2, r3
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800417c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b40      	cmp	r3, #64	; 0x40
 800418c:	d108      	bne.n	80041a0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800419e:	e0af      	b.n	8004300 <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]
}
 80041b0:	e0a6      	b.n	8004300 <DMA_SetConfig+0x37c>
 80041b2:	bf00      	nop
 80041b4:	40020010 	.word	0x40020010
 80041b8:	40020028 	.word	0x40020028
 80041bc:	40020040 	.word	0x40020040
 80041c0:	40020058 	.word	0x40020058
 80041c4:	40020070 	.word	0x40020070
 80041c8:	40020088 	.word	0x40020088
 80041cc:	400200a0 	.word	0x400200a0
 80041d0:	400200b8 	.word	0x400200b8
 80041d4:	40020410 	.word	0x40020410
 80041d8:	40020428 	.word	0x40020428
 80041dc:	40020440 	.word	0x40020440
 80041e0:	40020458 	.word	0x40020458
 80041e4:	40020470 	.word	0x40020470
 80041e8:	40020488 	.word	0x40020488
 80041ec:	400204a0 	.word	0x400204a0
 80041f0:	400204b8 	.word	0x400204b8
 80041f4:	58025408 	.word	0x58025408
 80041f8:	5802541c 	.word	0x5802541c
 80041fc:	58025430 	.word	0x58025430
 8004200:	58025444 	.word	0x58025444
 8004204:	58025458 	.word	0x58025458
 8004208:	5802546c 	.word	0x5802546c
 800420c:	58025480 	.word	0x58025480
 8004210:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a3c      	ldr	r2, [pc, #240]	; (800430c <DMA_SetConfig+0x388>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d04a      	beq.n	80042b4 <DMA_SetConfig+0x330>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a3b      	ldr	r2, [pc, #236]	; (8004310 <DMA_SetConfig+0x38c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d045      	beq.n	80042b4 <DMA_SetConfig+0x330>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a39      	ldr	r2, [pc, #228]	; (8004314 <DMA_SetConfig+0x390>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d040      	beq.n	80042b4 <DMA_SetConfig+0x330>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a38      	ldr	r2, [pc, #224]	; (8004318 <DMA_SetConfig+0x394>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d03b      	beq.n	80042b4 <DMA_SetConfig+0x330>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a36      	ldr	r2, [pc, #216]	; (800431c <DMA_SetConfig+0x398>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d036      	beq.n	80042b4 <DMA_SetConfig+0x330>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a35      	ldr	r2, [pc, #212]	; (8004320 <DMA_SetConfig+0x39c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d031      	beq.n	80042b4 <DMA_SetConfig+0x330>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a33      	ldr	r2, [pc, #204]	; (8004324 <DMA_SetConfig+0x3a0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d02c      	beq.n	80042b4 <DMA_SetConfig+0x330>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a32      	ldr	r2, [pc, #200]	; (8004328 <DMA_SetConfig+0x3a4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d027      	beq.n	80042b4 <DMA_SetConfig+0x330>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a30      	ldr	r2, [pc, #192]	; (800432c <DMA_SetConfig+0x3a8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d022      	beq.n	80042b4 <DMA_SetConfig+0x330>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a2f      	ldr	r2, [pc, #188]	; (8004330 <DMA_SetConfig+0x3ac>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d01d      	beq.n	80042b4 <DMA_SetConfig+0x330>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a2d      	ldr	r2, [pc, #180]	; (8004334 <DMA_SetConfig+0x3b0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d018      	beq.n	80042b4 <DMA_SetConfig+0x330>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a2c      	ldr	r2, [pc, #176]	; (8004338 <DMA_SetConfig+0x3b4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d013      	beq.n	80042b4 <DMA_SetConfig+0x330>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2a      	ldr	r2, [pc, #168]	; (800433c <DMA_SetConfig+0x3b8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00e      	beq.n	80042b4 <DMA_SetConfig+0x330>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a29      	ldr	r2, [pc, #164]	; (8004340 <DMA_SetConfig+0x3bc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d009      	beq.n	80042b4 <DMA_SetConfig+0x330>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a27      	ldr	r2, [pc, #156]	; (8004344 <DMA_SetConfig+0x3c0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d004      	beq.n	80042b4 <DMA_SetConfig+0x330>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a26      	ldr	r2, [pc, #152]	; (8004348 <DMA_SetConfig+0x3c4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d101      	bne.n	80042b8 <DMA_SetConfig+0x334>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <DMA_SetConfig+0x336>
 80042b8:	2300      	movs	r3, #0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d020      	beq.n	8004300 <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2201      	movs	r2, #1
 80042c8:	409a      	lsls	r2, r3
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b40      	cmp	r3, #64	; 0x40
 80042dc:	d108      	bne.n	80042f0 <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	60da      	str	r2, [r3, #12]
}
 80042ee:	e007      	b.n	8004300 <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	60da      	str	r2, [r3, #12]
}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	48022c08 	.word	0x48022c08
 8004310:	48022c1c 	.word	0x48022c1c
 8004314:	48022c30 	.word	0x48022c30
 8004318:	48022c44 	.word	0x48022c44
 800431c:	48022c58 	.word	0x48022c58
 8004320:	48022c6c 	.word	0x48022c6c
 8004324:	48022c80 	.word	0x48022c80
 8004328:	48022c94 	.word	0x48022c94
 800432c:	58025408 	.word	0x58025408
 8004330:	5802541c 	.word	0x5802541c
 8004334:	58025430 	.word	0x58025430
 8004338:	58025444 	.word	0x58025444
 800433c:	58025458 	.word	0x58025458
 8004340:	5802546c 	.word	0x5802546c
 8004344:	58025480 	.word	0x58025480
 8004348:	58025494 	.word	0x58025494

0800434c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a42      	ldr	r2, [pc, #264]	; (8004464 <DMA_CalcBaseAndBitshift+0x118>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d04a      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a41      	ldr	r2, [pc, #260]	; (8004468 <DMA_CalcBaseAndBitshift+0x11c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d045      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a3f      	ldr	r2, [pc, #252]	; (800446c <DMA_CalcBaseAndBitshift+0x120>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d040      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a3e      	ldr	r2, [pc, #248]	; (8004470 <DMA_CalcBaseAndBitshift+0x124>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d03b      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a3c      	ldr	r2, [pc, #240]	; (8004474 <DMA_CalcBaseAndBitshift+0x128>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d036      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a3b      	ldr	r2, [pc, #236]	; (8004478 <DMA_CalcBaseAndBitshift+0x12c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d031      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a39      	ldr	r2, [pc, #228]	; (800447c <DMA_CalcBaseAndBitshift+0x130>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d02c      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a38      	ldr	r2, [pc, #224]	; (8004480 <DMA_CalcBaseAndBitshift+0x134>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d027      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a36      	ldr	r2, [pc, #216]	; (8004484 <DMA_CalcBaseAndBitshift+0x138>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d022      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a35      	ldr	r2, [pc, #212]	; (8004488 <DMA_CalcBaseAndBitshift+0x13c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d01d      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a33      	ldr	r2, [pc, #204]	; (800448c <DMA_CalcBaseAndBitshift+0x140>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d018      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a32      	ldr	r2, [pc, #200]	; (8004490 <DMA_CalcBaseAndBitshift+0x144>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d013      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a30      	ldr	r2, [pc, #192]	; (8004494 <DMA_CalcBaseAndBitshift+0x148>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00e      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <DMA_CalcBaseAndBitshift+0x14c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d009      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a2d      	ldr	r2, [pc, #180]	; (800449c <DMA_CalcBaseAndBitshift+0x150>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <DMA_CalcBaseAndBitshift+0xa8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a2c      	ldr	r2, [pc, #176]	; (80044a0 <DMA_CalcBaseAndBitshift+0x154>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d101      	bne.n	80043f8 <DMA_CalcBaseAndBitshift+0xac>
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <DMA_CalcBaseAndBitshift+0xae>
 80043f8:	2300      	movs	r3, #0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d024      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	3b10      	subs	r3, #16
 8004406:	4a27      	ldr	r2, [pc, #156]	; (80044a4 <DMA_CalcBaseAndBitshift+0x158>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	4a24      	ldr	r2, [pc, #144]	; (80044a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004418:	5cd3      	ldrb	r3, [r2, r3]
 800441a:	461a      	mov	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b03      	cmp	r3, #3
 8004424:	d908      	bls.n	8004438 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <DMA_CalcBaseAndBitshift+0x160>)
 800442e:	4013      	ands	r3, r2
 8004430:	1d1a      	adds	r2, r3, #4
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	659a      	str	r2, [r3, #88]	; 0x58
 8004436:	e00d      	b.n	8004454 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <DMA_CalcBaseAndBitshift+0x160>)
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6593      	str	r3, [r2, #88]	; 0x58
 8004446:	e005      	b.n	8004454 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40020010 	.word	0x40020010
 8004468:	40020028 	.word	0x40020028
 800446c:	40020040 	.word	0x40020040
 8004470:	40020058 	.word	0x40020058
 8004474:	40020070 	.word	0x40020070
 8004478:	40020088 	.word	0x40020088
 800447c:	400200a0 	.word	0x400200a0
 8004480:	400200b8 	.word	0x400200b8
 8004484:	40020410 	.word	0x40020410
 8004488:	40020428 	.word	0x40020428
 800448c:	40020440 	.word	0x40020440
 8004490:	40020458 	.word	0x40020458
 8004494:	40020470 	.word	0x40020470
 8004498:	40020488 	.word	0x40020488
 800449c:	400204a0 	.word	0x400204a0
 80044a0:	400204b8 	.word	0x400204b8
 80044a4:	aaaaaaab 	.word	0xaaaaaaab
 80044a8:	0800cb70 	.word	0x0800cb70
 80044ac:	fffffc00 	.word	0xfffffc00

080044b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d120      	bne.n	8004506 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d858      	bhi.n	800457e <DMA_CheckFifoParam+0xce>
 80044cc:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <DMA_CheckFifoParam+0x24>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	080044e5 	.word	0x080044e5
 80044d8:	080044f7 	.word	0x080044f7
 80044dc:	080044e5 	.word	0x080044e5
 80044e0:	0800457f 	.word	0x0800457f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d048      	beq.n	8004582 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044f4:	e045      	b.n	8004582 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044fe:	d142      	bne.n	8004586 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004504:	e03f      	b.n	8004586 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800450e:	d123      	bne.n	8004558 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	2b03      	cmp	r3, #3
 8004516:	d838      	bhi.n	800458a <DMA_CheckFifoParam+0xda>
 8004518:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <DMA_CheckFifoParam+0x70>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	08004531 	.word	0x08004531
 8004524:	08004537 	.word	0x08004537
 8004528:	08004531 	.word	0x08004531
 800452c:	08004549 	.word	0x08004549
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
        break;
 8004534:	e030      	b.n	8004598 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d025      	beq.n	800458e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004546:	e022      	b.n	800458e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004550:	d11f      	bne.n	8004592 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004556:	e01c      	b.n	8004592 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	2b02      	cmp	r3, #2
 800455e:	d902      	bls.n	8004566 <DMA_CheckFifoParam+0xb6>
 8004560:	2b03      	cmp	r3, #3
 8004562:	d003      	beq.n	800456c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004564:	e018      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
        break;
 800456a:	e015      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00e      	beq.n	8004596 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
    break;
 800457c:	e00b      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
        break;
 800457e:	bf00      	nop
 8004580:	e00a      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
        break;
 8004582:	bf00      	nop
 8004584:	e008      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
        break;
 8004586:	bf00      	nop
 8004588:	e006      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
        break;
 800458a:	bf00      	nop
 800458c:	e004      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
        break;
 800458e:	bf00      	nop
 8004590:	e002      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
        break;
 8004592:	bf00      	nop
 8004594:	e000      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
    break;
 8004596:	bf00      	nop
    }
  }

  return status;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop

080045a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a38      	ldr	r2, [pc, #224]	; (800469c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d022      	beq.n	8004606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a36      	ldr	r2, [pc, #216]	; (80046a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d01d      	beq.n	8004606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a35      	ldr	r2, [pc, #212]	; (80046a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d018      	beq.n	8004606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a33      	ldr	r2, [pc, #204]	; (80046a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a32      	ldr	r2, [pc, #200]	; (80046ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00e      	beq.n	8004606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a30      	ldr	r2, [pc, #192]	; (80046b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d009      	beq.n	8004606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a2f      	ldr	r2, [pc, #188]	; (80046b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a2d      	ldr	r2, [pc, #180]	; (80046b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d101      	bne.n	800460a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01a      	beq.n	8004646 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	3b08      	subs	r3, #8
 8004618:	4a28      	ldr	r2, [pc, #160]	; (80046bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800461a:	fba2 2303 	umull	r2, r3, r2, r3
 800461e:	091b      	lsrs	r3, r3, #4
 8004620:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	461a      	mov	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004634:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2201      	movs	r2, #1
 800463e:	409a      	lsls	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004644:	e024      	b.n	8004690 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	3b10      	subs	r3, #16
 800464e:	4a1e      	ldr	r2, [pc, #120]	; (80046c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4a1c      	ldr	r2, [pc, #112]	; (80046cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d806      	bhi.n	800466e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4a1b      	ldr	r2, [pc, #108]	; (80046d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d902      	bls.n	800466e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3308      	adds	r3, #8
 800466c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4b18      	ldr	r3, [pc, #96]	; (80046d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	461a      	mov	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004680:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	2201      	movs	r2, #1
 800468a:	409a      	lsls	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	58025408 	.word	0x58025408
 80046a0:	5802541c 	.word	0x5802541c
 80046a4:	58025430 	.word	0x58025430
 80046a8:	58025444 	.word	0x58025444
 80046ac:	58025458 	.word	0x58025458
 80046b0:	5802546c 	.word	0x5802546c
 80046b4:	58025480 	.word	0x58025480
 80046b8:	58025494 	.word	0x58025494
 80046bc:	cccccccd 	.word	0xcccccccd
 80046c0:	16009600 	.word	0x16009600
 80046c4:	58025880 	.word	0x58025880
 80046c8:	aaaaaaab 	.word	0xaaaaaaab
 80046cc:	400204b8 	.word	0x400204b8
 80046d0:	4002040f 	.word	0x4002040f
 80046d4:	10008200 	.word	0x10008200
 80046d8:	40020880 	.word	0x40020880

080046dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d04a      	beq.n	8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d847      	bhi.n	8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a25      	ldr	r2, [pc, #148]	; (8004794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d022      	beq.n	8004748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a24      	ldr	r2, [pc, #144]	; (8004798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d01d      	beq.n	8004748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a22      	ldr	r2, [pc, #136]	; (800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d018      	beq.n	8004748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a21      	ldr	r2, [pc, #132]	; (80047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d013      	beq.n	8004748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1f      	ldr	r2, [pc, #124]	; (80047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00e      	beq.n	8004748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1e      	ldr	r2, [pc, #120]	; (80047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d009      	beq.n	8004748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1c      	ldr	r2, [pc, #112]	; (80047ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d004      	beq.n	8004748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d101      	bne.n	800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800474c:	2300      	movs	r3, #0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	461a      	mov	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a15      	ldr	r2, [pc, #84]	; (80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004764:	671a      	str	r2, [r3, #112]	; 0x70
 8004766:	e009      	b.n	800477c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4b14      	ldr	r3, [pc, #80]	; (80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a11      	ldr	r2, [pc, #68]	; (80047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800477a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3b01      	subs	r3, #1
 8004780:	2201      	movs	r2, #1
 8004782:	409a      	lsls	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	58025408 	.word	0x58025408
 8004798:	5802541c 	.word	0x5802541c
 800479c:	58025430 	.word	0x58025430
 80047a0:	58025444 	.word	0x58025444
 80047a4:	58025458 	.word	0x58025458
 80047a8:	5802546c 	.word	0x5802546c
 80047ac:	58025480 	.word	0x58025480
 80047b0:	58025494 	.word	0x58025494
 80047b4:	1600963f 	.word	0x1600963f
 80047b8:	58025940 	.word	0x58025940
 80047bc:	1000823f 	.word	0x1000823f
 80047c0:	40020940 	.word	0x40020940

080047c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b089      	sub	sp, #36	; 0x24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047d2:	4b89      	ldr	r3, [pc, #548]	; (80049f8 <HAL_GPIO_Init+0x234>)
 80047d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047d6:	e194      	b.n	8004b02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	2101      	movs	r1, #1
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	fa01 f303 	lsl.w	r3, r1, r3
 80047e4:	4013      	ands	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8186 	beq.w	8004afc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d005      	beq.n	8004808 <HAL_GPIO_Init+0x44>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d130      	bne.n	800486a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	2203      	movs	r2, #3
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800483e:	2201      	movs	r2, #1
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	091b      	lsrs	r3, r3, #4
 8004854:	f003 0201 	and.w	r2, r3, #1
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	4313      	orrs	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	2b03      	cmp	r3, #3
 8004874:	d017      	beq.n	80048a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	2203      	movs	r2, #3
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d123      	bne.n	80048fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	08da      	lsrs	r2, r3, #3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3208      	adds	r2, #8
 80048ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	220f      	movs	r2, #15
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4013      	ands	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	08da      	lsrs	r2, r3, #3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3208      	adds	r2, #8
 80048f4:	69b9      	ldr	r1, [r7, #24]
 80048f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	2203      	movs	r2, #3
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43db      	mvns	r3, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4013      	ands	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f003 0203 	and.w	r2, r3, #3
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4313      	orrs	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 80e0 	beq.w	8004afc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800493c:	4b2f      	ldr	r3, [pc, #188]	; (80049fc <HAL_GPIO_Init+0x238>)
 800493e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004942:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <HAL_GPIO_Init+0x238>)
 8004944:	f043 0302 	orr.w	r3, r3, #2
 8004948:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800494c:	4b2b      	ldr	r3, [pc, #172]	; (80049fc <HAL_GPIO_Init+0x238>)
 800494e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800495a:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <HAL_GPIO_Init+0x23c>)
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	089b      	lsrs	r3, r3, #2
 8004960:	3302      	adds	r3, #2
 8004962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	220f      	movs	r2, #15
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4013      	ands	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a20      	ldr	r2, [pc, #128]	; (8004a04 <HAL_GPIO_Init+0x240>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d052      	beq.n	8004a2c <HAL_GPIO_Init+0x268>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <HAL_GPIO_Init+0x244>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d031      	beq.n	80049f2 <HAL_GPIO_Init+0x22e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a1e      	ldr	r2, [pc, #120]	; (8004a0c <HAL_GPIO_Init+0x248>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d02b      	beq.n	80049ee <HAL_GPIO_Init+0x22a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a1d      	ldr	r2, [pc, #116]	; (8004a10 <HAL_GPIO_Init+0x24c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d025      	beq.n	80049ea <HAL_GPIO_Init+0x226>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1c      	ldr	r2, [pc, #112]	; (8004a14 <HAL_GPIO_Init+0x250>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01f      	beq.n	80049e6 <HAL_GPIO_Init+0x222>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1b      	ldr	r2, [pc, #108]	; (8004a18 <HAL_GPIO_Init+0x254>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d019      	beq.n	80049e2 <HAL_GPIO_Init+0x21e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a1a      	ldr	r2, [pc, #104]	; (8004a1c <HAL_GPIO_Init+0x258>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_GPIO_Init+0x21a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <HAL_GPIO_Init+0x25c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00d      	beq.n	80049da <HAL_GPIO_Init+0x216>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <HAL_GPIO_Init+0x260>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d007      	beq.n	80049d6 <HAL_GPIO_Init+0x212>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a17      	ldr	r2, [pc, #92]	; (8004a28 <HAL_GPIO_Init+0x264>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d101      	bne.n	80049d2 <HAL_GPIO_Init+0x20e>
 80049ce:	2309      	movs	r3, #9
 80049d0:	e02d      	b.n	8004a2e <HAL_GPIO_Init+0x26a>
 80049d2:	230a      	movs	r3, #10
 80049d4:	e02b      	b.n	8004a2e <HAL_GPIO_Init+0x26a>
 80049d6:	2308      	movs	r3, #8
 80049d8:	e029      	b.n	8004a2e <HAL_GPIO_Init+0x26a>
 80049da:	2307      	movs	r3, #7
 80049dc:	e027      	b.n	8004a2e <HAL_GPIO_Init+0x26a>
 80049de:	2306      	movs	r3, #6
 80049e0:	e025      	b.n	8004a2e <HAL_GPIO_Init+0x26a>
 80049e2:	2305      	movs	r3, #5
 80049e4:	e023      	b.n	8004a2e <HAL_GPIO_Init+0x26a>
 80049e6:	2304      	movs	r3, #4
 80049e8:	e021      	b.n	8004a2e <HAL_GPIO_Init+0x26a>
 80049ea:	2303      	movs	r3, #3
 80049ec:	e01f      	b.n	8004a2e <HAL_GPIO_Init+0x26a>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e01d      	b.n	8004a2e <HAL_GPIO_Init+0x26a>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e01b      	b.n	8004a2e <HAL_GPIO_Init+0x26a>
 80049f6:	bf00      	nop
 80049f8:	58000080 	.word	0x58000080
 80049fc:	58024400 	.word	0x58024400
 8004a00:	58000400 	.word	0x58000400
 8004a04:	58020000 	.word	0x58020000
 8004a08:	58020400 	.word	0x58020400
 8004a0c:	58020800 	.word	0x58020800
 8004a10:	58020c00 	.word	0x58020c00
 8004a14:	58021000 	.word	0x58021000
 8004a18:	58021400 	.word	0x58021400
 8004a1c:	58021800 	.word	0x58021800
 8004a20:	58021c00 	.word	0x58021c00
 8004a24:	58022000 	.word	0x58022000
 8004a28:	58022400 	.word	0x58022400
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	f002 0203 	and.w	r2, r2, #3
 8004a34:	0092      	lsls	r2, r2, #2
 8004a36:	4093      	lsls	r3, r2
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a3e:	4938      	ldr	r1, [pc, #224]	; (8004b20 <HAL_GPIO_Init+0x35c>)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	3302      	adds	r3, #2
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	43db      	mvns	r3, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	43db      	mvns	r3, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	3301      	adds	r3, #1
 8004b00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f47f ae63 	bne.w	80047d8 <HAL_GPIO_Init+0x14>
  }
}
 8004b12:	bf00      	nop
 8004b14:	bf00      	nop
 8004b16:	3724      	adds	r7, #36	; 0x24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	58000400 	.word	0x58000400

08004b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	887b      	ldrh	r3, [r7, #2]
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
 8004b40:	e001      	b.n	8004b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	807b      	strh	r3, [r7, #2]
 8004b60:	4613      	mov	r3, r2
 8004b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b64:	787b      	ldrb	r3, [r7, #1]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b6a:	887a      	ldrh	r2, [r7, #2]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b70:	e003      	b.n	8004b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b72:	887b      	ldrh	r3, [r7, #2]
 8004b74:	041a      	lsls	r2, r3, #16
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	619a      	str	r2, [r3, #24]
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004b90:	4b29      	ldr	r3, [pc, #164]	; (8004c38 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	2b06      	cmp	r3, #6
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b9c:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d001      	beq.n	8004bae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e040      	b.n	8004c30 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e03e      	b.n	8004c30 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bb2:	4b21      	ldr	r3, [pc, #132]	; (8004c38 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004bba:	491f      	ldr	r1, [pc, #124]	; (8004c38 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004bc2:	f7fc fc41 	bl	8001448 <HAL_GetTick>
 8004bc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bc8:	e009      	b.n	8004bde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004bca:	f7fc fc3d 	bl	8001448 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bd8:	d901      	bls.n	8004bde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e028      	b.n	8004c30 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bde:	4b16      	ldr	r3, [pc, #88]	; (8004c38 <HAL_PWREx_ConfigSupply+0xb0>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bea:	d1ee      	bne.n	8004bca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b1e      	cmp	r3, #30
 8004bf0:	d008      	beq.n	8004c04 <HAL_PWREx_ConfigSupply+0x7c>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8004bf6:	d005      	beq.n	8004c04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b1d      	cmp	r3, #29
 8004bfc:	d002      	beq.n	8004c04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b2d      	cmp	r3, #45	; 0x2d
 8004c02:	d114      	bne.n	8004c2e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004c04:	f7fc fc20 	bl	8001448 <HAL_GetTick>
 8004c08:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c0a:	e009      	b.n	8004c20 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c0c:	f7fc fc1c 	bl	8001448 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c1a:	d901      	bls.n	8004c20 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e007      	b.n	8004c30 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <HAL_PWREx_ConfigSupply+0xb0>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2c:	d1ee      	bne.n	8004c0c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	58024800 	.word	0x58024800

08004c3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08c      	sub	sp, #48	; 0x30
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e3f3      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 80b3 	beq.w	8004dc2 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c5c:	4b9e      	ldr	r3, [pc, #632]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c66:	4b9c      	ldr	r3, [pc, #624]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d007      	beq.n	8004c82 <HAL_RCC_OscConfig+0x46>
 8004c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c74:	2b18      	cmp	r3, #24
 8004c76:	d112      	bne.n	8004c9e <HAL_RCC_OscConfig+0x62>
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d10d      	bne.n	8004c9e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c82:	4b95      	ldr	r3, [pc, #596]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 8098 	beq.w	8004dc0 <HAL_RCC_OscConfig+0x184>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f040 8093 	bne.w	8004dc0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e3cb      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca6:	d106      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x7a>
 8004ca8:	4b8b      	ldr	r3, [pc, #556]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a8a      	ldr	r2, [pc, #552]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	e058      	b.n	8004d68 <HAL_RCC_OscConfig+0x12c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d112      	bne.n	8004ce4 <HAL_RCC_OscConfig+0xa8>
 8004cbe:	4b86      	ldr	r3, [pc, #536]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a85      	ldr	r2, [pc, #532]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	4b83      	ldr	r3, [pc, #524]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a82      	ldr	r2, [pc, #520]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004cd0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	4b80      	ldr	r3, [pc, #512]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a7f      	ldr	r2, [pc, #508]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	e041      	b.n	8004d68 <HAL_RCC_OscConfig+0x12c>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cec:	d112      	bne.n	8004d14 <HAL_RCC_OscConfig+0xd8>
 8004cee:	4b7a      	ldr	r3, [pc, #488]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a79      	ldr	r2, [pc, #484]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	4b77      	ldr	r3, [pc, #476]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a76      	ldr	r2, [pc, #472]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d00:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b74      	ldr	r3, [pc, #464]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a73      	ldr	r2, [pc, #460]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e029      	b.n	8004d68 <HAL_RCC_OscConfig+0x12c>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004d1c:	d112      	bne.n	8004d44 <HAL_RCC_OscConfig+0x108>
 8004d1e:	4b6e      	ldr	r3, [pc, #440]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6d      	ldr	r2, [pc, #436]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4b6b      	ldr	r3, [pc, #428]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a6a      	ldr	r2, [pc, #424]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	4b68      	ldr	r3, [pc, #416]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a67      	ldr	r2, [pc, #412]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	e011      	b.n	8004d68 <HAL_RCC_OscConfig+0x12c>
 8004d44:	4b64      	ldr	r3, [pc, #400]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a63      	ldr	r2, [pc, #396]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4b61      	ldr	r3, [pc, #388]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a60      	ldr	r2, [pc, #384]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	4b5e      	ldr	r3, [pc, #376]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a5d      	ldr	r2, [pc, #372]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d013      	beq.n	8004d98 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fc fb6a 	bl	8001448 <HAL_GetTick>
 8004d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d78:	f7fc fb66 	bl	8001448 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b64      	cmp	r3, #100	; 0x64
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e355      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d8a:	4b53      	ldr	r3, [pc, #332]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x13c>
 8004d96:	e014      	b.n	8004dc2 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fc fb56 	bl	8001448 <HAL_GetTick>
 8004d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004da0:	f7fc fb52 	bl	8001448 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	; 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e341      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004db2:	4b49      	ldr	r3, [pc, #292]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f0      	bne.n	8004da0 <HAL_RCC_OscConfig+0x164>
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 808c 	beq.w	8004ee8 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd0:	4b41      	ldr	r3, [pc, #260]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dda:	4b3f      	ldr	r3, [pc, #252]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <HAL_RCC_OscConfig+0x1ba>
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	2b18      	cmp	r3, #24
 8004dea:	d137      	bne.n	8004e5c <HAL_RCC_OscConfig+0x220>
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d132      	bne.n	8004e5c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df6:	4b38      	ldr	r3, [pc, #224]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_RCC_OscConfig+0x1d2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e313      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e0e:	4b32      	ldr	r3, [pc, #200]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 0219 	bic.w	r2, r3, #25
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	492f      	ldr	r1, [pc, #188]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e20:	f7fc fb12 	bl	8001448 <HAL_GetTick>
 8004e24:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e28:	f7fc fb0e 	bl	8001448 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e2fd      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e3a:	4b27      	ldr	r3, [pc, #156]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e46:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	061b      	lsls	r3, r3, #24
 8004e54:	4920      	ldr	r1, [pc, #128]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e5a:	e045      	b.n	8004ee8 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d026      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e64:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f023 0219 	bic.w	r2, r3, #25
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4919      	ldr	r1, [pc, #100]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e76:	f7fc fae7 	bl	8001448 <HAL_GetTick>
 8004e7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e7e:	f7fc fae3 	bl	8001448 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e2d2      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e90:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9c:	4b0e      	ldr	r3, [pc, #56]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	061b      	lsls	r3, r3, #24
 8004eaa:	490b      	ldr	r1, [pc, #44]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	604b      	str	r3, [r1, #4]
 8004eb0:	e01a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a08      	ldr	r2, [pc, #32]	; (8004ed8 <HAL_RCC_OscConfig+0x29c>)
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebe:	f7fc fac3 	bl	8001448 <HAL_GetTick>
 8004ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ec4:	e00a      	b.n	8004edc <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ec6:	f7fc fabf 	bl	8001448 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d903      	bls.n	8004edc <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e2ae      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
 8004ed8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004edc:	4b99      	ldr	r3, [pc, #612]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1ee      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d06a      	beq.n	8004fca <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef4:	4b93      	ldr	r3, [pc, #588]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004efc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004efe:	4b91      	ldr	r3, [pc, #580]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d007      	beq.n	8004f1a <HAL_RCC_OscConfig+0x2de>
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b18      	cmp	r3, #24
 8004f0e:	d11b      	bne.n	8004f48 <HAL_RCC_OscConfig+0x30c>
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d116      	bne.n	8004f48 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f1a:	4b8a      	ldr	r3, [pc, #552]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_RCC_OscConfig+0x2f6>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	2b80      	cmp	r3, #128	; 0x80
 8004f2c:	d001      	beq.n	8004f32 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e281      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f32:	4b84      	ldr	r3, [pc, #528]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	061b      	lsls	r3, r3, #24
 8004f40:	4980      	ldr	r1, [pc, #512]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f46:	e040      	b.n	8004fca <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d023      	beq.n	8004f98 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f50:	4b7c      	ldr	r3, [pc, #496]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a7b      	ldr	r2, [pc, #492]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5c:	f7fc fa74 	bl	8001448 <HAL_GetTick>
 8004f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f64:	f7fc fa70 	bl	8001448 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e25f      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f76:	4b73      	ldr	r3, [pc, #460]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f0      	beq.n	8004f64 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f82:	4b70      	ldr	r3, [pc, #448]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	061b      	lsls	r3, r3, #24
 8004f90:	496c      	ldr	r1, [pc, #432]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60cb      	str	r3, [r1, #12]
 8004f96:	e018      	b.n	8004fca <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f98:	4b6a      	ldr	r3, [pc, #424]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a69      	ldr	r2, [pc, #420]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7fc fa50 	bl	8001448 <HAL_GetTick>
 8004fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004fac:	f7fc fa4c 	bl	8001448 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e23b      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fbe:	4b61      	ldr	r3, [pc, #388]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d036      	beq.n	8005044 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d019      	beq.n	8005012 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fde:	4b59      	ldr	r3, [pc, #356]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe2:	4a58      	ldr	r2, [pc, #352]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fea:	f7fc fa2d 	bl	8001448 <HAL_GetTick>
 8004fee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff2:	f7fc fa29 	bl	8001448 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e218      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005004:	4b4f      	ldr	r3, [pc, #316]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8005006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x3b6>
 8005010:	e018      	b.n	8005044 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005012:	4b4c      	ldr	r3, [pc, #304]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8005014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005016:	4a4b      	ldr	r2, [pc, #300]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8005018:	f023 0301 	bic.w	r3, r3, #1
 800501c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501e:	f7fc fa13 	bl	8001448 <HAL_GetTick>
 8005022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005026:	f7fc fa0f 	bl	8001448 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e1fe      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005038:	4b42      	ldr	r3, [pc, #264]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 800503a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f0      	bne.n	8005026 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d036      	beq.n	80050be <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d019      	beq.n	800508c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005058:	4b3a      	ldr	r3, [pc, #232]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a39      	ldr	r2, [pc, #228]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 800505e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005062:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005064:	f7fc f9f0 	bl	8001448 <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800506c:	f7fc f9ec 	bl	8001448 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e1db      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800507e:	4b31      	ldr	r3, [pc, #196]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0x430>
 800508a:	e018      	b.n	80050be <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800508c:	4b2d      	ldr	r3, [pc, #180]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a2c      	ldr	r2, [pc, #176]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8005092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005096:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005098:	f7fc f9d6 	bl	8001448 <HAL_GetTick>
 800509c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050a0:	f7fc f9d2 	bl	8001448 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e1c1      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050b2:	4b24      	ldr	r3, [pc, #144]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80af 	beq.w	800522a <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050cc:	4b1e      	ldr	r3, [pc, #120]	; (8005148 <HAL_RCC_OscConfig+0x50c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1d      	ldr	r2, [pc, #116]	; (8005148 <HAL_RCC_OscConfig+0x50c>)
 80050d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050d8:	f7fc f9b6 	bl	8001448 <HAL_GetTick>
 80050dc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050e0:	f7fc f9b2 	bl	8001448 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b64      	cmp	r3, #100	; 0x64
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e1a1      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <HAL_RCC_OscConfig+0x50c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f0      	beq.n	80050e0 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d106      	bne.n	8005114 <HAL_RCC_OscConfig+0x4d8>
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	4a0e      	ldr	r2, [pc, #56]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	6713      	str	r3, [r2, #112]	; 0x70
 8005112:	e05b      	b.n	80051cc <HAL_RCC_OscConfig+0x590>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d117      	bne.n	800514c <HAL_RCC_OscConfig+0x510>
 800511c:	4b09      	ldr	r3, [pc, #36]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 800511e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005120:	4a08      	ldr	r2, [pc, #32]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8005122:	f023 0301 	bic.w	r3, r3, #1
 8005126:	6713      	str	r3, [r2, #112]	; 0x70
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512c:	4a05      	ldr	r2, [pc, #20]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 800512e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005132:	6713      	str	r3, [r2, #112]	; 0x70
 8005134:	4b03      	ldr	r3, [pc, #12]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	4a02      	ldr	r2, [pc, #8]	; (8005144 <HAL_RCC_OscConfig+0x508>)
 800513a:	f023 0304 	bic.w	r3, r3, #4
 800513e:	6713      	str	r3, [r2, #112]	; 0x70
 8005140:	e044      	b.n	80051cc <HAL_RCC_OscConfig+0x590>
 8005142:	bf00      	nop
 8005144:	58024400 	.word	0x58024400
 8005148:	58024800 	.word	0x58024800
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b05      	cmp	r3, #5
 8005152:	d112      	bne.n	800517a <HAL_RCC_OscConfig+0x53e>
 8005154:	4b95      	ldr	r3, [pc, #596]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005158:	4a94      	ldr	r2, [pc, #592]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 800515a:	f043 0304 	orr.w	r3, r3, #4
 800515e:	6713      	str	r3, [r2, #112]	; 0x70
 8005160:	4b92      	ldr	r3, [pc, #584]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	4a91      	ldr	r2, [pc, #580]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516a:	6713      	str	r3, [r2, #112]	; 0x70
 800516c:	4b8f      	ldr	r3, [pc, #572]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005170:	4a8e      	ldr	r2, [pc, #568]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	6713      	str	r3, [r2, #112]	; 0x70
 8005178:	e028      	b.n	80051cc <HAL_RCC_OscConfig+0x590>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b85      	cmp	r3, #133	; 0x85
 8005180:	d112      	bne.n	80051a8 <HAL_RCC_OscConfig+0x56c>
 8005182:	4b8a      	ldr	r3, [pc, #552]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	4a89      	ldr	r2, [pc, #548]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005188:	f043 0304 	orr.w	r3, r3, #4
 800518c:	6713      	str	r3, [r2, #112]	; 0x70
 800518e:	4b87      	ldr	r3, [pc, #540]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005192:	4a86      	ldr	r2, [pc, #536]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005198:	6713      	str	r3, [r2, #112]	; 0x70
 800519a:	4b84      	ldr	r3, [pc, #528]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519e:	4a83      	ldr	r2, [pc, #524]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80051a0:	f043 0301 	orr.w	r3, r3, #1
 80051a4:	6713      	str	r3, [r2, #112]	; 0x70
 80051a6:	e011      	b.n	80051cc <HAL_RCC_OscConfig+0x590>
 80051a8:	4b80      	ldr	r3, [pc, #512]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ac:	4a7f      	ldr	r2, [pc, #508]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	6713      	str	r3, [r2, #112]	; 0x70
 80051b4:	4b7d      	ldr	r3, [pc, #500]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b8:	4a7c      	ldr	r2, [pc, #496]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80051ba:	f023 0304 	bic.w	r3, r3, #4
 80051be:	6713      	str	r3, [r2, #112]	; 0x70
 80051c0:	4b7a      	ldr	r3, [pc, #488]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80051c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c4:	4a79      	ldr	r2, [pc, #484]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80051c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d015      	beq.n	8005200 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fc f938 	bl	8001448 <HAL_GetTick>
 80051d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051dc:	f7fc f934 	bl	8001448 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e121      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051f2:	4b6e      	ldr	r3, [pc, #440]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80051f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0ee      	beq.n	80051dc <HAL_RCC_OscConfig+0x5a0>
 80051fe:	e014      	b.n	800522a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005200:	f7fc f922 	bl	8001448 <HAL_GetTick>
 8005204:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005206:	e00a      	b.n	800521e <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005208:	f7fc f91e 	bl	8001448 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	; 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e10b      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800521e:	4b63      	ldr	r3, [pc, #396]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1ee      	bne.n	8005208 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 8100 	beq.w	8005434 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005234:	4b5d      	ldr	r3, [pc, #372]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800523c:	2b18      	cmp	r3, #24
 800523e:	f000 80bb 	beq.w	80053b8 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2b02      	cmp	r3, #2
 8005248:	f040 8095 	bne.w	8005376 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524c:	4b57      	ldr	r3, [pc, #348]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a56      	ldr	r2, [pc, #344]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7fc f8f6 	bl	8001448 <HAL_GetTick>
 800525c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005260:	f7fc f8f2 	bl	8001448 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e0e1      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005272:	4b4e      	ldr	r3, [pc, #312]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800527e:	4b4b      	ldr	r3, [pc, #300]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005282:	4b4b      	ldr	r3, [pc, #300]	; (80053b0 <HAL_RCC_OscConfig+0x774>)
 8005284:	4013      	ands	r3, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800528e:	0112      	lsls	r2, r2, #4
 8005290:	430a      	orrs	r2, r1
 8005292:	4946      	ldr	r1, [pc, #280]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005294:	4313      	orrs	r3, r2
 8005296:	628b      	str	r3, [r1, #40]	; 0x28
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	3b01      	subs	r3, #1
 800529e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a6:	3b01      	subs	r3, #1
 80052a8:	025b      	lsls	r3, r3, #9
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	3b01      	subs	r3, #1
 80052b4:	041b      	lsls	r3, r3, #16
 80052b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c0:	3b01      	subs	r3, #1
 80052c2:	061b      	lsls	r3, r3, #24
 80052c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052c8:	4938      	ldr	r1, [pc, #224]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80052ce:	4b37      	ldr	r3, [pc, #220]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	4a36      	ldr	r2, [pc, #216]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052da:	4b34      	ldr	r3, [pc, #208]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80052dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052de:	4b35      	ldr	r3, [pc, #212]	; (80053b4 <HAL_RCC_OscConfig+0x778>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052e6:	00d2      	lsls	r2, r2, #3
 80052e8:	4930      	ldr	r1, [pc, #192]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80052ee:	4b2f      	ldr	r3, [pc, #188]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	f023 020c 	bic.w	r2, r3, #12
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	492c      	ldr	r1, [pc, #176]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005300:	4b2a      	ldr	r3, [pc, #168]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	f023 0202 	bic.w	r2, r3, #2
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530c:	4927      	ldr	r1, [pc, #156]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 800530e:	4313      	orrs	r3, r2
 8005310:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005312:	4b26      	ldr	r3, [pc, #152]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	4a25      	ldr	r2, [pc, #148]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800531c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800531e:	4b23      	ldr	r3, [pc, #140]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	4a22      	ldr	r2, [pc, #136]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005328:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800532a:	4b20      	ldr	r3, [pc, #128]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	4a1f      	ldr	r2, [pc, #124]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005334:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005342:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a19      	ldr	r2, [pc, #100]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800534c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534e:	f7fc f87b 	bl	8001448 <HAL_GetTick>
 8005352:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005356:	f7fc f877 	bl	8001448 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e066      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005368:	4b10      	ldr	r3, [pc, #64]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x71a>
 8005374:	e05e      	b.n	8005434 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005376:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a0c      	ldr	r2, [pc, #48]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 800537c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005382:	f7fc f861 	bl	8001448 <HAL_GetTick>
 8005386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800538a:	f7fc f85d 	bl	8001448 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e04c      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800539c:	4b03      	ldr	r3, [pc, #12]	; (80053ac <HAL_RCC_OscConfig+0x770>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1f0      	bne.n	800538a <HAL_RCC_OscConfig+0x74e>
 80053a8:	e044      	b.n	8005434 <HAL_RCC_OscConfig+0x7f8>
 80053aa:	bf00      	nop
 80053ac:	58024400 	.word	0x58024400
 80053b0:	fffffc0c 	.word	0xfffffc0c
 80053b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80053b8:	4b21      	ldr	r3, [pc, #132]	; (8005440 <HAL_RCC_OscConfig+0x804>)
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80053be:	4b20      	ldr	r3, [pc, #128]	; (8005440 <HAL_RCC_OscConfig+0x804>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d031      	beq.n	8005430 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f003 0203 	and.w	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d12a      	bne.n	8005430 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d122      	bne.n	8005430 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d11a      	bne.n	8005430 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	0a5b      	lsrs	r3, r3, #9
 80053fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005406:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005408:	429a      	cmp	r2, r3
 800540a:	d111      	bne.n	8005430 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	0c1b      	lsrs	r3, r3, #16
 8005410:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800541a:	429a      	cmp	r2, r3
 800541c:	d108      	bne.n	8005430 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	0e1b      	lsrs	r3, r3, #24
 8005422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800542c:	429a      	cmp	r2, r3
 800542e:	d001      	beq.n	8005434 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3730      	adds	r7, #48	; 0x30
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	58024400 	.word	0x58024400

08005444 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e19c      	b.n	8005792 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005458:	4b8a      	ldr	r3, [pc, #552]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d910      	bls.n	8005488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005466:	4b87      	ldr	r3, [pc, #540]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f023 020f 	bic.w	r2, r3, #15
 800546e:	4985      	ldr	r1, [pc, #532]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	4313      	orrs	r3, r2
 8005474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005476:	4b83      	ldr	r3, [pc, #524]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d001      	beq.n	8005488 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e184      	b.n	8005792 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d010      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	4b7b      	ldr	r3, [pc, #492]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d908      	bls.n	80054b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054a4:	4b78      	ldr	r3, [pc, #480]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	4975      	ldr	r1, [pc, #468]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d010      	beq.n	80054e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	4b70      	ldr	r3, [pc, #448]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d908      	bls.n	80054e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054d2:	4b6d      	ldr	r3, [pc, #436]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	496a      	ldr	r1, [pc, #424]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d010      	beq.n	8005512 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699a      	ldr	r2, [r3, #24]
 80054f4:	4b64      	ldr	r3, [pc, #400]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d908      	bls.n	8005512 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005500:	4b61      	ldr	r3, [pc, #388]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	495e      	ldr	r1, [pc, #376]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 800550e:	4313      	orrs	r3, r2
 8005510:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d010      	beq.n	8005540 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69da      	ldr	r2, [r3, #28]
 8005522:	4b59      	ldr	r3, [pc, #356]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800552a:	429a      	cmp	r2, r3
 800552c:	d908      	bls.n	8005540 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800552e:	4b56      	ldr	r3, [pc, #344]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	4953      	ldr	r1, [pc, #332]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 800553c:	4313      	orrs	r3, r2
 800553e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d010      	beq.n	800556e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	4b4d      	ldr	r3, [pc, #308]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	429a      	cmp	r2, r3
 800555a:	d908      	bls.n	800556e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800555c:	4b4a      	ldr	r3, [pc, #296]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f023 020f 	bic.w	r2, r3, #15
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4947      	ldr	r1, [pc, #284]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 800556a:	4313      	orrs	r3, r2
 800556c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d055      	beq.n	8005626 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800557a:	4b43      	ldr	r3, [pc, #268]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	4940      	ldr	r1, [pc, #256]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005588:	4313      	orrs	r3, r2
 800558a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b02      	cmp	r3, #2
 8005592:	d107      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005594:	4b3c      	ldr	r3, [pc, #240]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d121      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0f6      	b.n	8005792 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d107      	bne.n	80055bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055ac:	4b36      	ldr	r3, [pc, #216]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d115      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0ea      	b.n	8005792 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d107      	bne.n	80055d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055c4:	4b30      	ldr	r3, [pc, #192]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d109      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0de      	b.n	8005792 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055d4:	4b2c      	ldr	r3, [pc, #176]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0d6      	b.n	8005792 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055e4:	4b28      	ldr	r3, [pc, #160]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f023 0207 	bic.w	r2, r3, #7
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	4925      	ldr	r1, [pc, #148]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f6:	f7fb ff27 	bl	8001448 <HAL_GetTick>
 80055fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fc:	e00a      	b.n	8005614 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055fe:	f7fb ff23 	bl	8001448 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	f241 3288 	movw	r2, #5000	; 0x1388
 800560c:	4293      	cmp	r3, r2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e0be      	b.n	8005792 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005614:	4b1c      	ldr	r3, [pc, #112]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	429a      	cmp	r2, r3
 8005624:	d1eb      	bne.n	80055fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d010      	beq.n	8005654 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	4b14      	ldr	r3, [pc, #80]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	429a      	cmp	r2, r3
 8005640:	d208      	bcs.n	8005654 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005642:	4b11      	ldr	r3, [pc, #68]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f023 020f 	bic.w	r2, r3, #15
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	490e      	ldr	r1, [pc, #56]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005650:	4313      	orrs	r3, r2
 8005652:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005654:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d214      	bcs.n	800568c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b08      	ldr	r3, [pc, #32]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 020f 	bic.w	r2, r3, #15
 800566a:	4906      	ldr	r1, [pc, #24]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	4313      	orrs	r3, r2
 8005670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005672:	4b04      	ldr	r3, [pc, #16]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d005      	beq.n	800568c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e086      	b.n	8005792 <HAL_RCC_ClockConfig+0x34e>
 8005684:	52002000 	.word	0x52002000
 8005688:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d010      	beq.n	80056ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	4b3f      	ldr	r3, [pc, #252]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d208      	bcs.n	80056ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056a8:	4b3c      	ldr	r3, [pc, #240]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	4939      	ldr	r1, [pc, #228]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d010      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695a      	ldr	r2, [r3, #20]
 80056ca:	4b34      	ldr	r3, [pc, #208]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d208      	bcs.n	80056e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056d6:	4b31      	ldr	r3, [pc, #196]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	492e      	ldr	r1, [pc, #184]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d010      	beq.n	8005716 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699a      	ldr	r2, [r3, #24]
 80056f8:	4b28      	ldr	r3, [pc, #160]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005700:	429a      	cmp	r2, r3
 8005702:	d208      	bcs.n	8005716 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005704:	4b25      	ldr	r3, [pc, #148]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	4922      	ldr	r1, [pc, #136]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 8005712:	4313      	orrs	r3, r2
 8005714:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	d010      	beq.n	8005744 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69da      	ldr	r2, [r3, #28]
 8005726:	4b1d      	ldr	r3, [pc, #116]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800572e:	429a      	cmp	r2, r3
 8005730:	d208      	bcs.n	8005744 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005732:	4b1a      	ldr	r3, [pc, #104]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	4917      	ldr	r1, [pc, #92]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 8005740:	4313      	orrs	r3, r2
 8005742:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005744:	f000 f834 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 8005748:	4602      	mov	r2, r0
 800574a:	4b14      	ldr	r3, [pc, #80]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	0a1b      	lsrs	r3, r3, #8
 8005750:	f003 030f 	and.w	r3, r3, #15
 8005754:	4912      	ldr	r1, [pc, #72]	; (80057a0 <HAL_RCC_ClockConfig+0x35c>)
 8005756:	5ccb      	ldrb	r3, [r1, r3]
 8005758:	f003 031f 	and.w	r3, r3, #31
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
 8005760:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005762:	4b0e      	ldr	r3, [pc, #56]	; (800579c <HAL_RCC_ClockConfig+0x358>)
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	4a0d      	ldr	r2, [pc, #52]	; (80057a0 <HAL_RCC_ClockConfig+0x35c>)
 800576c:	5cd3      	ldrb	r3, [r2, r3]
 800576e:	f003 031f 	and.w	r3, r3, #31
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
 8005778:	4a0a      	ldr	r2, [pc, #40]	; (80057a4 <HAL_RCC_ClockConfig+0x360>)
 800577a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800577c:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <HAL_RCC_ClockConfig+0x364>)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005782:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <HAL_RCC_ClockConfig+0x368>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f7fb fe14 	bl	80013b4 <HAL_InitTick>
 800578c:	4603      	mov	r3, r0
 800578e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	58024400 	.word	0x58024400
 80057a0:	0800cb60 	.word	0x0800cb60
 80057a4:	24000004 	.word	0x24000004
 80057a8:	24000000 	.word	0x24000000
 80057ac:	24000008 	.word	0x24000008

080057b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b089      	sub	sp, #36	; 0x24
 80057b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057b6:	4bb3      	ldr	r3, [pc, #716]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057be:	2b18      	cmp	r3, #24
 80057c0:	f200 8155 	bhi.w	8005a6e <HAL_RCC_GetSysClockFreq+0x2be>
 80057c4:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80057c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ca:	bf00      	nop
 80057cc:	08005831 	.word	0x08005831
 80057d0:	08005a6f 	.word	0x08005a6f
 80057d4:	08005a6f 	.word	0x08005a6f
 80057d8:	08005a6f 	.word	0x08005a6f
 80057dc:	08005a6f 	.word	0x08005a6f
 80057e0:	08005a6f 	.word	0x08005a6f
 80057e4:	08005a6f 	.word	0x08005a6f
 80057e8:	08005a6f 	.word	0x08005a6f
 80057ec:	08005857 	.word	0x08005857
 80057f0:	08005a6f 	.word	0x08005a6f
 80057f4:	08005a6f 	.word	0x08005a6f
 80057f8:	08005a6f 	.word	0x08005a6f
 80057fc:	08005a6f 	.word	0x08005a6f
 8005800:	08005a6f 	.word	0x08005a6f
 8005804:	08005a6f 	.word	0x08005a6f
 8005808:	08005a6f 	.word	0x08005a6f
 800580c:	0800585d 	.word	0x0800585d
 8005810:	08005a6f 	.word	0x08005a6f
 8005814:	08005a6f 	.word	0x08005a6f
 8005818:	08005a6f 	.word	0x08005a6f
 800581c:	08005a6f 	.word	0x08005a6f
 8005820:	08005a6f 	.word	0x08005a6f
 8005824:	08005a6f 	.word	0x08005a6f
 8005828:	08005a6f 	.word	0x08005a6f
 800582c:	08005863 	.word	0x08005863
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005830:	4b94      	ldr	r3, [pc, #592]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b00      	cmp	r3, #0
 800583a:	d009      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800583c:	4b91      	ldr	r3, [pc, #580]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	08db      	lsrs	r3, r3, #3
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	4a90      	ldr	r2, [pc, #576]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
 800584c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800584e:	e111      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005850:	4b8d      	ldr	r3, [pc, #564]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005852:	61bb      	str	r3, [r7, #24]
    break;
 8005854:	e10e      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005856:	4b8d      	ldr	r3, [pc, #564]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005858:	61bb      	str	r3, [r7, #24]
    break;
 800585a:	e10b      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800585c:	4b8c      	ldr	r3, [pc, #560]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800585e:	61bb      	str	r3, [r7, #24]
    break;
 8005860:	e108      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005862:	4b88      	ldr	r3, [pc, #544]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800586c:	4b85      	ldr	r3, [pc, #532]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005876:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005878:	4b82      	ldr	r3, [pc, #520]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005882:	4b80      	ldr	r3, [pc, #512]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005886:	08db      	lsrs	r3, r3, #3
 8005888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80e1 	beq.w	8005a68 <HAL_RCC_GetSysClockFreq+0x2b8>
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	f000 8083 	beq.w	80059b4 <HAL_RCC_GetSysClockFreq+0x204>
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	f200 80a1 	bhi.w	80059f8 <HAL_RCC_GetSysClockFreq+0x248>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_RCC_GetSysClockFreq+0x114>
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d056      	beq.n	8005970 <HAL_RCC_GetSysClockFreq+0x1c0>
 80058c2:	e099      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058c4:	4b6f      	ldr	r3, [pc, #444]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d02d      	beq.n	800592c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058d0:	4b6c      	ldr	r3, [pc, #432]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	08db      	lsrs	r3, r3, #3
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	4a6b      	ldr	r2, [pc, #428]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
 80058e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	ee07 3a90 	vmov	s15, r3
 80058e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fa:	4b62      	ldr	r3, [pc, #392]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590a:	ed97 6a02 	vldr	s12, [r7, #8]
 800590e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800591e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005926:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800592a:	e087      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005936:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005a98 <HAL_RCC_GetSysClockFreq+0x2e8>
 800593a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800593e:	4b51      	ldr	r3, [pc, #324]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005952:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800596e:	e065      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005a9c <HAL_RCC_GetSysClockFreq+0x2ec>
 800597e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005982:	4b40      	ldr	r3, [pc, #256]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005992:	ed97 6a02 	vldr	s12, [r7, #8]
 8005996:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800599a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059b2:	e043      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059be:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005aa0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80059c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c6:	4b2f      	ldr	r3, [pc, #188]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059f6:	e021      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a02:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005a9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0a:	4b1e      	ldr	r3, [pc, #120]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a3a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005a3c:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	0a5b      	lsrs	r3, r3, #9
 8005a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a46:	3301      	adds	r3, #1
 8005a48:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	ee07 3a90 	vmov	s15, r3
 8005a50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a60:	ee17 3a90 	vmov	r3, s15
 8005a64:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005a66:	e005      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61bb      	str	r3, [r7, #24]
    break;
 8005a6c:	e002      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005a6e:	4b07      	ldr	r3, [pc, #28]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a70:	61bb      	str	r3, [r7, #24]
    break;
 8005a72:	bf00      	nop
  }

  return sysclockfreq;
 8005a74:	69bb      	ldr	r3, [r7, #24]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3724      	adds	r7, #36	; 0x24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	58024400 	.word	0x58024400
 8005a88:	03d09000 	.word	0x03d09000
 8005a8c:	003d0900 	.word	0x003d0900
 8005a90:	007a1200 	.word	0x007a1200
 8005a94:	46000000 	.word	0x46000000
 8005a98:	4c742400 	.word	0x4c742400
 8005a9c:	4a742400 	.word	0x4a742400
 8005aa0:	4af42400 	.word	0x4af42400

08005aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005aaa:	f7ff fe81 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	4b10      	ldr	r3, [pc, #64]	; (8005af4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	0a1b      	lsrs	r3, r3, #8
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	490f      	ldr	r1, [pc, #60]	; (8005af8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005abc:	5ccb      	ldrb	r3, [r1, r3]
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f003 030f 	and.w	r3, r3, #15
 8005ad0:	4a09      	ldr	r2, [pc, #36]	; (8005af8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ad2:	5cd3      	ldrb	r3, [r2, r3]
 8005ad4:	f003 031f 	and.w	r3, r3, #31
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	fa22 f303 	lsr.w	r3, r2, r3
 8005ade:	4a07      	ldr	r2, [pc, #28]	; (8005afc <HAL_RCC_GetHCLKFreq+0x58>)
 8005ae0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ae2:	4a07      	ldr	r2, [pc, #28]	; (8005b00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ae8:	4b04      	ldr	r3, [pc, #16]	; (8005afc <HAL_RCC_GetHCLKFreq+0x58>)
 8005aea:	681b      	ldr	r3, [r3, #0]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	58024400 	.word	0x58024400
 8005af8:	0800cb60 	.word	0x0800cb60
 8005afc:	24000004 	.word	0x24000004
 8005b00:	24000000 	.word	0x24000000

08005b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005b08:	f7ff ffcc 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	091b      	lsrs	r3, r3, #4
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	4904      	ldr	r1, [pc, #16]	; (8005b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b1a:	5ccb      	ldrb	r3, [r1, r3]
 8005b1c:	f003 031f 	and.w	r3, r3, #31
 8005b20:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	58024400 	.word	0x58024400
 8005b2c:	0800cb60 	.word	0x0800cb60

08005b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005b34:	f7ff ffb6 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	0a1b      	lsrs	r3, r3, #8
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	4904      	ldr	r1, [pc, #16]	; (8005b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b46:	5ccb      	ldrb	r3, [r1, r3]
 8005b48:	f003 031f 	and.w	r3, r3, #31
 8005b4c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	58024400 	.word	0x58024400
 8005b58:	0800cb60 	.word	0x0800cb60

08005b5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b64:	2300      	movs	r3, #0
 8005b66:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b68:	2300      	movs	r3, #0
 8005b6a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d03f      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b80:	d02a      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005b82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b86:	d824      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b8c:	d018      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b92:	d81e      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b9c:	d007      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005b9e:	e018      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba0:	4ba6      	ldr	r3, [pc, #664]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	4aa5      	ldr	r2, [pc, #660]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005baa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bac:	e015      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	2102      	movs	r1, #2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f001 ff17 	bl	80079e8 <RCCEx_PLL2_Config>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bbe:	e00c      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3324      	adds	r3, #36	; 0x24
 8005bc4:	2102      	movs	r1, #2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 ffc0 	bl	8007b4c <RCCEx_PLL3_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bd0:	e003      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd6:	e000      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005be0:	4b96      	ldr	r3, [pc, #600]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bec:	4993      	ldr	r1, [pc, #588]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	650b      	str	r3, [r1, #80]	; 0x50
 8005bf2:	e001      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d03d      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d826      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c0c:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005c29 	.word	0x08005c29
 8005c18:	08005c37 	.word	0x08005c37
 8005c1c:	08005c49 	.word	0x08005c49
 8005c20:	08005c61 	.word	0x08005c61
 8005c24:	08005c61 	.word	0x08005c61
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c28:	4b84      	ldr	r3, [pc, #528]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	4a83      	ldr	r2, [pc, #524]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c34:	e015      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f001 fed3 	bl	80079e8 <RCCEx_PLL2_Config>
 8005c42:	4603      	mov	r3, r0
 8005c44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c46:	e00c      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3324      	adds	r3, #36	; 0x24
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 ff7c 	bl	8007b4c <RCCEx_PLL3_Config>
 8005c54:	4603      	mov	r3, r0
 8005c56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c58:	e003      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c5e:	e000      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d109      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c68:	4b74      	ldr	r3, [pc, #464]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c6c:	f023 0207 	bic.w	r2, r3, #7
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c74:	4971      	ldr	r1, [pc, #452]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	650b      	str	r3, [r1, #80]	; 0x50
 8005c7a:	e001      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
 8005c7e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d04a      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c90:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005c94:	d031      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005c96:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005c9a:	d82b      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca0:	d02d      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca6:	d825      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005ca8:	2bc0      	cmp	r3, #192	; 0xc0
 8005caa:	d02a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005cac:	2bc0      	cmp	r3, #192	; 0xc0
 8005cae:	d821      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005cb0:	2b80      	cmp	r3, #128	; 0x80
 8005cb2:	d016      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005cb4:	2b80      	cmp	r3, #128	; 0x80
 8005cb6:	d81d      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d007      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005cc0:	e018      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc2:	4b5e      	ldr	r3, [pc, #376]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	4a5d      	ldr	r2, [pc, #372]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005cce:	e019      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 fe86 	bl	80079e8 <RCCEx_PLL2_Config>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005ce0:	e010      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3324      	adds	r3, #36	; 0x24
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f001 ff2f 	bl	8007b4c <RCCEx_PLL3_Config>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005cf2:	e007      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf8:	e004      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005cfa:	bf00      	nop
 8005cfc:	e002      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005cfe:	bf00      	nop
 8005d00:	e000      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005d02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d04:	7dfb      	ldrb	r3, [r7, #23]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d109      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005d0a:	4b4c      	ldr	r3, [pc, #304]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d16:	4949      	ldr	r1, [pc, #292]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	650b      	str	r3, [r1, #80]	; 0x50
 8005d1c:	e001      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
 8005d20:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d04f      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d32:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005d36:	d036      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005d38:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005d3c:	d830      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d42:	d032      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8005d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d48:	d82a      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005d4a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d4e:	d02e      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x252>
 8005d50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d54:	d824      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5a:	d018      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d60:	d81e      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d6a:	d007      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005d6c:	e018      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d6e:	4b33      	ldr	r3, [pc, #204]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d72:	4a32      	ldr	r2, [pc, #200]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005d7a:	e019      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	2100      	movs	r1, #0
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 fe30 	bl	80079e8 <RCCEx_PLL2_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005d8c:	e010      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3324      	adds	r3, #36	; 0x24
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 fed9 	bl	8007b4c <RCCEx_PLL3_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005d9e:	e007      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	75fb      	strb	r3, [r7, #23]
      break;
 8005da4:	e004      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005da6:	bf00      	nop
 8005da8:	e002      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005daa:	bf00      	nop
 8005dac:	e000      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005db6:	4b21      	ldr	r3, [pc, #132]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dba:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc2:	491e      	ldr	r1, [pc, #120]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	650b      	str	r3, [r1, #80]	; 0x50
 8005dc8:	e001      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
 8005dcc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d034      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dde:	2b30      	cmp	r3, #48	; 0x30
 8005de0:	d01c      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8005de2:	2b30      	cmp	r3, #48	; 0x30
 8005de4:	d817      	bhi.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d00c      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	d813      	bhi.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d016      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8005df2:	2b10      	cmp	r3, #16
 8005df4:	d10f      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df6:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	4a10      	ldr	r2, [pc, #64]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005e02:	e00e      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	2102      	movs	r1, #2
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f001 fdec 	bl	80079e8 <RCCEx_PLL2_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005e14:	e005      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	75fb      	strb	r3, [r7, #23]
      break;
 8005e1a:	e002      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8005e1c:	bf00      	nop
 8005e1e:	e000      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8005e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10b      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e34:	4901      	ldr	r1, [pc, #4]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e3a:	e003      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005e3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
 8005e42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d047      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e58:	d030      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e5e:	d82a      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005e60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e64:	d02c      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8005e66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e6a:	d824      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e70:	d018      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e76:	d81e      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e80:	d007      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005e82:	e018      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e84:	4bb0      	ldr	r3, [pc, #704]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	4aaf      	ldr	r2, [pc, #700]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e90:	e017      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3304      	adds	r3, #4
 8005e96:	2100      	movs	r1, #0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f001 fda5 	bl	80079e8 <RCCEx_PLL2_Config>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ea2:	e00e      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3324      	adds	r3, #36	; 0x24
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 fe4e 	bl	8007b4c <RCCEx_PLL3_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005eb4:	e005      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eba:	e002      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005ebc:	bf00      	nop
 8005ebe:	e000      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ec8:	4b9f      	ldr	r3, [pc, #636]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ecc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed4:	499c      	ldr	r1, [pc, #624]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	650b      	str	r3, [r1, #80]	; 0x50
 8005eda:	e001      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005edc:	7dfb      	ldrb	r3, [r7, #23]
 8005ede:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d049      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ef4:	d02e      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005ef6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005efa:	d828      	bhi.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f00:	d02a      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f06:	d822      	bhi.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005f08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f0c:	d026      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005f0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f12:	d81c      	bhi.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f18:	d010      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f1e:	d816      	bhi.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01d      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f28:	d111      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	2101      	movs	r1, #1
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 fd59 	bl	80079e8 <RCCEx_PLL2_Config>
 8005f36:	4603      	mov	r3, r0
 8005f38:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f3a:	e012      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3324      	adds	r3, #36	; 0x24
 8005f40:	2101      	movs	r1, #1
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 fe02 	bl	8007b4c <RCCEx_PLL3_Config>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f4c:	e009      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	75fb      	strb	r3, [r7, #23]
      break;
 8005f52:	e006      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005f54:	bf00      	nop
 8005f56:	e004      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005f58:	bf00      	nop
 8005f5a:	e002      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005f5c:	bf00      	nop
 8005f5e:	e000      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d109      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f68:	4b77      	ldr	r3, [pc, #476]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f74:	4974      	ldr	r1, [pc, #464]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	650b      	str	r3, [r1, #80]	; 0x50
 8005f7a:	e001      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
 8005f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d053      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f92:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005f96:	d034      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005f98:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005f9c:	d82e      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fa2:	d030      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fa8:	d828      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fae:	d02c      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb4:	d822      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005fb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fba:	d028      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005fbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fc0:	d81c      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fc6:	d010      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fcc:	d816      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d01f      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fd6:	d111      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	2101      	movs	r1, #1
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 fd02 	bl	80079e8 <RCCEx_PLL2_Config>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005fe8:	e014      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3324      	adds	r3, #36	; 0x24
 8005fee:	2101      	movs	r1, #1
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 fdab 	bl	8007b4c <RCCEx_PLL3_Config>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005ffa:	e00b      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8006000:	e008      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006002:	bf00      	nop
 8006004:	e006      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006006:	bf00      	nop
 8006008:	e004      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800600a:	bf00      	nop
 800600c:	e002      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800600e:	bf00      	nop
 8006010:	e000      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800601a:	4b4b      	ldr	r3, [pc, #300]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006028:	4947      	ldr	r1, [pc, #284]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800602a:	4313      	orrs	r3, r2
 800602c:	658b      	str	r3, [r1, #88]	; 0x58
 800602e:	e001      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006030:	7dfb      	ldrb	r3, [r7, #23]
 8006032:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d02f      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006048:	d00e      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800604a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800604e:	d814      	bhi.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006050:	2b00      	cmp	r3, #0
 8006052:	d015      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006058:	d10f      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800605a:	4b3b      	ldr	r3, [pc, #236]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605e:	4a3a      	ldr	r2, [pc, #232]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006064:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006066:	e00c      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3304      	adds	r3, #4
 800606c:	2101      	movs	r1, #1
 800606e:	4618      	mov	r0, r3
 8006070:	f001 fcba 	bl	80079e8 <RCCEx_PLL2_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006078:	e003      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	75fb      	strb	r3, [r7, #23]
      break;
 800607e:	e000      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8006080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006082:	7dfb      	ldrb	r3, [r7, #23]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d109      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006088:	4b2f      	ldr	r3, [pc, #188]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800608a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006094:	492c      	ldr	r1, [pc, #176]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006096:	4313      	orrs	r3, r2
 8006098:	650b      	str	r3, [r1, #80]	; 0x50
 800609a:	e001      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d032      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d81b      	bhi.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x590>
 80060b4:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	080060f3 	.word	0x080060f3
 80060c0:	080060cd 	.word	0x080060cd
 80060c4:	080060db 	.word	0x080060db
 80060c8:	080060f3 	.word	0x080060f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060cc:	4b1e      	ldr	r3, [pc, #120]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80060d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80060d8:	e00c      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3304      	adds	r3, #4
 80060de:	2102      	movs	r1, #2
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 fc81 	bl	80079e8 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80060ea:	e003      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	75fb      	strb	r3, [r7, #23]
      break;
 80060f0:	e000      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 80060f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80060fa:	4b13      	ldr	r3, [pc, #76]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80060fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fe:	f023 0203 	bic.w	r2, r3, #3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006106:	4910      	ldr	r1, [pc, #64]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006108:	4313      	orrs	r3, r2
 800610a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800610c:	e001      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610e:	7dfb      	ldrb	r3, [r7, #23]
 8006110:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 808a 	beq.w	8006234 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006120:	4b0a      	ldr	r3, [pc, #40]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a09      	ldr	r2, [pc, #36]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800612a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800612c:	f7fb f98c 	bl	8001448 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006132:	e00d      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006134:	f7fb f988 	bl	8001448 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b64      	cmp	r3, #100	; 0x64
 8006140:	d906      	bls.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	75fb      	strb	r3, [r7, #23]
        break;
 8006146:	e009      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8006148:	58024400 	.word	0x58024400
 800614c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006150:	4bba      	ldr	r3, [pc, #744]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0eb      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d166      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006162:	4bb7      	ldr	r3, [pc, #732]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006164:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800616c:	4053      	eors	r3, r2
 800616e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006172:	2b00      	cmp	r3, #0
 8006174:	d013      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006176:	4bb2      	ldr	r3, [pc, #712]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006180:	4baf      	ldr	r3, [pc, #700]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006184:	4aae      	ldr	r2, [pc, #696]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800618c:	4bac      	ldr	r3, [pc, #688]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800618e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006190:	4aab      	ldr	r2, [pc, #684]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006196:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006198:	4aa9      	ldr	r2, [pc, #676]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a8:	d115      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061aa:	f7fb f94d 	bl	8001448 <HAL_GetTick>
 80061ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061b0:	e00b      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b2:	f7fb f949 	bl	8001448 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d902      	bls.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	75fb      	strb	r3, [r7, #23]
            break;
 80061c8:	e005      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061ca:	4b9d      	ldr	r3, [pc, #628]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80061cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0ed      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d126      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ea:	d10d      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80061ec:	4b94      	ldr	r3, [pc, #592]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061fa:	0919      	lsrs	r1, r3, #4
 80061fc:	4b91      	ldr	r3, [pc, #580]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80061fe:	400b      	ands	r3, r1
 8006200:	498f      	ldr	r1, [pc, #572]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006202:	4313      	orrs	r3, r2
 8006204:	610b      	str	r3, [r1, #16]
 8006206:	e005      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8006208:	4b8d      	ldr	r3, [pc, #564]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	4a8c      	ldr	r2, [pc, #560]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800620e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006212:	6113      	str	r3, [r2, #16]
 8006214:	4b8a      	ldr	r3, [pc, #552]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800621e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006222:	4987      	ldr	r1, [pc, #540]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006224:	4313      	orrs	r3, r2
 8006226:	670b      	str	r3, [r1, #112]	; 0x70
 8006228:	e004      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800622a:	7dfb      	ldrb	r3, [r7, #23]
 800622c:	75bb      	strb	r3, [r7, #22]
 800622e:	e001      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d07f      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006246:	2b28      	cmp	r3, #40	; 0x28
 8006248:	d866      	bhi.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800624a:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800624c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006250:	0800631f 	.word	0x0800631f
 8006254:	08006319 	.word	0x08006319
 8006258:	08006319 	.word	0x08006319
 800625c:	08006319 	.word	0x08006319
 8006260:	08006319 	.word	0x08006319
 8006264:	08006319 	.word	0x08006319
 8006268:	08006319 	.word	0x08006319
 800626c:	08006319 	.word	0x08006319
 8006270:	080062f5 	.word	0x080062f5
 8006274:	08006319 	.word	0x08006319
 8006278:	08006319 	.word	0x08006319
 800627c:	08006319 	.word	0x08006319
 8006280:	08006319 	.word	0x08006319
 8006284:	08006319 	.word	0x08006319
 8006288:	08006319 	.word	0x08006319
 800628c:	08006319 	.word	0x08006319
 8006290:	08006307 	.word	0x08006307
 8006294:	08006319 	.word	0x08006319
 8006298:	08006319 	.word	0x08006319
 800629c:	08006319 	.word	0x08006319
 80062a0:	08006319 	.word	0x08006319
 80062a4:	08006319 	.word	0x08006319
 80062a8:	08006319 	.word	0x08006319
 80062ac:	08006319 	.word	0x08006319
 80062b0:	0800631f 	.word	0x0800631f
 80062b4:	08006319 	.word	0x08006319
 80062b8:	08006319 	.word	0x08006319
 80062bc:	08006319 	.word	0x08006319
 80062c0:	08006319 	.word	0x08006319
 80062c4:	08006319 	.word	0x08006319
 80062c8:	08006319 	.word	0x08006319
 80062cc:	08006319 	.word	0x08006319
 80062d0:	0800631f 	.word	0x0800631f
 80062d4:	08006319 	.word	0x08006319
 80062d8:	08006319 	.word	0x08006319
 80062dc:	08006319 	.word	0x08006319
 80062e0:	08006319 	.word	0x08006319
 80062e4:	08006319 	.word	0x08006319
 80062e8:	08006319 	.word	0x08006319
 80062ec:	08006319 	.word	0x08006319
 80062f0:	0800631f 	.word	0x0800631f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3304      	adds	r3, #4
 80062f8:	2101      	movs	r1, #1
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 fb74 	bl	80079e8 <RCCEx_PLL2_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006304:	e00c      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3324      	adds	r3, #36	; 0x24
 800630a:	2101      	movs	r1, #1
 800630c:	4618      	mov	r0, r3
 800630e:	f001 fc1d 	bl	8007b4c <RCCEx_PLL3_Config>
 8006312:	4603      	mov	r3, r0
 8006314:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006316:	e003      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]
      break;
 800631c:	e000      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800631e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006326:	4b46      	ldr	r3, [pc, #280]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006334:	4942      	ldr	r1, [pc, #264]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006336:	4313      	orrs	r3, r2
 8006338:	654b      	str	r3, [r1, #84]	; 0x54
 800633a:	e001      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d038      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006350:	2b05      	cmp	r3, #5
 8006352:	d821      	bhi.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006354:	a201      	add	r2, pc, #4	; (adr r2, 800635c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	0800639f 	.word	0x0800639f
 8006360:	08006375 	.word	0x08006375
 8006364:	08006387 	.word	0x08006387
 8006368:	0800639f 	.word	0x0800639f
 800636c:	0800639f 	.word	0x0800639f
 8006370:	0800639f 	.word	0x0800639f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3304      	adds	r3, #4
 8006378:	2101      	movs	r1, #1
 800637a:	4618      	mov	r0, r3
 800637c:	f001 fb34 	bl	80079e8 <RCCEx_PLL2_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006384:	e00c      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3324      	adds	r3, #36	; 0x24
 800638a:	2101      	movs	r1, #1
 800638c:	4618      	mov	r0, r3
 800638e:	f001 fbdd 	bl	8007b4c <RCCEx_PLL3_Config>
 8006392:	4603      	mov	r3, r0
 8006394:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006396:	e003      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	75fb      	strb	r3, [r7, #23]
      break;
 800639c:	e000      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800639e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80063a6:	4b26      	ldr	r3, [pc, #152]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063aa:	f023 0207 	bic.w	r2, r3, #7
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063b2:	4923      	ldr	r1, [pc, #140]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	654b      	str	r3, [r1, #84]	; 0x54
 80063b8:	e001      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
 80063bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d040      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063d0:	2b05      	cmp	r3, #5
 80063d2:	d821      	bhi.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80063d4:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	0800641f 	.word	0x0800641f
 80063e0:	080063f5 	.word	0x080063f5
 80063e4:	08006407 	.word	0x08006407
 80063e8:	0800641f 	.word	0x0800641f
 80063ec:	0800641f 	.word	0x0800641f
 80063f0:	0800641f 	.word	0x0800641f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3304      	adds	r3, #4
 80063f8:	2101      	movs	r1, #1
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 faf4 	bl	80079e8 <RCCEx_PLL2_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006404:	e00c      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3324      	adds	r3, #36	; 0x24
 800640a:	2101      	movs	r1, #1
 800640c:	4618      	mov	r0, r3
 800640e:	f001 fb9d 	bl	8007b4c <RCCEx_PLL3_Config>
 8006412:	4603      	mov	r3, r0
 8006414:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006416:	e003      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	75fb      	strb	r3, [r7, #23]
      break;
 800641c:	e000      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800641e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006420:	7dfb      	ldrb	r3, [r7, #23]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d110      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006426:	4b06      	ldr	r3, [pc, #24]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642a:	f023 0207 	bic.w	r2, r3, #7
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006434:	4902      	ldr	r1, [pc, #8]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006436:	4313      	orrs	r3, r2
 8006438:	658b      	str	r3, [r1, #88]	; 0x58
 800643a:	e007      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800643c:	58024800 	.word	0x58024800
 8006440:	58024400 	.word	0x58024400
 8006444:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d04b      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800645e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006462:	d02e      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006468:	d828      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646e:	d02a      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006474:	d822      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006476:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800647a:	d026      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800647c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006480:	d81c      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006486:	d010      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800648c:	d816      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01d      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006496:	d111      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3304      	adds	r3, #4
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f001 faa2 	bl	80079e8 <RCCEx_PLL2_Config>
 80064a4:	4603      	mov	r3, r0
 80064a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80064a8:	e012      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3324      	adds	r3, #36	; 0x24
 80064ae:	2102      	movs	r1, #2
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 fb4b 	bl	8007b4c <RCCEx_PLL3_Config>
 80064b6:	4603      	mov	r3, r0
 80064b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80064ba:	e009      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	75fb      	strb	r3, [r7, #23]
      break;
 80064c0:	e006      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80064c2:	bf00      	nop
 80064c4:	e004      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80064c6:	bf00      	nop
 80064c8:	e002      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80064ca:	bf00      	nop
 80064cc:	e000      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80064ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064d6:	4bb3      	ldr	r3, [pc, #716]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80064d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e4:	49af      	ldr	r1, [pc, #700]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	654b      	str	r3, [r1, #84]	; 0x54
 80064ea:	e001      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ec:	7dfb      	ldrb	r3, [r7, #23]
 80064ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d04b      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006502:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006506:	d02e      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006508:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800650c:	d828      	bhi.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800650e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006512:	d02a      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006518:	d822      	bhi.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800651a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800651e:	d026      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006524:	d81c      	bhi.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800652a:	d010      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800652c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006530:	d816      	bhi.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d01d      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653a:	d111      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3304      	adds	r3, #4
 8006540:	2100      	movs	r1, #0
 8006542:	4618      	mov	r0, r3
 8006544:	f001 fa50 	bl	80079e8 <RCCEx_PLL2_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800654c:	e012      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3324      	adds	r3, #36	; 0x24
 8006552:	2102      	movs	r1, #2
 8006554:	4618      	mov	r0, r3
 8006556:	f001 faf9 	bl	8007b4c <RCCEx_PLL3_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800655e:	e009      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	75fb      	strb	r3, [r7, #23]
      break;
 8006564:	e006      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006566:	bf00      	nop
 8006568:	e004      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800656a:	bf00      	nop
 800656c:	e002      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800656e:	bf00      	nop
 8006570:	e000      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10a      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800657a:	4b8a      	ldr	r3, [pc, #552]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800657c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006588:	4986      	ldr	r1, [pc, #536]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800658a:	4313      	orrs	r3, r2
 800658c:	658b      	str	r3, [r1, #88]	; 0x58
 800658e:	e001      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006590:	7dfb      	ldrb	r3, [r7, #23]
 8006592:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659c:	2b00      	cmp	r3, #0
 800659e:	d04b      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80065a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80065aa:	d02e      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80065ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80065b0:	d828      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80065b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b6:	d02a      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80065b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065bc:	d822      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80065be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80065c2:	d026      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80065c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80065c8:	d81c      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80065ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065ce:	d010      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80065d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065d4:	d816      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d01d      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80065da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065de:	d111      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	2100      	movs	r1, #0
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 f9fe 	bl	80079e8 <RCCEx_PLL2_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80065f0:	e012      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3324      	adds	r3, #36	; 0x24
 80065f6:	2102      	movs	r1, #2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 faa7 	bl	8007b4c <RCCEx_PLL3_Config>
 80065fe:	4603      	mov	r3, r0
 8006600:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006602:	e009      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	75fb      	strb	r3, [r7, #23]
      break;
 8006608:	e006      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800660a:	bf00      	nop
 800660c:	e004      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800660e:	bf00      	nop
 8006610:	e002      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006612:	bf00      	nop
 8006614:	e000      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006618:	7dfb      	ldrb	r3, [r7, #23]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800661e:	4b61      	ldr	r3, [pc, #388]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800662c:	495d      	ldr	r1, [pc, #372]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800662e:	4313      	orrs	r3, r2
 8006630:	658b      	str	r3, [r1, #88]	; 0x58
 8006632:	e001      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006634:	7dfb      	ldrb	r3, [r7, #23]
 8006636:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01a      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664e:	d10a      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3324      	adds	r3, #36	; 0x24
 8006654:	2102      	movs	r1, #2
 8006656:	4618      	mov	r0, r3
 8006658:	f001 fa78 	bl	8007b4c <RCCEx_PLL3_Config>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006666:	4b4f      	ldr	r3, [pc, #316]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006674:	494b      	ldr	r1, [pc, #300]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006676:	4313      	orrs	r3, r2
 8006678:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0310 	and.w	r3, r3, #16
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01a      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800668c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006690:	d10a      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3324      	adds	r3, #36	; 0x24
 8006696:	2102      	movs	r1, #2
 8006698:	4618      	mov	r0, r3
 800669a:	f001 fa57 	bl	8007b4c <RCCEx_PLL3_Config>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066a8:	4b3e      	ldr	r3, [pc, #248]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80066aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066b6:	493b      	ldr	r1, [pc, #236]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d034      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066d2:	d01d      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80066d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066d8:	d817      	bhi.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80066de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e2:	d009      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80066e4:	e011      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3304      	adds	r3, #4
 80066ea:	2100      	movs	r1, #0
 80066ec:	4618      	mov	r0, r3
 80066ee:	f001 f97b 	bl	80079e8 <RCCEx_PLL2_Config>
 80066f2:	4603      	mov	r3, r0
 80066f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80066f6:	e00c      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3324      	adds	r3, #36	; 0x24
 80066fc:	2102      	movs	r1, #2
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 fa24 	bl	8007b4c <RCCEx_PLL3_Config>
 8006704:	4603      	mov	r3, r0
 8006706:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006708:	e003      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
      break;
 800670e:	e000      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8006710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006718:	4b22      	ldr	r3, [pc, #136]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800671a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006726:	491f      	ldr	r1, [pc, #124]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006728:	4313      	orrs	r3, r2
 800672a:	658b      	str	r3, [r1, #88]	; 0x58
 800672c:	e001      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d036      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006744:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006748:	d01c      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800674a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800674e:	d816      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006754:	d003      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8006756:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800675a:	d007      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800675c:	e00f      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800675e:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	4a10      	ldr	r2, [pc, #64]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006768:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800676a:	e00c      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3324      	adds	r3, #36	; 0x24
 8006770:	2101      	movs	r1, #1
 8006772:	4618      	mov	r0, r3
 8006774:	f001 f9ea 	bl	8007b4c <RCCEx_PLL3_Config>
 8006778:	4603      	mov	r3, r0
 800677a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800677c:	e003      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	75fb      	strb	r3, [r7, #23]
      break;
 8006782:	e000      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006786:	7dfb      	ldrb	r3, [r7, #23]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10d      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800678e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006790:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800679a:	4902      	ldr	r1, [pc, #8]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800679c:	4313      	orrs	r3, r2
 800679e:	654b      	str	r3, [r1, #84]	; 0x54
 80067a0:	e004      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80067a2:	bf00      	nop
 80067a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
 80067aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d029      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80067c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c4:	d007      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80067c6:	e00f      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c8:	4b69      	ldr	r3, [pc, #420]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	4a68      	ldr	r2, [pc, #416]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80067d4:	e00b      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3304      	adds	r3, #4
 80067da:	2102      	movs	r1, #2
 80067dc:	4618      	mov	r0, r3
 80067de:	f001 f903 	bl	80079e8 <RCCEx_PLL2_Config>
 80067e2:	4603      	mov	r3, r0
 80067e4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80067e6:	e002      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	75fb      	strb	r3, [r7, #23]
      break;
 80067ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d109      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80067f4:	4b5e      	ldr	r3, [pc, #376]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006800:	495b      	ldr	r1, [pc, #364]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006802:	4313      	orrs	r3, r2
 8006804:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006806:	e001      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006808:	7dfb      	ldrb	r3, [r7, #23]
 800680a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3324      	adds	r3, #36	; 0x24
 800681c:	2102      	movs	r1, #2
 800681e:	4618      	mov	r0, r3
 8006820:	f001 f994 	bl	8007b4c <RCCEx_PLL3_Config>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d032      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006844:	d017      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8006846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800684a:	d811      	bhi.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800684c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006850:	d013      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8006852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006856:	d80b      	bhi.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d010      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800685c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006860:	d106      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006862:	4b43      	ldr	r3, [pc, #268]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006866:	4a42      	ldr	r2, [pc, #264]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800686c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800686e:	e007      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	75fb      	strb	r3, [r7, #23]
      break;
 8006874:	e004      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8006876:	bf00      	nop
 8006878:	e002      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800687a:	bf00      	nop
 800687c:	e000      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800687e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006880:	7dfb      	ldrb	r3, [r7, #23]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10a      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006886:	4b3a      	ldr	r3, [pc, #232]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006894:	4936      	ldr	r1, [pc, #216]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006896:	4313      	orrs	r3, r2
 8006898:	654b      	str	r3, [r1, #84]	; 0x54
 800689a:	e001      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689c:	7dfb      	ldrb	r3, [r7, #23]
 800689e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068ac:	4b30      	ldr	r3, [pc, #192]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80068ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068b8:	492d      	ldr	r1, [pc, #180]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d008      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068ca:	4b29      	ldr	r3, [pc, #164]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80068cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d6:	4926      	ldr	r1, [pc, #152]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d008      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80068e8:	4b21      	ldr	r3, [pc, #132]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80068ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f4:	491e      	ldr	r1, [pc, #120]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00d      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006906:	4b1a      	ldr	r3, [pc, #104]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	4a19      	ldr	r2, [pc, #100]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800690c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006910:	6113      	str	r3, [r2, #16]
 8006912:	4b17      	ldr	r3, [pc, #92]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800691c:	4914      	ldr	r1, [pc, #80]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800691e:	4313      	orrs	r3, r2
 8006920:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	da08      	bge.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800692a:	4b11      	ldr	r3, [pc, #68]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800692c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006936:	490e      	ldr	r1, [pc, #56]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006938:	4313      	orrs	r3, r2
 800693a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d009      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006948:	4b09      	ldr	r3, [pc, #36]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800694a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006956:	4906      	ldr	r1, [pc, #24]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006958:	4313      	orrs	r3, r2
 800695a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800695c:	7dbb      	ldrb	r3, [r7, #22]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	e000      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	58024400 	.word	0x58024400

08006974 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b090      	sub	sp, #64	; 0x40
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006982:	f040 8089 	bne.w	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006986:	4ba8      	ldr	r3, [pc, #672]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	633b      	str	r3, [r7, #48]	; 0x30
 8006990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006992:	2b04      	cmp	r3, #4
 8006994:	d87d      	bhi.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006996:	a201      	add	r2, pc, #4	; (adr r2, 800699c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	080069b1 	.word	0x080069b1
 80069a0:	080069d5 	.word	0x080069d5
 80069a4:	080069f9 	.word	0x080069f9
 80069a8:	08006a8d 	.word	0x08006a8d
 80069ac:	08006a1d 	.word	0x08006a1d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069b0:	4b9d      	ldr	r3, [pc, #628]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069bc:	d107      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 febe 	bl	8007744 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80069c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069cc:	e3f5      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069d2:	e3f2      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069d4:	4b94      	ldr	r3, [pc, #592]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069e0:	d107      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069e2:	f107 0318 	add.w	r3, r7, #24
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fc04 	bl	80071f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069f0:	e3e3      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069f6:	e3e0      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069f8:	4b8b      	ldr	r3, [pc, #556]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a04:	d107      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a06:	f107 030c 	add.w	r3, r7, #12
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fd46 	bl	800749c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a14:	e3d1      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a1a:	e3ce      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a1c:	4b82      	ldr	r3, [pc, #520]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a24:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a26:	4b80      	ldr	r3, [pc, #512]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d10c      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d109      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a38:	4b7b      	ldr	r3, [pc, #492]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	08db      	lsrs	r3, r3, #3
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	4a7a      	ldr	r2, [pc, #488]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a44:	fa22 f303 	lsr.w	r3, r2, r3
 8006a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a4a:	e01e      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a4c:	4b76      	ldr	r3, [pc, #472]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a58:	d106      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a60:	d102      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a62:	4b73      	ldr	r3, [pc, #460]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a66:	e010      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a68:	4b6f      	ldr	r3, [pc, #444]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a74:	d106      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a7c:	d102      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006a7e:	4b6d      	ldr	r3, [pc, #436]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a82:	e002      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006a88:	e397      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006a8a:	e396      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a8c:	4b6a      	ldr	r3, [pc, #424]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a90:	e393      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a96:	e390      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a9e:	f040 8095 	bne.w	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8006aa2:	4b61      	ldr	r3, [pc, #388]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006aaa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab2:	d04d      	beq.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aba:	f200 8084 	bhi.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	2bc0      	cmp	r3, #192	; 0xc0
 8006ac2:	d07d      	beq.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ac8:	d87d      	bhi.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	2b80      	cmp	r3, #128	; 0x80
 8006ace:	d02d      	beq.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	2b80      	cmp	r3, #128	; 0x80
 8006ad4:	d877      	bhi.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	2b40      	cmp	r3, #64	; 0x40
 8006ae0:	d012      	beq.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006ae2:	e070      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ae4:	4b50      	ldr	r3, [pc, #320]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006af0:	d107      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fe24 	bl	8007744 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b00:	e35b      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b06:	e358      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b08:	4b47      	ldr	r3, [pc, #284]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b14:	d107      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b16:	f107 0318 	add.w	r3, r7, #24
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fb6a 	bl	80071f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b24:	e349      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b2a:	e346      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b2c:	4b3e      	ldr	r3, [pc, #248]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b38:	d107      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b3a:	f107 030c 	add.w	r3, r7, #12
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fcac 	bl	800749c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b48:	e337      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b4e:	e334      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b50:	4b35      	ldr	r3, [pc, #212]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b5a:	4b33      	ldr	r3, [pc, #204]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d10c      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8006b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d109      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b6c:	4b2e      	ldr	r3, [pc, #184]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	08db      	lsrs	r3, r3, #3
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	4a2d      	ldr	r2, [pc, #180]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006b78:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b7e:	e01e      	b.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b80:	4b29      	ldr	r3, [pc, #164]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8c:	d106      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b94:	d102      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006b96:	4b26      	ldr	r3, [pc, #152]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006b98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b9a:	e010      	b.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b9c:	4b22      	ldr	r3, [pc, #136]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ba8:	d106      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb0:	d102      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006bb2:	4b20      	ldr	r3, [pc, #128]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb6:	e002      	b.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006bbc:	e2fd      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006bbe:	e2fc      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006bc0:	4b1d      	ldr	r3, [pc, #116]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bc4:	e2f9      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bca:	e2f6      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bd2:	f040 80a7 	bne.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8006bd6:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bda:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006bde:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be6:	d05f      	beq.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bee:	f200 8096 	bhi.w	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006bf8:	f000 808e 	beq.w	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c02:	f200 808c 	bhi.w	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c0c:	d03a      	beq.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c14:	f200 8083 	bhi.w	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00e      	beq.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c24:	d01c      	beq.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8006c26:	e07a      	b.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006c28:	58024400 	.word	0x58024400
 8006c2c:	03d09000 	.word	0x03d09000
 8006c30:	003d0900 	.word	0x003d0900
 8006c34:	007a1200 	.word	0x007a1200
 8006c38:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c3c:	4ba8      	ldr	r3, [pc, #672]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c48:	d107      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fd78 	bl	8007744 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c58:	e2af      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c5e:	e2ac      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c60:	4b9f      	ldr	r3, [pc, #636]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c6c:	d107      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c6e:	f107 0318 	add.w	r3, r7, #24
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fabe 	bl	80071f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c7c:	e29d      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c82:	e29a      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c84:	4b96      	ldr	r3, [pc, #600]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c90:	d107      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c92:	f107 030c 	add.w	r3, r7, #12
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fc00 	bl	800749c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ca0:	e28b      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ca6:	e288      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ca8:	4b8d      	ldr	r3, [pc, #564]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cb0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cb2:	4b8b      	ldr	r3, [pc, #556]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d10c      	bne.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d109      	bne.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cc4:	4b86      	ldr	r3, [pc, #536]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	08db      	lsrs	r3, r3, #3
 8006cca:	f003 0303 	and.w	r3, r3, #3
 8006cce:	4a85      	ldr	r2, [pc, #532]	; (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd6:	e01e      	b.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cd8:	4b81      	ldr	r3, [pc, #516]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce4:	d106      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8006ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cec:	d102      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006cee:	4b7e      	ldr	r3, [pc, #504]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cf2:	e010      	b.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cf4:	4b7a      	ldr	r3, [pc, #488]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d00:	d106      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8006d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d08:	d102      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d0a:	4b78      	ldr	r3, [pc, #480]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d0e:	e002      	b.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8006d14:	e251      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006d16:	e250      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d18:	4b75      	ldr	r3, [pc, #468]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d1c:	e24d      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d22:	e24a      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2a:	f040 809c 	bne.w	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006d2e:	4b6c      	ldr	r3, [pc, #432]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d32:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006d36:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d3e:	d054      	beq.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d46:	f200 808b 	bhi.w	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d50:	f000 8083 	beq.w	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d5a:	f200 8081 	bhi.w	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d64:	d02f      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6c:	d878      	bhi.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d004      	beq.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8006d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d7a:	d012      	beq.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8006d7c:	e070      	b.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d7e:	4b58      	ldr	r3, [pc, #352]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d8a:	d107      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fcd7 	bl	8007744 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d9a:	e20e      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006da0:	e20b      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006da2:	4b4f      	ldr	r3, [pc, #316]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dae:	d107      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006db0:	f107 0318 	add.w	r3, r7, #24
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fa1d 	bl	80071f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006dbe:	e1fc      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dc4:	e1f9      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dc6:	4b46      	ldr	r3, [pc, #280]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dd2:	d107      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dd4:	f107 030c 	add.w	r3, r7, #12
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fb5f 	bl	800749c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006de2:	e1ea      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006de8:	e1e7      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006dea:	4b3d      	ldr	r3, [pc, #244]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006df4:	4b3a      	ldr	r3, [pc, #232]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d10c      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8006e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e06:	4b36      	ldr	r3, [pc, #216]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	08db      	lsrs	r3, r3, #3
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	4a34      	ldr	r2, [pc, #208]	; (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006e12:	fa22 f303 	lsr.w	r3, r2, r3
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e18:	e01e      	b.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e1a:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e26:	d106      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8006e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e2e:	d102      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e30:	4b2d      	ldr	r3, [pc, #180]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e34:	e010      	b.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e36:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e42:	d106      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e4a:	d102      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006e4c:	4b27      	ldr	r3, [pc, #156]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e50:	e002      	b.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006e56:	e1b0      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006e58:	e1af      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e5a:	4b25      	ldr	r3, [pc, #148]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e5e:	e1ac      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e64:	e1a9      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e6c:	d17d      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006e6e:	4b1c      	ldr	r3, [pc, #112]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e76:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e7e:	d039      	beq.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8006e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e86:	d86d      	bhi.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d004      	beq.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e94:	d012      	beq.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006e96:	e065      	b.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e98:	4b11      	ldr	r3, [pc, #68]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ea4:	d107      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ea6:	f107 0318 	add.w	r3, r7, #24
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 f9a2 	bl	80071f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006eb4:	e181      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eba:	e17e      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ebc:	4b08      	ldr	r3, [pc, #32]	; (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ec8:	d107      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eca:	f107 030c 	add.w	r3, r7, #12
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fae4 	bl	800749c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ed8:	e16f      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ede:	e16c      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006ee0:	58024400 	.word	0x58024400
 8006ee4:	03d09000 	.word	0x03d09000
 8006ee8:	003d0900 	.word	0x003d0900
 8006eec:	007a1200 	.word	0x007a1200
 8006ef0:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ef4:	4ba0      	ldr	r3, [pc, #640]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006efe:	4b9e      	ldr	r3, [pc, #632]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d10c      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8006f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d109      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f10:	4b99      	ldr	r3, [pc, #612]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	08db      	lsrs	r3, r3, #3
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	4a98      	ldr	r2, [pc, #608]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f22:	e01e      	b.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f24:	4b94      	ldr	r3, [pc, #592]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f30:	d106      	bne.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f38:	d102      	bne.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006f3a:	4b91      	ldr	r3, [pc, #580]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f3e:	e010      	b.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f40:	4b8d      	ldr	r3, [pc, #564]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f4c:	d106      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f54:	d102      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006f56:	4b8b      	ldr	r3, [pc, #556]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f5a:	e002      	b.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006f60:	e12b      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006f62:	e12a      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f68:	e127      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f70:	d133      	bne.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006f72:	4b81      	ldr	r3, [pc, #516]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f7a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f88:	d012      	beq.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006f8a:	e023      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f8c:	4b7a      	ldr	r3, [pc, #488]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f98:	d107      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fbd0 	bl	8007744 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006fa8:	e107      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fae:	e104      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fb0:	4b71      	ldr	r3, [pc, #452]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fbc:	d107      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fbe:	f107 0318 	add.w	r3, r7, #24
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 f916 	bl	80071f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006fcc:	e0f5      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fd2:	e0f2      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fd8:	e0ef      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fe0:	f040 8091 	bne.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006fe4:	4b64      	ldr	r3, [pc, #400]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006fec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006ff4:	f000 8081 	beq.w	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006ffe:	d87f      	bhi.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007006:	d06b      	beq.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800700e:	d877      	bhi.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007016:	d056      	beq.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701e:	d86f      	bhi.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007022:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007026:	d03b      	beq.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800702e:	d867      	bhi.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007036:	d021      	beq.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8007038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800703e:	d85f      	bhi.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800704c:	d004      	beq.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 800704e:	e057      	b.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007050:	f000 f8ba 	bl	80071c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007054:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007056:	e0b0      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007058:	4b47      	ldr	r3, [pc, #284]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007064:	d107      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007066:	f107 0318 	add.w	r3, r7, #24
 800706a:	4618      	mov	r0, r3
 800706c:	f000 f8c2 	bl	80071f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007074:	e0a1      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800707a:	e09e      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800707c:	4b3e      	ldr	r3, [pc, #248]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007088:	d107      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800708a:	f107 030c 	add.w	r3, r7, #12
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fa04 	bl	800749c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007098:	e08f      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800709e:	e08c      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070a0:	4b35      	ldr	r3, [pc, #212]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d109      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070ac:	4b32      	ldr	r3, [pc, #200]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	08db      	lsrs	r3, r3, #3
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	4a31      	ldr	r2, [pc, #196]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80070b8:	fa22 f303 	lsr.w	r3, r2, r3
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070be:	e07c      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070c4:	e079      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80070c6:	4b2c      	ldr	r3, [pc, #176]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d2:	d102      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 80070d4:	4b2a      	ldr	r3, [pc, #168]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80070d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070d8:	e06f      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070de:	e06c      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070e0:	4b25      	ldr	r3, [pc, #148]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070ec:	d102      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 80070ee:	4b25      	ldr	r3, [pc, #148]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80070f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070f2:	e062      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070f8:	e05f      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80070fa:	4b23      	ldr	r3, [pc, #140]	; (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80070fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070fe:	e05c      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007104:	e059      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800710c:	d153      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800710e:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007112:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007116:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800711e:	d035      	beq.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007126:	d843      	bhi.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	2b00      	cmp	r3, #0
 800712c:	d004      	beq.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800712e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007134:	d00d      	beq.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8007136:	e03b      	b.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007138:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007144:	d102      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8007146:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800714a:	e036      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007150:	e033      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800715e:	d107      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007164:	4618      	mov	r0, r3
 8007166:	f000 faed 	bl	8007744 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800716e:	e024      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007174:	e021      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8007176:	bf00      	nop
 8007178:	58024400 	.word	0x58024400
 800717c:	03d09000 	.word	0x03d09000
 8007180:	003d0900 	.word	0x003d0900
 8007184:	007a1200 	.word	0x007a1200
 8007188:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800718c:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007194:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007198:	d107      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800719a:	f107 0318 	add.w	r3, r7, #24
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 f828 	bl	80071f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071a8:	e007      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ae:	e004      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b4:	e001      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80071ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3740      	adds	r7, #64	; 0x40
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	58024400 	.word	0x58024400

080071c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80071cc:	f7fe fc6a 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 80071d0:	4602      	mov	r2, r0
 80071d2:	4b06      	ldr	r3, [pc, #24]	; (80071ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	091b      	lsrs	r3, r3, #4
 80071d8:	f003 0307 	and.w	r3, r3, #7
 80071dc:	4904      	ldr	r1, [pc, #16]	; (80071f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80071de:	5ccb      	ldrb	r3, [r1, r3]
 80071e0:	f003 031f 	and.w	r3, r3, #31
 80071e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	58024400 	.word	0x58024400
 80071f0:	0800cb60 	.word	0x0800cb60

080071f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b089      	sub	sp, #36	; 0x24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071fc:	4ba1      	ldr	r3, [pc, #644]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007200:	f003 0303 	and.w	r3, r3, #3
 8007204:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007206:	4b9f      	ldr	r3, [pc, #636]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720a:	0b1b      	lsrs	r3, r3, #12
 800720c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007210:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007212:	4b9c      	ldr	r3, [pc, #624]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	091b      	lsrs	r3, r3, #4
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800721e:	4b99      	ldr	r3, [pc, #612]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007222:	08db      	lsrs	r3, r3, #3
 8007224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	fb02 f303 	mul.w	r3, r2, r3
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007236:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 8111 	beq.w	8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b02      	cmp	r3, #2
 8007246:	f000 8083 	beq.w	8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	2b02      	cmp	r3, #2
 800724e:	f200 80a1 	bhi.w	8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d056      	beq.n	800730c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800725e:	e099      	b.n	8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007260:	4b88      	ldr	r3, [pc, #544]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0320 	and.w	r3, r3, #32
 8007268:	2b00      	cmp	r3, #0
 800726a:	d02d      	beq.n	80072c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800726c:	4b85      	ldr	r3, [pc, #532]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	08db      	lsrs	r3, r3, #3
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	4a84      	ldr	r2, [pc, #528]	; (8007488 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007278:	fa22 f303 	lsr.w	r3, r2, r3
 800727c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	ee07 3a90 	vmov	s15, r3
 8007284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007296:	4b7b      	ldr	r3, [pc, #492]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800748c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80072c6:	e087      	b.n	80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80072d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072da:	4b6a      	ldr	r3, [pc, #424]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800748c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800730a:	e065      	b.n	80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007316:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800731a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731e:	4b59      	ldr	r3, [pc, #356]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007332:	eddf 5a56 	vldr	s11, [pc, #344]	; 800748c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800734e:	e043      	b.n	80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800735e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007362:	4b48      	ldr	r3, [pc, #288]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007372:	ed97 6a03 	vldr	s12, [r7, #12]
 8007376:	eddf 5a45 	vldr	s11, [pc, #276]	; 800748c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800737a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007392:	e021      	b.n	80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a6:	4b37      	ldr	r3, [pc, #220]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800748c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80073d8:	4b2a      	ldr	r3, [pc, #168]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	0a5b      	lsrs	r3, r3, #9
 80073de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073fe:	ee17 2a90 	vmov	r2, s15
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007406:	4b1f      	ldr	r3, [pc, #124]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	0c1b      	lsrs	r3, r3, #16
 800740c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007410:	ee07 3a90 	vmov	s15, r3
 8007414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800741c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007420:	edd7 6a07 	vldr	s13, [r7, #28]
 8007424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800742c:	ee17 2a90 	vmov	r2, s15
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007434:	4b13      	ldr	r3, [pc, #76]	; (8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007438:	0e1b      	lsrs	r3, r3, #24
 800743a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800744a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800744e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800745a:	ee17 2a90 	vmov	r2, s15
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007462:	e008      	b.n	8007476 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	609a      	str	r2, [r3, #8]
}
 8007476:	bf00      	nop
 8007478:	3724      	adds	r7, #36	; 0x24
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	58024400 	.word	0x58024400
 8007488:	03d09000 	.word	0x03d09000
 800748c:	46000000 	.word	0x46000000
 8007490:	4c742400 	.word	0x4c742400
 8007494:	4a742400 	.word	0x4a742400
 8007498:	4af42400 	.word	0x4af42400

0800749c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800749c:	b480      	push	{r7}
 800749e:	b089      	sub	sp, #36	; 0x24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074a4:	4ba1      	ldr	r3, [pc, #644]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80074ae:	4b9f      	ldr	r3, [pc, #636]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b2:	0d1b      	lsrs	r3, r3, #20
 80074b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80074ba:	4b9c      	ldr	r3, [pc, #624]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	0a1b      	lsrs	r3, r3, #8
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80074c6:	4b99      	ldr	r3, [pc, #612]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ca:	08db      	lsrs	r3, r3, #3
 80074cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	fb02 f303 	mul.w	r3, r2, r3
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 8111 	beq.w	800770c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	f000 8083 	beq.w	80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	f200 80a1 	bhi.w	800763c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d056      	beq.n	80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007506:	e099      	b.n	800763c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007508:	4b88      	ldr	r3, [pc, #544]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	d02d      	beq.n	8007570 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007514:	4b85      	ldr	r3, [pc, #532]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	08db      	lsrs	r3, r3, #3
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	4a84      	ldr	r2, [pc, #528]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007520:	fa22 f303 	lsr.w	r3, r2, r3
 8007524:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	ee07 3a90 	vmov	s15, r3
 800752c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753e:	4b7b      	ldr	r3, [pc, #492]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007552:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007734 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800756e:	e087      	b.n	8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007738 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800757e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007582:	4b6a      	ldr	r3, [pc, #424]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007592:	ed97 6a03 	vldr	s12, [r7, #12]
 8007596:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007734 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800759a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075b2:	e065      	b.n	8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800773c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c6:	4b59      	ldr	r3, [pc, #356]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007734 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075f6:	e043      	b.n	8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007740 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760a:	4b48      	ldr	r3, [pc, #288]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761a:	ed97 6a03 	vldr	s12, [r7, #12]
 800761e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007734 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800762e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800763a:	e021      	b.n	8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007646:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800773c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800764a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800764e:	4b37      	ldr	r3, [pc, #220]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007662:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007734 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800766e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800767e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007680:	4b2a      	ldr	r3, [pc, #168]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	0a5b      	lsrs	r3, r3, #9
 8007686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007696:	ee37 7a87 	vadd.f32	s14, s15, s14
 800769a:	edd7 6a07 	vldr	s13, [r7, #28]
 800769e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076a6:	ee17 2a90 	vmov	r2, s15
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80076ae:	4b1f      	ldr	r3, [pc, #124]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	0c1b      	lsrs	r3, r3, #16
 80076b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b8:	ee07 3a90 	vmov	s15, r3
 80076bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80076cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076d4:	ee17 2a90 	vmov	r2, s15
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80076dc:	4b13      	ldr	r3, [pc, #76]	; (800772c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e0:	0e1b      	lsrs	r3, r3, #24
 80076e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007702:	ee17 2a90 	vmov	r2, s15
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800770a:	e008      	b.n	800771e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	609a      	str	r2, [r3, #8]
}
 800771e:	bf00      	nop
 8007720:	3724      	adds	r7, #36	; 0x24
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	58024400 	.word	0x58024400
 8007730:	03d09000 	.word	0x03d09000
 8007734:	46000000 	.word	0x46000000
 8007738:	4c742400 	.word	0x4c742400
 800773c:	4a742400 	.word	0x4a742400
 8007740:	4af42400 	.word	0x4af42400

08007744 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007744:	b480      	push	{r7}
 8007746:	b089      	sub	sp, #36	; 0x24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800774c:	4ba0      	ldr	r3, [pc, #640]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800774e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007750:	f003 0303 	and.w	r3, r3, #3
 8007754:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007756:	4b9e      	ldr	r3, [pc, #632]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	091b      	lsrs	r3, r3, #4
 800775c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007760:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007762:	4b9b      	ldr	r3, [pc, #620]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800776c:	4b98      	ldr	r3, [pc, #608]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800776e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007770:	08db      	lsrs	r3, r3, #3
 8007772:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	fb02 f303 	mul.w	r3, r2, r3
 800777c:	ee07 3a90 	vmov	s15, r3
 8007780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007784:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8111 	beq.w	80079b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b02      	cmp	r3, #2
 8007794:	f000 8083 	beq.w	800789e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b02      	cmp	r3, #2
 800779c:	f200 80a1 	bhi.w	80078e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d056      	beq.n	800785a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80077ac:	e099      	b.n	80078e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077ae:	4b88      	ldr	r3, [pc, #544]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0320 	and.w	r3, r3, #32
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d02d      	beq.n	8007816 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077ba:	4b85      	ldr	r3, [pc, #532]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	08db      	lsrs	r3, r3, #3
 80077c0:	f003 0303 	and.w	r3, r3, #3
 80077c4:	4a83      	ldr	r2, [pc, #524]	; (80079d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80077c6:	fa22 f303 	lsr.w	r3, r2, r3
 80077ca:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	ee07 3a90 	vmov	s15, r3
 80077dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e4:	4b7a      	ldr	r3, [pc, #488]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ec:	ee07 3a90 	vmov	s15, r3
 80077f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80077f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80079d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007810:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007814:	e087      	b.n	8007926 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	ee07 3a90 	vmov	s15, r3
 800781c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007820:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80079dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007824:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007828:	4b69      	ldr	r3, [pc, #420]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800782a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007838:	ed97 6a03 	vldr	s12, [r7, #12]
 800783c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80079d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007840:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007844:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007848:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800784c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007854:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007858:	e065      	b.n	8007926 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	ee07 3a90 	vmov	s15, r3
 8007860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007864:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786c:	4b58      	ldr	r3, [pc, #352]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007874:	ee07 3a90 	vmov	s15, r3
 8007878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007880:	eddf 5a55 	vldr	s11, [pc, #340]	; 80079d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007898:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800789c:	e043      	b.n	8007926 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	ee07 3a90 	vmov	s15, r3
 80078a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80079e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80078ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b0:	4b47      	ldr	r3, [pc, #284]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b8:	ee07 3a90 	vmov	s15, r3
 80078bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80078c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80079d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078e0:	e021      	b.n	8007926 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	ee07 3a90 	vmov	s15, r3
 80078e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80079dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80078f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078f4:	4b36      	ldr	r3, [pc, #216]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078fc:	ee07 3a90 	vmov	s15, r3
 8007900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007904:	ed97 6a03 	vldr	s12, [r7, #12]
 8007908:	eddf 5a33 	vldr	s11, [pc, #204]	; 80079d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800790c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007910:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007918:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800791c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007920:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007924:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007926:	4b2a      	ldr	r3, [pc, #168]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	0a5b      	lsrs	r3, r3, #9
 800792c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007930:	ee07 3a90 	vmov	s15, r3
 8007934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800793c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007940:	edd7 6a07 	vldr	s13, [r7, #28]
 8007944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800794c:	ee17 2a90 	vmov	r2, s15
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007954:	4b1e      	ldr	r3, [pc, #120]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007958:	0c1b      	lsrs	r3, r3, #16
 800795a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795e:	ee07 3a90 	vmov	s15, r3
 8007962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800796a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800796e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800797a:	ee17 2a90 	vmov	r2, s15
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007982:	4b13      	ldr	r3, [pc, #76]	; (80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	0e1b      	lsrs	r3, r3, #24
 8007988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800798c:	ee07 3a90 	vmov	s15, r3
 8007990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007994:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007998:	ee37 7a87 	vadd.f32	s14, s15, s14
 800799c:	edd7 6a07 	vldr	s13, [r7, #28]
 80079a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079a8:	ee17 2a90 	vmov	r2, s15
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80079b0:	e008      	b.n	80079c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	609a      	str	r2, [r3, #8]
}
 80079c4:	bf00      	nop
 80079c6:	3724      	adds	r7, #36	; 0x24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	58024400 	.word	0x58024400
 80079d4:	03d09000 	.word	0x03d09000
 80079d8:	46000000 	.word	0x46000000
 80079dc:	4c742400 	.word	0x4c742400
 80079e0:	4a742400 	.word	0x4a742400
 80079e4:	4af42400 	.word	0x4af42400

080079e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079f6:	4b53      	ldr	r3, [pc, #332]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 80079f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d101      	bne.n	8007a06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e099      	b.n	8007b3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a06:	4b4f      	ldr	r3, [pc, #316]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a4e      	ldr	r2, [pc, #312]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007a0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a12:	f7f9 fd19 	bl	8001448 <HAL_GetTick>
 8007a16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a18:	e008      	b.n	8007a2c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007a1a:	f7f9 fd15 	bl	8001448 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d901      	bls.n	8007a2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e086      	b.n	8007b3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a2c:	4b45      	ldr	r3, [pc, #276]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1f0      	bne.n	8007a1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a38:	4b42      	ldr	r3, [pc, #264]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	031b      	lsls	r3, r3, #12
 8007a46:	493f      	ldr	r1, [pc, #252]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	628b      	str	r3, [r1, #40]	; 0x28
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	025b      	lsls	r3, r3, #9
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	431a      	orrs	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	041b      	lsls	r3, r3, #16
 8007a6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	061b      	lsls	r3, r3, #24
 8007a78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a7c:	4931      	ldr	r1, [pc, #196]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a82:	4b30      	ldr	r3, [pc, #192]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	492d      	ldr	r1, [pc, #180]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a94:	4b2b      	ldr	r3, [pc, #172]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	f023 0220 	bic.w	r2, r3, #32
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	4928      	ldr	r1, [pc, #160]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007aa6:	4b27      	ldr	r3, [pc, #156]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aaa:	4a26      	ldr	r2, [pc, #152]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007aac:	f023 0310 	bic.w	r3, r3, #16
 8007ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ab2:	4b24      	ldr	r3, [pc, #144]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ab6:	4b24      	ldr	r3, [pc, #144]	; (8007b48 <RCCEx_PLL2_Config+0x160>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	69d2      	ldr	r2, [r2, #28]
 8007abe:	00d2      	lsls	r2, r2, #3
 8007ac0:	4920      	ldr	r1, [pc, #128]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ac6:	4b1f      	ldr	r3, [pc, #124]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	4a1e      	ldr	r2, [pc, #120]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007acc:	f043 0310 	orr.w	r3, r3, #16
 8007ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d106      	bne.n	8007ae6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ad8:	4b1a      	ldr	r3, [pc, #104]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	4a19      	ldr	r2, [pc, #100]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007ade:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ae2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ae4:	e00f      	b.n	8007b06 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d106      	bne.n	8007afa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007aec:	4b15      	ldr	r3, [pc, #84]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af0:	4a14      	ldr	r2, [pc, #80]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007af6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007af8:	e005      	b.n	8007b06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007afa:	4b12      	ldr	r3, [pc, #72]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	4a11      	ldr	r2, [pc, #68]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b06:	4b0f      	ldr	r3, [pc, #60]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a0e      	ldr	r2, [pc, #56]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007b0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b12:	f7f9 fc99 	bl	8001448 <HAL_GetTick>
 8007b16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b18:	e008      	b.n	8007b2c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b1a:	f7f9 fc95 	bl	8001448 <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d901      	bls.n	8007b2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e006      	b.n	8007b3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b2c:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <RCCEx_PLL2_Config+0x15c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d0f0      	beq.n	8007b1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	58024400 	.word	0x58024400
 8007b48:	ffff0007 	.word	0xffff0007

08007b4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b5a:	4b53      	ldr	r3, [pc, #332]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d101      	bne.n	8007b6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e099      	b.n	8007c9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b6a:	4b4f      	ldr	r3, [pc, #316]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a4e      	ldr	r2, [pc, #312]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b76:	f7f9 fc67 	bl	8001448 <HAL_GetTick>
 8007b7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b7c:	e008      	b.n	8007b90 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007b7e:	f7f9 fc63 	bl	8001448 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d901      	bls.n	8007b90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e086      	b.n	8007c9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b90:	4b45      	ldr	r3, [pc, #276]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1f0      	bne.n	8007b7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b9c:	4b42      	ldr	r3, [pc, #264]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	051b      	lsls	r3, r3, #20
 8007baa:	493f      	ldr	r1, [pc, #252]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	628b      	str	r3, [r1, #40]	; 0x28
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	025b      	lsls	r3, r3, #9
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	041b      	lsls	r3, r3, #16
 8007bce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	061b      	lsls	r3, r3, #24
 8007bdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007be0:	4931      	ldr	r1, [pc, #196]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007be6:	4b30      	ldr	r3, [pc, #192]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	492d      	ldr	r1, [pc, #180]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007bf8:	4b2b      	ldr	r3, [pc, #172]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	4928      	ldr	r1, [pc, #160]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c0a:	4b27      	ldr	r3, [pc, #156]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	4a26      	ldr	r2, [pc, #152]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c16:	4b24      	ldr	r3, [pc, #144]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c1a:	4b24      	ldr	r3, [pc, #144]	; (8007cac <RCCEx_PLL3_Config+0x160>)
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	69d2      	ldr	r2, [r2, #28]
 8007c22:	00d2      	lsls	r2, r2, #3
 8007c24:	4920      	ldr	r1, [pc, #128]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c2a:	4b1f      	ldr	r3, [pc, #124]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d106      	bne.n	8007c4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	4a19      	ldr	r2, [pc, #100]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c48:	e00f      	b.n	8007c6a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d106      	bne.n	8007c5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c50:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	4a14      	ldr	r2, [pc, #80]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c5c:	e005      	b.n	8007c6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c5e:	4b12      	ldr	r3, [pc, #72]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	4a11      	ldr	r2, [pc, #68]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a0e      	ldr	r2, [pc, #56]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c76:	f7f9 fbe7 	bl	8001448 <HAL_GetTick>
 8007c7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c7c:	e008      	b.n	8007c90 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c7e:	f7f9 fbe3 	bl	8001448 <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d901      	bls.n	8007c90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e006      	b.n	8007c9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <RCCEx_PLL3_Config+0x15c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0f0      	beq.n	8007c7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	ffff0007 	.word	0xffff0007

08007cb0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08a      	sub	sp, #40	; 0x28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e075      	b.n	8007dae <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d105      	bne.n	8007cda <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7f9 f8cb 	bl	8000e70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2204      	movs	r2, #4
 8007cde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f868 	bl	8007db8 <HAL_SD_InitCard>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e05d      	b.n	8007dae <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007cf2:	f107 0308 	add.w	r3, r7, #8
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 ff6f 	bl	8008bdc <HAL_SD_GetCardStatus>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e052      	b.n	8007dae <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007d08:	7e3b      	ldrb	r3, [r7, #24]
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007d0e:	7e7b      	ldrb	r3, [r7, #25]
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d10a      	bne.n	8007d32 <HAL_SD_Init+0x82>
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d102      	bne.n	8007d28 <HAL_SD_Init+0x78>
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d004      	beq.n	8007d32 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d2e:	659a      	str	r2, [r3, #88]	; 0x58
 8007d30:	e00b      	b.n	8007d4a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d104      	bne.n	8007d44 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d40:	659a      	str	r2, [r3, #88]	; 0x58
 8007d42:	e002      	b.n	8007d4a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 f82d 	bl	8008db0 <HAL_SD_ConfigWideBusOperation>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e026      	b.n	8007dae <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007d60:	f7f9 fb72 	bl	8001448 <HAL_GetTick>
 8007d64:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007d66:	e011      	b.n	8007d8c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d68:	f7f9 fb6e 	bl	8001448 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d76:	d109      	bne.n	8007d8c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d7e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e010      	b.n	8007dae <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 f921 	bl	8008fd4 <HAL_SD_GetCardState>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d1e7      	bne.n	8007d68 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3728      	adds	r7, #40	; 0x28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
	...

08007db8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007db8:	b590      	push	{r4, r7, lr}
 8007dba:	b08d      	sub	sp, #52	; 0x34
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007dd4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007dd8:	f7fe fdcc 	bl	8006974 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ddc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007df2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e06a      	b.n	8007ece <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	0a1b      	lsrs	r3, r3, #8
 8007dfc:	4a36      	ldr	r2, [pc, #216]	; (8007ed8 <HAL_SD_InitCard+0x120>)
 8007dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007e02:	091b      	lsrs	r3, r3, #4
 8007e04:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681c      	ldr	r4, [r3, #0]
 8007e0a:	466a      	mov	r2, sp
 8007e0c:	f107 0318 	add.w	r3, r7, #24
 8007e10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007e14:	e882 0003 	stmia.w	r2, {r0, r1}
 8007e18:	f107 030c 	add.w	r3, r7, #12
 8007e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f003 fe8e 	bl	800bb40 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f003 fed1 	bl	800bbd0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007e3a:	4a28      	ldr	r2, [pc, #160]	; (8007edc <HAL_SD_InitCard+0x124>)
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e42:	3301      	adds	r3, #1
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7f9 fb0b 	bl	8001460 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 f9b0 	bl	80091b0 <SD_PowerON>
 8007e50:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e52:	6a3b      	ldr	r3, [r7, #32]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00b      	beq.n	8007e70 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e02e      	b.n	8007ece <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 f8cf 	bl	8009014 <SD_InitCard>
 8007e76:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00b      	beq.n	8007e96 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e01b      	b.n	8007ece <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f003 ff2c 	bl	800bcfc <SDMMC_CmdBlockLength>
 8007ea4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00f      	beq.n	8007ecc <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a0b      	ldr	r2, [pc, #44]	; (8007ee0 <HAL_SD_InitCard+0x128>)
 8007eb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e000      	b.n	8007ece <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	372c      	adds	r7, #44	; 0x2c
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd90      	pop	{r4, r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	014f8b59 	.word	0x014f8b59
 8007edc:	00012110 	.word	0x00012110
 8007ee0:	1fe00fff 	.word	0x1fe00fff

08007ee4 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b092      	sub	sp, #72	; 0x48
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
 8007ef0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ef2:	f7f9 faa9 	bl	8001448 <HAL_GetTick>
 8007ef6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d107      	bne.n	8007f16 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e167      	b.n	80081e6 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	f040 815a 	bne.w	80081d8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	441a      	add	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d907      	bls.n	8007f48 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e14e      	b.n	80081e6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2203      	movs	r2, #3
 8007f4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2200      	movs	r2, #0
 8007f56:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d002      	beq.n	8007f66 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	025b      	lsls	r3, r3, #9
 8007f64:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f66:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	025b      	lsls	r3, r3, #9
 8007f70:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007f72:	2390      	movs	r3, #144	; 0x90
 8007f74:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f76:	2302      	movs	r3, #2
 8007f78:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f107 0214 	add.w	r2, r7, #20
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f003 fe89 	bl	800bca4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fa0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d90a      	bls.n	8007fbe <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2202      	movs	r2, #2
 8007fac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f003 fee7 	bl	800bd88 <SDMMC_CmdReadMultiBlock>
 8007fba:	6478      	str	r0, [r7, #68]	; 0x44
 8007fbc:	e009      	b.n	8007fd2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f003 feb9 	bl	800bd42 <SDMMC_CmdReadSingleBlock>
 8007fd0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d012      	beq.n	8007ffe <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a84      	ldr	r2, [pc, #528]	; (80081f0 <HAL_SD_ReadBlocks+0x30c>)
 8007fde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e0f3      	b.n	80081e6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008002:	e058      	b.n	80080b6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d033      	beq.n	800807a <HAL_SD_ReadBlocks+0x196>
 8008012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008014:	2b1f      	cmp	r3, #31
 8008016:	d930      	bls.n	800807a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8008018:	2300      	movs	r3, #0
 800801a:	643b      	str	r3, [r7, #64]	; 0x40
 800801c:	e027      	b.n	800806e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4618      	mov	r0, r3
 8008024:	f003 fdb6 	bl	800bb94 <SDMMC_ReadFIFO>
 8008028:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	b2da      	uxtb	r2, r3
 800802e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008030:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008034:	3301      	adds	r3, #1
 8008036:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803a:	0a1b      	lsrs	r3, r3, #8
 800803c:	b2da      	uxtb	r2, r3
 800803e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008040:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008044:	3301      	adds	r3, #1
 8008046:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	0c1b      	lsrs	r3, r3, #16
 800804c:	b2da      	uxtb	r2, r3
 800804e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008050:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008054:	3301      	adds	r3, #1
 8008056:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805a:	0e1b      	lsrs	r3, r3, #24
 800805c:	b2da      	uxtb	r2, r3
 800805e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008060:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008064:	3301      	adds	r3, #1
 8008066:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8008068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800806a:	3301      	adds	r3, #1
 800806c:	643b      	str	r3, [r7, #64]	; 0x40
 800806e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008070:	2b07      	cmp	r3, #7
 8008072:	d9d4      	bls.n	800801e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008076:	3b20      	subs	r3, #32
 8008078:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800807a:	f7f9 f9e5 	bl	8001448 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008086:	429a      	cmp	r2, r3
 8008088:	d902      	bls.n	8008090 <HAL_SD_ReadBlocks+0x1ac>
 800808a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800808c:	2b00      	cmp	r3, #0
 800808e:	d112      	bne.n	80080b6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a56      	ldr	r2, [pc, #344]	; (80081f0 <HAL_SD_ReadBlocks+0x30c>)
 8008096:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800809c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e097      	b.n	80081e6 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080bc:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d09f      	beq.n	8008004 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080d2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d022      	beq.n	8008128 <HAL_SD_ReadBlocks+0x244>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d91f      	bls.n	8008128 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d01b      	beq.n	8008128 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f003 feb1 	bl	800be5c <SDMMC_CmdStopTransfer>
 80080fa:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80080fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d012      	beq.n	8008128 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a3a      	ldr	r2, [pc, #232]	; (80081f0 <HAL_SD_ReadBlocks+0x30c>)
 8008108:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800810e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008110:	431a      	orrs	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e05e      	b.n	80081e6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800812e:	f003 0308 	and.w	r3, r3, #8
 8008132:	2b00      	cmp	r3, #0
 8008134:	d012      	beq.n	800815c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a2d      	ldr	r2, [pc, #180]	; (80081f0 <HAL_SD_ReadBlocks+0x30c>)
 800813c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008142:	f043 0208 	orr.w	r2, r3, #8
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e044      	b.n	80081e6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008162:	f003 0302 	and.w	r3, r3, #2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d012      	beq.n	8008190 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a20      	ldr	r2, [pc, #128]	; (80081f0 <HAL_SD_ReadBlocks+0x30c>)
 8008170:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008176:	f043 0202 	orr.w	r2, r3, #2
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e02a      	b.n	80081e6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b00      	cmp	r3, #0
 800819c:	d012      	beq.n	80081c4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a13      	ldr	r2, [pc, #76]	; (80081f0 <HAL_SD_ReadBlocks+0x30c>)
 80081a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081aa:	f043 0220 	orr.w	r2, r3, #32
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e010      	b.n	80081e6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a0a      	ldr	r2, [pc, #40]	; (80081f4 <HAL_SD_ReadBlocks+0x310>)
 80081ca:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	e006      	b.n	80081e6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
  }
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3748      	adds	r7, #72	; 0x48
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	1fe00fff 	.word	0x1fe00fff
 80081f4:	18000f3a 	.word	0x18000f3a

080081f8 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b092      	sub	sp, #72	; 0x48
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008206:	f7f9 f91f 	bl	8001448 <HAL_GetTick>
 800820a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d107      	bne.n	800822a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e16b      	b.n	8008502 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b01      	cmp	r3, #1
 8008234:	f040 815e 	bne.w	80084f4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800823e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	441a      	add	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008248:	429a      	cmp	r2, r3
 800824a:	d907      	bls.n	800825c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008250:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e152      	b.n	8008502 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2203      	movs	r2, #3
 8008260:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2200      	movs	r2, #0
 800826a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008270:	2b01      	cmp	r3, #1
 8008272:	d002      	beq.n	800827a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008276:	025b      	lsls	r3, r3, #9
 8008278:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800827a:	f04f 33ff 	mov.w	r3, #4294967295
 800827e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	025b      	lsls	r3, r3, #9
 8008284:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008286:	2390      	movs	r3, #144	; 0x90
 8008288:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800828a:	2300      	movs	r3, #0
 800828c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800828e:	2300      	movs	r3, #0
 8008290:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008292:	2300      	movs	r3, #0
 8008294:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f107 0218 	add.w	r2, r7, #24
 800829e:	4611      	mov	r1, r2
 80082a0:	4618      	mov	r0, r3
 80082a2:	f003 fcff 	bl	800bca4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d90a      	bls.n	80082d2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2220      	movs	r2, #32
 80082c0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082c8:	4618      	mov	r0, r3
 80082ca:	f003 fda3 	bl	800be14 <SDMMC_CmdWriteMultiBlock>
 80082ce:	6478      	str	r0, [r7, #68]	; 0x44
 80082d0:	e009      	b.n	80082e6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2210      	movs	r2, #16
 80082d6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082de:	4618      	mov	r0, r3
 80082e0:	f003 fd75 	bl	800bdce <SDMMC_CmdWriteSingleBlock>
 80082e4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80082e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d012      	beq.n	8008312 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a86      	ldr	r2, [pc, #536]	; (800850c <HAL_SD_WriteBlocks+0x314>)
 80082f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082fa:	431a      	orrs	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e0f7      	b.n	8008502 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008316:	e05c      	b.n	80083d2 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d037      	beq.n	8008396 <HAL_SD_WriteBlocks+0x19e>
 8008326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008328:	2b1f      	cmp	r3, #31
 800832a:	d934      	bls.n	8008396 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800832c:	2300      	movs	r3, #0
 800832e:	643b      	str	r3, [r7, #64]	; 0x40
 8008330:	e02b      	b.n	800838a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833a:	3301      	adds	r3, #1
 800833c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800833e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	021a      	lsls	r2, r3, #8
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	4313      	orrs	r3, r2
 8008348:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800834a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834c:	3301      	adds	r3, #1
 800834e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	041a      	lsls	r2, r3, #16
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	4313      	orrs	r3, r2
 800835a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800835c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835e:	3301      	adds	r3, #1
 8008360:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	061a      	lsls	r2, r3, #24
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	4313      	orrs	r3, r2
 800836c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800836e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008370:	3301      	adds	r3, #1
 8008372:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f107 0214 	add.w	r2, r7, #20
 800837c:	4611      	mov	r1, r2
 800837e:	4618      	mov	r0, r3
 8008380:	f003 fc15 	bl	800bbae <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8008384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008386:	3301      	adds	r3, #1
 8008388:	643b      	str	r3, [r7, #64]	; 0x40
 800838a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800838c:	2b07      	cmp	r3, #7
 800838e:	d9d0      	bls.n	8008332 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008392:	3b20      	subs	r3, #32
 8008394:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008396:	f7f9 f857 	bl	8001448 <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d902      	bls.n	80083ac <HAL_SD_WriteBlocks+0x1b4>
 80083a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d112      	bne.n	80083d2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a56      	ldr	r2, [pc, #344]	; (800850c <HAL_SD_WriteBlocks+0x314>)
 80083b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ba:	431a      	orrs	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e097      	b.n	8008502 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d09b      	beq.n	8008318 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083ee:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d022      	beq.n	8008444 <HAL_SD_WriteBlocks+0x24c>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d91f      	bls.n	8008444 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008408:	2b03      	cmp	r3, #3
 800840a:	d01b      	beq.n	8008444 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f003 fd23 	bl	800be5c <SDMMC_CmdStopTransfer>
 8008416:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800841a:	2b00      	cmp	r3, #0
 800841c:	d012      	beq.n	8008444 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a3a      	ldr	r2, [pc, #232]	; (800850c <HAL_SD_WriteBlocks+0x314>)
 8008424:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800842a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800842c:	431a      	orrs	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e05e      	b.n	8008502 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844a:	f003 0308 	and.w	r3, r3, #8
 800844e:	2b00      	cmp	r3, #0
 8008450:	d012      	beq.n	8008478 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a2d      	ldr	r2, [pc, #180]	; (800850c <HAL_SD_WriteBlocks+0x314>)
 8008458:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845e:	f043 0208 	orr.w	r2, r3, #8
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e044      	b.n	8008502 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b00      	cmp	r3, #0
 8008484:	d012      	beq.n	80084ac <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a20      	ldr	r2, [pc, #128]	; (800850c <HAL_SD_WriteBlocks+0x314>)
 800848c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008492:	f043 0202 	orr.w	r2, r3, #2
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e02a      	b.n	8008502 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b2:	f003 0310 	and.w	r3, r3, #16
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d012      	beq.n	80084e0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a13      	ldr	r2, [pc, #76]	; (800850c <HAL_SD_WriteBlocks+0x314>)
 80084c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c6:	f043 0210 	orr.w	r2, r3, #16
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e010      	b.n	8008502 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a0a      	ldr	r2, [pc, #40]	; (8008510 <HAL_SD_WriteBlocks+0x318>)
 80084e6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	e006      	b.n	8008502 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
  }
}
 8008502:	4618      	mov	r0, r3
 8008504:	3748      	adds	r7, #72	; 0x48
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	1fe00fff 	.word	0x1fe00fff
 8008510:	18000f3a 	.word	0x18000f3a

08008514 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008520:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d008      	beq.n	8008542 <HAL_SD_IRQHandler+0x2e>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f001 f924 	bl	8009788 <SD_Read_IT>
 8008540:	e19a      	b.n	8008878 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 80ac 	beq.w	80086aa <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800855a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	4b9d      	ldr	r3, [pc, #628]	; (80087dc <HAL_SD_IRQHandler+0x2c8>)
 8008568:	400b      	ands	r3, r1
 800856a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800857a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800858a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f003 0308 	and.w	r3, r3, #8
 8008592:	2b00      	cmp	r3, #0
 8008594:	d038      	beq.n	8008608 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f003 0302 	and.w	r3, r3, #2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <HAL_SD_IRQHandler+0x96>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f003 0320 	and.w	r3, r3, #32
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d011      	beq.n	80085ce <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f003 fc54 	bl	800be5c <SDMMC_CmdStopTransfer>
 80085b4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d008      	beq.n	80085ce <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	431a      	orrs	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f959 	bl	8008880 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a83      	ldr	r2, [pc, #524]	; (80087e0 <HAL_SD_IRQHandler+0x2cc>)
 80085d4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d104      	bne.n	80085f8 <HAL_SD_IRQHandler+0xe4>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f004 f8f9 	bl	800c7f0 <HAL_SD_RxCpltCallback>
 80085fe:	e13b      	b.n	8008878 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f004 f8eb 	bl	800c7dc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008606:	e137      	b.n	8008878 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 8132 	beq.w	8008878 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2200      	movs	r2, #0
 800861a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2200      	movs	r2, #0
 8008622:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2200      	movs	r2, #0
 800862a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f003 0302 	and.w	r3, r3, #2
 8008632:	2b00      	cmp	r3, #0
 8008634:	d104      	bne.n	8008640 <HAL_SD_IRQHandler+0x12c>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f003 0320 	and.w	r3, r3, #32
 800863c:	2b00      	cmp	r3, #0
 800863e:	d011      	beq.n	8008664 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4618      	mov	r0, r3
 8008646:	f003 fc09 	bl	800be5c <SDMMC_CmdStopTransfer>
 800864a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d008      	beq.n	8008664 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	431a      	orrs	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f90e 	bl	8008880 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f003 0310 	and.w	r3, r3, #16
 8008678:	2b00      	cmp	r3, #0
 800867a:	d104      	bne.n	8008686 <HAL_SD_IRQHandler+0x172>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f003 0320 	and.w	r3, r3, #32
 8008682:	2b00      	cmp	r3, #0
 8008684:	d002      	beq.n	800868c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f004 f8a8 	bl	800c7dc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d105      	bne.n	80086a2 <HAL_SD_IRQHandler+0x18e>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80eb 	beq.w	8008878 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f004 f8a4 	bl	800c7f0 <HAL_SD_RxCpltCallback>
}
 80086a8:	e0e6      	b.n	8008878 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d008      	beq.n	80086ca <HAL_SD_IRQHandler+0x1b6>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f003 0308 	and.w	r3, r3, #8
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 f8a6 	bl	8009814 <SD_Write_IT>
 80086c8:	e0d6      	b.n	8008878 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d0:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 80a2 	beq.w	800881e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ec:	f043 0202 	orr.w	r2, r3, #2
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fa:	f003 0308 	and.w	r3, r3, #8
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008706:	f043 0208 	orr.w	r2, r3, #8
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008714:	f003 0320 	and.w	r3, r3, #32
 8008718:	2b00      	cmp	r3, #0
 800871a:	d005      	beq.n	8008728 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008720:	f043 0220 	orr.w	r2, r3, #32
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872e:	f003 0310 	and.w	r3, r3, #16
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873a:	f043 0210 	orr.w	r2, r3, #16
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a26      	ldr	r2, [pc, #152]	; (80087e0 <HAL_SD_IRQHandler+0x2cc>)
 8008748:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008758:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68da      	ldr	r2, [r3, #12]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008768:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008778:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008788:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4618      	mov	r0, r3
 8008790:	f003 fb64 	bl	800be5c <SDMMC_CmdStopTransfer>
 8008794:	4602      	mov	r2, r0
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087ae:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087b8:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f003 0308 	and.w	r3, r3, #8
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00f      	beq.n	80087e4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f854 	bl	8008880 <HAL_SD_ErrorCallback>
}
 80087d8:	e04e      	b.n	8008878 <HAL_SD_IRQHandler+0x364>
 80087da:	bf00      	nop
 80087dc:	ffff3ec5 	.word	0xffff3ec5
 80087e0:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d044      	beq.n	8008878 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d040      	beq.n	8008878 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008804:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2200      	movs	r2, #0
 800880c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f832 	bl	8008880 <HAL_SD_ErrorCallback>
}
 800881c:	e02c      	b.n	8008878 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d025      	beq.n	8008878 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008834:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10c      	bne.n	800885e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f003 0320 	and.w	r3, r3, #32
 800884a:	2b00      	cmp	r3, #0
 800884c:	d003      	beq.n	8008856 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 f848 	bl	80098e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008854:	e010      	b.n	8008878 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f001 f830 	bl	80098bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800885c:	e00c      	b.n	8008878 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f003 0320 	and.w	r3, r3, #32
 8008864:	2b00      	cmp	r3, #0
 8008866:	d003      	beq.n	8008870 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f001 f831 	bl	80098d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800886e:	e003      	b.n	8008878 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 f819 	bl	80098a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008876:	e7ff      	b.n	8008878 <HAL_SD_IRQHandler+0x364>
 8008878:	bf00      	nop
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088a2:	0f9b      	lsrs	r3, r3, #30
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ae:	0e9b      	lsrs	r3, r3, #26
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f003 030f 	and.w	r3, r3, #15
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c0:	0e1b      	lsrs	r3, r3, #24
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	f003 0303 	and.w	r3, r3, #3
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d2:	0c1b      	lsrs	r3, r3, #16
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088de:	0a1b      	lsrs	r3, r3, #8
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f4:	0d1b      	lsrs	r3, r3, #20
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008900:	0c1b      	lsrs	r3, r3, #16
 8008902:	b2db      	uxtb	r3, r3
 8008904:	f003 030f 	and.w	r3, r3, #15
 8008908:	b2da      	uxtb	r2, r3
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008912:	0bdb      	lsrs	r3, r3, #15
 8008914:	b2db      	uxtb	r3, r3
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008924:	0b9b      	lsrs	r3, r3, #14
 8008926:	b2db      	uxtb	r3, r3
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	b2da      	uxtb	r2, r3
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008936:	0b5b      	lsrs	r3, r3, #13
 8008938:	b2db      	uxtb	r3, r3
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	b2da      	uxtb	r2, r3
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008948:	0b1b      	lsrs	r3, r3, #12
 800894a:	b2db      	uxtb	r3, r3
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	b2da      	uxtb	r2, r3
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2200      	movs	r2, #0
 800895a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008960:	2b00      	cmp	r3, #0
 8008962:	d163      	bne.n	8008a2c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008968:	009a      	lsls	r2, r3, #2
 800896a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800896e:	4013      	ands	r3, r2
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008974:	0f92      	lsrs	r2, r2, #30
 8008976:	431a      	orrs	r2, r3
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008980:	0edb      	lsrs	r3, r3, #27
 8008982:	b2db      	uxtb	r3, r3
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	b2da      	uxtb	r2, r3
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008992:	0e1b      	lsrs	r3, r3, #24
 8008994:	b2db      	uxtb	r3, r3
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	b2da      	uxtb	r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089a4:	0d5b      	lsrs	r3, r3, #21
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b6:	0c9b      	lsrs	r3, r3, #18
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089c8:	0bdb      	lsrs	r3, r3, #15
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	f003 0307 	and.w	r3, r3, #7
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	7e1b      	ldrb	r3, [r3, #24]
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	3302      	adds	r3, #2
 80089ec:	2201      	movs	r2, #1
 80089ee:	fa02 f303 	lsl.w	r3, r2, r3
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80089f6:	fb02 f203 	mul.w	r2, r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	7a1b      	ldrb	r3, [r3, #8]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	f003 030f 	and.w	r3, r3, #15
 8008a08:	2201      	movs	r2, #1
 8008a0a:	409a      	lsls	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008a18:	0a52      	lsrs	r2, r2, #9
 8008a1a:	fb02 f203 	mul.w	r2, r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a28:	655a      	str	r2, [r3, #84]	; 0x54
 8008a2a:	e031      	b.n	8008a90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d11d      	bne.n	8008a70 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a38:	041b      	lsls	r3, r3, #16
 8008a3a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a42:	0c1b      	lsrs	r3, r3, #16
 8008a44:	431a      	orrs	r2, r3
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	029a      	lsls	r2, r3, #10
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a64:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	655a      	str	r2, [r3, #84]	; 0x54
 8008a6e:	e00f      	b.n	8008a90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a58      	ldr	r2, [pc, #352]	; (8008bd8 <HAL_SD_GetCardCSD+0x344>)
 8008a76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e09d      	b.n	8008bcc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a94:	0b9b      	lsrs	r3, r3, #14
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	f003 0301 	and.w	r3, r3, #1
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aa6:	09db      	lsrs	r3, r3, #7
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ac8:	0fdb      	lsrs	r3, r3, #31
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ad4:	0f5b      	lsrs	r3, r3, #29
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	f003 0303 	and.w	r3, r3, #3
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ae6:	0e9b      	lsrs	r3, r3, #26
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008af8:	0d9b      	lsrs	r3, r3, #22
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	f003 030f 	and.w	r3, r3, #15
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b0a:	0d5b      	lsrs	r3, r3, #21
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b26:	0c1b      	lsrs	r3, r3, #16
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b3a:	0bdb      	lsrs	r3, r3, #15
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b4e:	0b9b      	lsrs	r3, r3, #14
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b62:	0b5b      	lsrs	r3, r3, #13
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b76:	0b1b      	lsrs	r3, r3, #12
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b8a:	0a9b      	lsrs	r3, r3, #10
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f003 0303 	and.w	r3, r3, #3
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b9e:	0a1b      	lsrs	r3, r3, #8
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bb2:	085b      	lsrs	r3, r3, #1
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	1fe00fff 	.word	0x1fe00fff

08008bdc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b094      	sub	sp, #80	; 0x50
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d101      	bne.n	8008bfc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e0a7      	b.n	8008d4c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008bfc:	f107 0308 	add.w	r3, r7, #8
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fb62 	bl	80092cc <SD_SendSDStatus>
 8008c08:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d011      	beq.n	8008c34 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a4f      	ldr	r2, [pc, #316]	; (8008d54 <HAL_SD_GetCardStatus+0x178>)
 8008c16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008c32:	e070      	b.n	8008d16 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	099b      	lsrs	r3, r3, #6
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	095b      	lsrs	r3, r3, #5
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	0a1b      	lsrs	r3, r3, #8
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	0e1b      	lsrs	r3, r3, #24
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	4313      	orrs	r3, r2
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	061a      	lsls	r2, r3, #24
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	021b      	lsls	r3, r3, #8
 8008c76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c7a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	0a1b      	lsrs	r3, r3, #8
 8008c80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c84:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	0e1b      	lsrs	r3, r3, #24
 8008c8a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	0a1b      	lsrs	r3, r3, #8
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	0d1b      	lsrs	r3, r3, #20
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	f003 030f 	and.w	r3, r3, #15
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	0c1b      	lsrs	r3, r3, #16
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	0a9b      	lsrs	r3, r3, #10
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	0a1b      	lsrs	r3, r3, #8
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	f003 0303 	and.w	r3, r3, #3
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	091b      	lsrs	r3, r3, #4
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	f003 030f 	and.w	r3, r3, #15
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	f003 030f 	and.w	r3, r3, #15
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	0e1b      	lsrs	r3, r3, #24
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f002 ffec 	bl	800bcfc <SDMMC_CmdBlockLength>
 8008d24:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00d      	beq.n	8008d48 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a08      	ldr	r2, [pc, #32]	; (8008d54 <HAL_SD_GetCardStatus+0x178>)
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d38:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008d48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3750      	adds	r7, #80	; 0x50
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	1fe00fff 	.word	0x1fe00fff

08008d58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008db0:	b590      	push	{r4, r7, lr}
 8008db2:	b08d      	sub	sp, #52	; 0x34
 8008db4:	af02      	add	r7, sp, #8
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2203      	movs	r2, #3
 8008dc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	d02e      	beq.n	8008e32 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dda:	d106      	bne.n	8008dea <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	635a      	str	r2, [r3, #52]	; 0x34
 8008de8:	e029      	b.n	8008e3e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008df0:	d10a      	bne.n	8008e08 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fb62 	bl	80094bc <SD_WideBus_Enable>
 8008df8:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	431a      	orrs	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	635a      	str	r2, [r3, #52]	; 0x34
 8008e06:	e01a      	b.n	8008e3e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10a      	bne.n	8008e24 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fb9f 	bl	8009552 <SD_WideBus_Disable>
 8008e14:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	431a      	orrs	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	635a      	str	r2, [r3, #52]	; 0x34
 8008e22:	e00c      	b.n	8008e3e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	635a      	str	r2, [r3, #52]	; 0x34
 8008e30:	e005      	b.n	8008e3e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e36:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d007      	beq.n	8008e56 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a5e      	ldr	r2, [pc, #376]	; (8008fc4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008e4c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e54:	e094      	b.n	8008f80 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008e56:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008e5a:	f7fd fd8b 	bl	8006974 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e5e:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8008e60:	6a3b      	ldr	r3, [r7, #32]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 8083 	beq.w	8008f6e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	695a      	ldr	r2, [r3, #20]
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	4950      	ldr	r1, [pc, #320]	; (8008fc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e86:	fba1 1303 	umull	r1, r3, r1, r3
 8008e8a:	0e1b      	lsrs	r3, r3, #24
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d303      	bcc.n	8008e98 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	61bb      	str	r3, [r7, #24]
 8008e96:	e05a      	b.n	8008f4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea0:	d103      	bne.n	8008eaa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	61bb      	str	r3, [r7, #24]
 8008ea8:	e051      	b.n	8008f4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb2:	d126      	bne.n	8008f02 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10e      	bne.n	8008eda <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	4a43      	ldr	r2, [pc, #268]	; (8008fcc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d906      	bls.n	8008ed2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	4a40      	ldr	r2, [pc, #256]	; (8008fc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ecc:	0e5b      	lsrs	r3, r3, #25
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	e03d      	b.n	8008f4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	61bb      	str	r3, [r7, #24]
 8008ed8:	e039      	b.n	8008f4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	005b      	lsls	r3, r3, #1
 8008ee0:	6a3a      	ldr	r2, [r7, #32]
 8008ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee6:	4a39      	ldr	r2, [pc, #228]	; (8008fcc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d906      	bls.n	8008efa <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	4a36      	ldr	r2, [pc, #216]	; (8008fc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef4:	0e5b      	lsrs	r3, r3, #25
 8008ef6:	61bb      	str	r3, [r7, #24]
 8008ef8:	e029      	b.n	8008f4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	61bb      	str	r3, [r7, #24]
 8008f00:	e025      	b.n	8008f4e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10e      	bne.n	8008f28 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	4a30      	ldr	r2, [pc, #192]	; (8008fd0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d906      	bls.n	8008f20 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	4a2c      	ldr	r2, [pc, #176]	; (8008fc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008f16:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1a:	0e1b      	lsrs	r3, r3, #24
 8008f1c:	61bb      	str	r3, [r7, #24]
 8008f1e:	e016      	b.n	8008f4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	61bb      	str	r3, [r7, #24]
 8008f26:	e012      	b.n	8008f4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	6a3a      	ldr	r2, [r7, #32]
 8008f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f34:	4a26      	ldr	r2, [pc, #152]	; (8008fd0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d906      	bls.n	8008f48 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	4a22      	ldr	r2, [pc, #136]	; (8008fc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f42:	0e1b      	lsrs	r3, r3, #24
 8008f44:	61bb      	str	r3, [r7, #24]
 8008f46:	e002      	b.n	8008f4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681c      	ldr	r4, [r3, #0]
 8008f52:	466a      	mov	r2, sp
 8008f54:	f107 0314 	add.w	r3, r7, #20
 8008f58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008f5c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008f60:	f107 0308 	add.w	r3, r7, #8
 8008f64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f66:	4620      	mov	r0, r4
 8008f68:	f002 fdea 	bl	800bb40 <SDMMC_Init>
 8008f6c:	e008      	b.n	8008f80 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f002 feb7 	bl	800bcfc <SDMMC_CmdBlockLength>
 8008f8e:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00c      	beq.n	8008fb0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a0a      	ldr	r2, [pc, #40]	; (8008fc4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008f9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	372c      	adds	r7, #44	; 0x2c
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd90      	pop	{r4, r7, pc}
 8008fc4:	1fe00fff 	.word	0x1fe00fff
 8008fc8:	55e63b89 	.word	0x55e63b89
 8008fcc:	02faf080 	.word	0x02faf080
 8008fd0:	017d7840 	.word	0x017d7840

08008fd4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008fe0:	f107 030c 	add.w	r3, r7, #12
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fa40 	bl	800946c <SD_SendStatus>
 8008fec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d005      	beq.n	8009000 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	431a      	orrs	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	0a5b      	lsrs	r3, r3, #9
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800900a:	693b      	ldr	r3, [r7, #16]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b090      	sub	sp, #64	; 0x40
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800901c:	2300      	movs	r3, #0
 800901e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009020:	f7f8 fa12 	bl	8001448 <HAL_GetTick>
 8009024:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4618      	mov	r0, r3
 800902c:	f002 fde1 	bl	800bbf2 <SDMMC_GetPowerState>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d102      	bne.n	800903c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009036:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800903a:	e0b5      	b.n	80091a8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009040:	2b03      	cmp	r3, #3
 8009042:	d02e      	beq.n	80090a2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4618      	mov	r0, r3
 800904a:	f003 f82c 	bl	800c0a6 <SDMMC_CmdSendCID>
 800904e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <SD_InitCard+0x46>
    {
      return errorstate;
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	e0a6      	b.n	80091a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2100      	movs	r1, #0
 8009060:	4618      	mov	r0, r3
 8009062:	f002 fe0c 	bl	800bc7e <SDMMC_GetResponse>
 8009066:	4602      	mov	r2, r0
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2104      	movs	r1, #4
 8009072:	4618      	mov	r0, r3
 8009074:	f002 fe03 	bl	800bc7e <SDMMC_GetResponse>
 8009078:	4602      	mov	r2, r0
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2108      	movs	r1, #8
 8009084:	4618      	mov	r0, r3
 8009086:	f002 fdfa 	bl	800bc7e <SDMMC_GetResponse>
 800908a:	4602      	mov	r2, r0
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	210c      	movs	r1, #12
 8009096:	4618      	mov	r0, r3
 8009098:	f002 fdf1 	bl	800bc7e <SDMMC_GetResponse>
 800909c:	4602      	mov	r2, r0
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d01d      	beq.n	80090e6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80090aa:	e019      	b.n	80090e0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f107 020a 	add.w	r2, r7, #10
 80090b4:	4611      	mov	r1, r2
 80090b6:	4618      	mov	r0, r3
 80090b8:	f003 f834 	bl	800c124 <SDMMC_CmdSetRelAdd>
 80090bc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80090be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80090c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c6:	e06f      	b.n	80091a8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80090c8:	f7f8 f9be 	bl	8001448 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	f241 3287 	movw	r2, #4999	; 0x1387
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d902      	bls.n	80090e0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80090da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090de:	e063      	b.n	80091a8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80090e0:	897b      	ldrh	r3, [r7, #10]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0e2      	beq.n	80090ac <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d036      	beq.n	800915c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80090ee:	897b      	ldrh	r3, [r7, #10]
 80090f0:	461a      	mov	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fe:	041b      	lsls	r3, r3, #16
 8009100:	4619      	mov	r1, r3
 8009102:	4610      	mov	r0, r2
 8009104:	f002 ffee 	bl	800c0e4 <SDMMC_CmdSendCSD>
 8009108:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <SD_InitCard+0x100>
    {
      return errorstate;
 8009110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009112:	e049      	b.n	80091a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2100      	movs	r1, #0
 800911a:	4618      	mov	r0, r3
 800911c:	f002 fdaf 	bl	800bc7e <SDMMC_GetResponse>
 8009120:	4602      	mov	r2, r0
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2104      	movs	r1, #4
 800912c:	4618      	mov	r0, r3
 800912e:	f002 fda6 	bl	800bc7e <SDMMC_GetResponse>
 8009132:	4602      	mov	r2, r0
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2108      	movs	r1, #8
 800913e:	4618      	mov	r0, r3
 8009140:	f002 fd9d 	bl	800bc7e <SDMMC_GetResponse>
 8009144:	4602      	mov	r2, r0
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	210c      	movs	r1, #12
 8009150:	4618      	mov	r0, r3
 8009152:	f002 fd94 	bl	800bc7e <SDMMC_GetResponse>
 8009156:	4602      	mov	r2, r0
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2104      	movs	r1, #4
 8009162:	4618      	mov	r0, r3
 8009164:	f002 fd8b 	bl	800bc7e <SDMMC_GetResponse>
 8009168:	4603      	mov	r3, r0
 800916a:	0d1a      	lsrs	r2, r3, #20
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009170:	f107 030c 	add.w	r3, r7, #12
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7ff fb8c 	bl	8008894 <HAL_SD_GetCardCSD>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d002      	beq.n	8009188 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009182:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009186:	e00f      	b.n	80091a8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009190:	041b      	lsls	r3, r3, #16
 8009192:	4619      	mov	r1, r3
 8009194:	4610      	mov	r0, r2
 8009196:	f002 fe9d 	bl	800bed4 <SDMMC_CmdSelDesel>
 800919a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <SD_InitCard+0x192>
  {
    return errorstate;
 80091a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a4:	e000      	b.n	80091a8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3740      	adds	r7, #64	; 0x40
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80091bc:	2300      	movs	r3, #0
 80091be:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f002 fea6 	bl	800bf1a <SDMMC_CmdGoIdleState>
 80091ce:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <SD_PowerON+0x2a>
  {
    return errorstate;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	e072      	b.n	80092c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4618      	mov	r0, r3
 80091e0:	f002 feb9 	bl	800bf56 <SDMMC_CmdOperCond>
 80091e4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091ec:	d10d      	bne.n	800920a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f002 fe8e 	bl	800bf1a <SDMMC_CmdGoIdleState>
 80091fe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d004      	beq.n	8009210 <SD_PowerON+0x60>
    {
      return errorstate;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	e05a      	b.n	80092c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009214:	2b01      	cmp	r3, #1
 8009216:	d137      	bne.n	8009288 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2100      	movs	r1, #0
 800921e:	4618      	mov	r0, r3
 8009220:	f002 feb9 	bl	800bf96 <SDMMC_CmdAppCommand>
 8009224:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d02d      	beq.n	8009288 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800922c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009230:	e046      	b.n	80092c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f002 feac 	bl	800bf96 <SDMMC_CmdAppCommand>
 800923e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <SD_PowerON+0x9a>
    {
      return errorstate;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	e03a      	b.n	80092c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	491e      	ldr	r1, [pc, #120]	; (80092c8 <SD_PowerON+0x118>)
 8009250:	4618      	mov	r0, r3
 8009252:	f002 fec3 	bl	800bfdc <SDMMC_CmdAppOperCommand>
 8009256:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800925e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009262:	e02d      	b.n	80092c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2100      	movs	r1, #0
 800926a:	4618      	mov	r0, r3
 800926c:	f002 fd07 	bl	800bc7e <SDMMC_GetResponse>
 8009270:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	0fdb      	lsrs	r3, r3, #31
 8009276:	2b01      	cmp	r3, #1
 8009278:	d101      	bne.n	800927e <SD_PowerON+0xce>
 800927a:	2301      	movs	r3, #1
 800927c:	e000      	b.n	8009280 <SD_PowerON+0xd0>
 800927e:	2300      	movs	r3, #0
 8009280:	613b      	str	r3, [r7, #16]

    count++;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	3301      	adds	r3, #1
 8009286:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800928e:	4293      	cmp	r3, r2
 8009290:	d802      	bhi.n	8009298 <SD_PowerON+0xe8>
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d0cc      	beq.n	8009232 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800929e:	4293      	cmp	r3, r2
 80092a0:	d902      	bls.n	80092a8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80092a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092a6:	e00b      	b.n	80092c0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	c1100000 	.word	0xc1100000

080092cc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08c      	sub	sp, #48	; 0x30
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80092d6:	f7f8 f8b7 	bl	8001448 <HAL_GetTick>
 80092da:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2100      	movs	r1, #0
 80092e6:	4618      	mov	r0, r3
 80092e8:	f002 fcc9 	bl	800bc7e <SDMMC_GetResponse>
 80092ec:	4603      	mov	r3, r0
 80092ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092f6:	d102      	bne.n	80092fe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092fc:	e0b0      	b.n	8009460 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2140      	movs	r1, #64	; 0x40
 8009304:	4618      	mov	r0, r3
 8009306:	f002 fcf9 	bl	800bcfc <SDMMC_CmdBlockLength>
 800930a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d005      	beq.n	800931e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	e0a0      	b.n	8009460 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009326:	041b      	lsls	r3, r3, #16
 8009328:	4619      	mov	r1, r3
 800932a:	4610      	mov	r0, r2
 800932c:	f002 fe33 	bl	800bf96 <SDMMC_CmdAppCommand>
 8009330:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	e08d      	b.n	8009460 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009344:	f04f 33ff 	mov.w	r3, #4294967295
 8009348:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800934a:	2340      	movs	r3, #64	; 0x40
 800934c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800934e:	2360      	movs	r3, #96	; 0x60
 8009350:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009352:	2302      	movs	r3, #2
 8009354:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009356:	2300      	movs	r3, #0
 8009358:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800935a:	2301      	movs	r3, #1
 800935c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f107 0208 	add.w	r2, r7, #8
 8009366:	4611      	mov	r1, r2
 8009368:	4618      	mov	r0, r3
 800936a:	f002 fc9b 	bl	800bca4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4618      	mov	r0, r3
 8009374:	f002 ff1b 	bl	800c1ae <SDMMC_CmdStatusRegister>
 8009378:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800937a:	6a3b      	ldr	r3, [r7, #32]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d02b      	beq.n	80093d8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	e069      	b.n	8009460 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d013      	beq.n	80093c2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800939a:	2300      	movs	r3, #0
 800939c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800939e:	e00d      	b.n	80093bc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f002 fbf5 	bl	800bb94 <SDMMC_ReadFIFO>
 80093aa:	4602      	mov	r2, r0
 80093ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ae:	601a      	str	r2, [r3, #0]
        pData++;
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	3304      	adds	r3, #4
 80093b4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80093b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b8:	3301      	adds	r3, #1
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	2b07      	cmp	r3, #7
 80093c0:	d9ee      	bls.n	80093a0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80093c2:	f7f8 f841 	bl	8001448 <HAL_GetTick>
 80093c6:	4602      	mov	r2, r0
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d0:	d102      	bne.n	80093d8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80093d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093d6:	e043      	b.n	8009460 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093de:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0d2      	beq.n	800938c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ec:	f003 0308 	and.w	r3, r3, #8
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80093f4:	2308      	movs	r3, #8
 80093f6:	e033      	b.n	8009460 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fe:	f003 0302 	and.w	r3, r3, #2
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009406:	2302      	movs	r3, #2
 8009408:	e02a      	b.n	8009460 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b00      	cmp	r3, #0
 8009416:	d017      	beq.n	8009448 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009418:	2320      	movs	r3, #32
 800941a:	e021      	b.n	8009460 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4618      	mov	r0, r3
 8009422:	f002 fbb7 	bl	800bb94 <SDMMC_ReadFIFO>
 8009426:	4602      	mov	r2, r0
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	601a      	str	r2, [r3, #0]
    pData++;
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	3304      	adds	r3, #4
 8009430:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009432:	f7f8 f809 	bl	8001448 <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009440:	d102      	bne.n	8009448 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009442:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009446:	e00b      	b.n	8009460 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1e2      	bne.n	800941c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a03      	ldr	r2, [pc, #12]	; (8009468 <SD_SendSDStatus+0x19c>)
 800945c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3730      	adds	r7, #48	; 0x30
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	18000f3a 	.word	0x18000f3a

0800946c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d102      	bne.n	8009482 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800947c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009480:	e018      	b.n	80094b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800948a:	041b      	lsls	r3, r3, #16
 800948c:	4619      	mov	r1, r3
 800948e:	4610      	mov	r0, r2
 8009490:	f002 fe6a 	bl	800c168 <SDMMC_CmdSendStatus>
 8009494:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	e009      	b.n	80094b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f002 fbe9 	bl	800bc7e <SDMMC_GetResponse>
 80094ac:	4602      	mov	r2, r0
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	2300      	movs	r3, #0
 80094ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2100      	movs	r1, #0
 80094d2:	4618      	mov	r0, r3
 80094d4:	f002 fbd3 	bl	800bc7e <SDMMC_GetResponse>
 80094d8:	4603      	mov	r3, r0
 80094da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094e2:	d102      	bne.n	80094ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80094e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094e8:	e02f      	b.n	800954a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80094ea:	f107 030c 	add.w	r3, r7, #12
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f879 	bl	80095e8 <SD_FindSCR>
 80094f6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	e023      	b.n	800954a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d01c      	beq.n	8009546 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009514:	041b      	lsls	r3, r3, #16
 8009516:	4619      	mov	r1, r3
 8009518:	4610      	mov	r0, r2
 800951a:	f002 fd3c 	bl	800bf96 <SDMMC_CmdAppCommand>
 800951e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	e00f      	b.n	800954a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2102      	movs	r1, #2
 8009530:	4618      	mov	r0, r3
 8009532:	f002 fd73 	bl	800c01c <SDMMC_CmdBusWidth>
 8009536:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	e003      	b.n	800954a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009542:	2300      	movs	r3, #0
 8009544:	e001      	b.n	800954a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009546:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800954a:	4618      	mov	r0, r3
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b086      	sub	sp, #24
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	2300      	movs	r3, #0
 8009560:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2100      	movs	r1, #0
 8009568:	4618      	mov	r0, r3
 800956a:	f002 fb88 	bl	800bc7e <SDMMC_GetResponse>
 800956e:	4603      	mov	r3, r0
 8009570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009578:	d102      	bne.n	8009580 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800957a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800957e:	e02f      	b.n	80095e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009580:	f107 030c 	add.w	r3, r7, #12
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f82e 	bl	80095e8 <SD_FindSCR>
 800958c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	e023      	b.n	80095e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d01c      	beq.n	80095dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095aa:	041b      	lsls	r3, r3, #16
 80095ac:	4619      	mov	r1, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	f002 fcf1 	bl	800bf96 <SDMMC_CmdAppCommand>
 80095b4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	e00f      	b.n	80095e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2100      	movs	r1, #0
 80095c6:	4618      	mov	r0, r3
 80095c8:	f002 fd28 	bl	800c01c <SDMMC_CmdBusWidth>
 80095cc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	e003      	b.n	80095e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80095d8:	2300      	movs	r3, #0
 80095da:	e001      	b.n	80095e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08e      	sub	sp, #56	; 0x38
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80095f2:	f7f7 ff29 	bl	8001448 <HAL_GetTick>
 80095f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80095fc:	2300      	movs	r3, #0
 80095fe:	60bb      	str	r3, [r7, #8]
 8009600:	2300      	movs	r3, #0
 8009602:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2108      	movs	r1, #8
 800960e:	4618      	mov	r0, r3
 8009610:	f002 fb74 	bl	800bcfc <SDMMC_CmdBlockLength>
 8009614:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <SD_FindSCR+0x38>
  {
    return errorstate;
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	e0ad      	b.n	800977c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009628:	041b      	lsls	r3, r3, #16
 800962a:	4619      	mov	r1, r3
 800962c:	4610      	mov	r0, r2
 800962e:	f002 fcb2 	bl	800bf96 <SDMMC_CmdAppCommand>
 8009632:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <SD_FindSCR+0x56>
  {
    return errorstate;
 800963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963c:	e09e      	b.n	800977c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800963e:	f04f 33ff 	mov.w	r3, #4294967295
 8009642:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009644:	2308      	movs	r3, #8
 8009646:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009648:	2330      	movs	r3, #48	; 0x30
 800964a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800964c:	2302      	movs	r3, #2
 800964e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009650:	2300      	movs	r3, #0
 8009652:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009654:	2301      	movs	r3, #1
 8009656:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f107 0210 	add.w	r2, r7, #16
 8009660:	4611      	mov	r1, r2
 8009662:	4618      	mov	r0, r3
 8009664:	f002 fb1e 	bl	800bca4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4618      	mov	r0, r3
 800966e:	f002 fcf8 	bl	800c062 <SDMMC_CmdSendSCR>
 8009672:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	2b00      	cmp	r3, #0
 8009678:	d027      	beq.n	80096ca <SD_FindSCR+0xe2>
  {
    return errorstate;
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	e07e      	b.n	800977c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d113      	bne.n	80096b4 <SD_FindSCR+0xcc>
 800968c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968e:	2b00      	cmp	r3, #0
 8009690:	d110      	bne.n	80096b4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4618      	mov	r0, r3
 8009698:	f002 fa7c 	bl	800bb94 <SDMMC_ReadFIFO>
 800969c:	4603      	mov	r3, r0
 800969e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f002 fa75 	bl	800bb94 <SDMMC_ReadFIFO>
 80096aa:	4603      	mov	r3, r0
 80096ac:	60fb      	str	r3, [r7, #12]
      index++;
 80096ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b0:	3301      	adds	r3, #1
 80096b2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80096b4:	f7f7 fec8 	bl	8001448 <HAL_GetTick>
 80096b8:	4602      	mov	r2, r0
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c2:	d102      	bne.n	80096ca <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80096c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096c8:	e058      	b.n	800977c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096d0:	f240 532a 	movw	r3, #1322	; 0x52a
 80096d4:	4013      	ands	r3, r2
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d0d1      	beq.n	800967e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e0:	f003 0308 	and.w	r3, r3, #8
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d005      	beq.n	80096f4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2208      	movs	r2, #8
 80096ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80096f0:	2308      	movs	r3, #8
 80096f2:	e043      	b.n	800977c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fa:	f003 0302 	and.w	r3, r3, #2
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d005      	beq.n	800970e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2202      	movs	r2, #2
 8009708:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800970a:	2302      	movs	r3, #2
 800970c:	e036      	b.n	800977c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	d005      	beq.n	8009728 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2220      	movs	r2, #32
 8009722:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009724:	2320      	movs	r3, #32
 8009726:	e029      	b.n	800977c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a15      	ldr	r2, [pc, #84]	; (8009784 <SD_FindSCR+0x19c>)
 800972e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	061a      	lsls	r2, r3, #24
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	021b      	lsls	r3, r3, #8
 8009738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800973c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	0a1b      	lsrs	r3, r3, #8
 8009742:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009746:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	0e1b      	lsrs	r3, r3, #24
 800974c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800974e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009750:	601a      	str	r2, [r3, #0]
    scr++;
 8009752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009754:	3304      	adds	r3, #4
 8009756:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	061a      	lsls	r2, r3, #24
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	021b      	lsls	r3, r3, #8
 8009760:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009764:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	0a1b      	lsrs	r3, r3, #8
 800976a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800976e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	0e1b      	lsrs	r3, r3, #24
 8009774:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009778:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3738      	adds	r7, #56	; 0x38
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	18000f3a 	.word	0x18000f3a

08009788 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009794:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979a:	2b1f      	cmp	r3, #31
 800979c:	d936      	bls.n	800980c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800979e:	2300      	movs	r3, #0
 80097a0:	617b      	str	r3, [r7, #20]
 80097a2:	e027      	b.n	80097f4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f002 f9f3 	bl	800bb94 <SDMMC_ReadFIFO>
 80097ae:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	3301      	adds	r3, #1
 80097bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	0a1b      	lsrs	r3, r3, #8
 80097c2:	b2da      	uxtb	r2, r3
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	3301      	adds	r3, #1
 80097cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	0c1b      	lsrs	r3, r3, #16
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	3301      	adds	r3, #1
 80097dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	0e1b      	lsrs	r3, r3, #24
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	3301      	adds	r3, #1
 80097ec:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	3301      	adds	r3, #1
 80097f2:	617b      	str	r3, [r7, #20]
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	2b07      	cmp	r3, #7
 80097f8:	d9d4      	bls.n	80097a4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009804:	f1a3 0220 	sub.w	r2, r3, #32
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800980c:	bf00      	nop
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	2b1f      	cmp	r3, #31
 8009828:	d93a      	bls.n	80098a0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800982a:	2300      	movs	r3, #0
 800982c:	617b      	str	r3, [r7, #20]
 800982e:	e02b      	b.n	8009888 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	3301      	adds	r3, #1
 800983a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	021a      	lsls	r2, r3, #8
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	4313      	orrs	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	3301      	adds	r3, #1
 800984c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	041a      	lsls	r2, r3, #16
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4313      	orrs	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]
      tmp++;
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	3301      	adds	r3, #1
 800985e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	061a      	lsls	r2, r3, #24
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	4313      	orrs	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	3301      	adds	r3, #1
 8009870:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f107 020c 	add.w	r2, r7, #12
 800987a:	4611      	mov	r1, r2
 800987c:	4618      	mov	r0, r3
 800987e:	f002 f996 	bl	800bbae <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	3301      	adds	r3, #1
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	2b07      	cmp	r3, #7
 800988c:	d9d0      	bls.n	8009830 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	f1a3 0220 	sub.w	r2, r3, #32
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	621a      	str	r2, [r3, #32]
  }
}
 80098a0:	bf00      	nop
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e049      	b.n	800999e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d106      	bne.n	8009924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f89d 	bl	8009a5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2202      	movs	r2, #2
 8009928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3304      	adds	r3, #4
 8009934:	4619      	mov	r1, r3
 8009936:	4610      	mov	r0, r2
 8009938:	f000 fa9e 	bl	8009e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b082      	sub	sp, #8
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2202      	movs	r2, #2
 80099b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6a1a      	ldr	r2, [r3, #32]
 80099bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80099c0:	4013      	ands	r3, r2
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10f      	bne.n	80099e6 <HAL_TIM_Base_DeInit+0x40>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6a1a      	ldr	r2, [r3, #32]
 80099cc:	f240 4344 	movw	r3, #1092	; 0x444
 80099d0:	4013      	ands	r3, r2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d107      	bne.n	80099e6 <HAL_TIM_Base_DeInit+0x40>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f022 0201 	bic.w	r2, r2, #1
 80099e4:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f843 	bl	8009a72 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009a5e:	b480      	push	{r7}
 8009a60:	b083      	sub	sp, #12
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009a66:	bf00      	nop
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <HAL_TIM_Base_MspDeInit>:
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b083      	sub	sp, #12
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 8009a7a:	bf00      	nop
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009a86:	b480      	push	{r7}
 8009a88:	b083      	sub	sp, #12
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68da      	ldr	r2, [r3, #12]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f022 0201 	bic.w	r2, r2, #1
 8009a9c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	6a1a      	ldr	r2, [r3, #32]
 8009aa4:	f241 1311 	movw	r3, #4369	; 0x1111
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10f      	bne.n	8009ace <HAL_TIM_Base_Stop_IT+0x48>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6a1a      	ldr	r2, [r3, #32]
 8009ab4:	f240 4344 	movw	r3, #1092	; 0x444
 8009ab8:	4013      	ands	r3, r2
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d107      	bne.n	8009ace <HAL_TIM_Base_Stop_IT+0x48>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f022 0201 	bic.w	r2, r2, #1
 8009acc:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d109      	bne.n	8009b08 <HAL_TIM_OC_Start+0x24>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	bf14      	ite	ne
 8009b00:	2301      	movne	r3, #1
 8009b02:	2300      	moveq	r3, #0
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	e03c      	b.n	8009b82 <HAL_TIM_OC_Start+0x9e>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2b04      	cmp	r3, #4
 8009b0c:	d109      	bne.n	8009b22 <HAL_TIM_OC_Start+0x3e>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	bf14      	ite	ne
 8009b1a:	2301      	movne	r3, #1
 8009b1c:	2300      	moveq	r3, #0
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	e02f      	b.n	8009b82 <HAL_TIM_OC_Start+0x9e>
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	d109      	bne.n	8009b3c <HAL_TIM_OC_Start+0x58>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	bf14      	ite	ne
 8009b34:	2301      	movne	r3, #1
 8009b36:	2300      	moveq	r3, #0
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	e022      	b.n	8009b82 <HAL_TIM_OC_Start+0x9e>
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	2b0c      	cmp	r3, #12
 8009b40:	d109      	bne.n	8009b56 <HAL_TIM_OC_Start+0x72>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	bf14      	ite	ne
 8009b4e:	2301      	movne	r3, #1
 8009b50:	2300      	moveq	r3, #0
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	e015      	b.n	8009b82 <HAL_TIM_OC_Start+0x9e>
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	2b10      	cmp	r3, #16
 8009b5a:	d109      	bne.n	8009b70 <HAL_TIM_OC_Start+0x8c>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	bf14      	ite	ne
 8009b68:	2301      	movne	r3, #1
 8009b6a:	2300      	moveq	r3, #0
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	e008      	b.n	8009b82 <HAL_TIM_OC_Start+0x9e>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	bf14      	ite	ne
 8009b7c:	2301      	movne	r3, #1
 8009b7e:	2300      	moveq	r3, #0
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e0a1      	b.n	8009cce <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d104      	bne.n	8009b9a <HAL_TIM_OC_Start+0xb6>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2202      	movs	r2, #2
 8009b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b98:	e023      	b.n	8009be2 <HAL_TIM_OC_Start+0xfe>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b04      	cmp	r3, #4
 8009b9e:	d104      	bne.n	8009baa <HAL_TIM_OC_Start+0xc6>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ba8:	e01b      	b.n	8009be2 <HAL_TIM_OC_Start+0xfe>
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2b08      	cmp	r3, #8
 8009bae:	d104      	bne.n	8009bba <HAL_TIM_OC_Start+0xd6>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bb8:	e013      	b.n	8009be2 <HAL_TIM_OC_Start+0xfe>
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2b0c      	cmp	r3, #12
 8009bbe:	d104      	bne.n	8009bca <HAL_TIM_OC_Start+0xe6>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bc8:	e00b      	b.n	8009be2 <HAL_TIM_OC_Start+0xfe>
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b10      	cmp	r3, #16
 8009bce:	d104      	bne.n	8009bda <HAL_TIM_OC_Start+0xf6>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bd8:	e003      	b.n	8009be2 <HAL_TIM_OC_Start+0xfe>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2202      	movs	r2, #2
 8009bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2201      	movs	r2, #1
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f000 fe1d 	bl	800a82a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a38      	ldr	r2, [pc, #224]	; (8009cd8 <HAL_TIM_OC_Start+0x1f4>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d013      	beq.n	8009c22 <HAL_TIM_OC_Start+0x13e>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a37      	ldr	r2, [pc, #220]	; (8009cdc <HAL_TIM_OC_Start+0x1f8>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d00e      	beq.n	8009c22 <HAL_TIM_OC_Start+0x13e>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a35      	ldr	r2, [pc, #212]	; (8009ce0 <HAL_TIM_OC_Start+0x1fc>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d009      	beq.n	8009c22 <HAL_TIM_OC_Start+0x13e>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a34      	ldr	r2, [pc, #208]	; (8009ce4 <HAL_TIM_OC_Start+0x200>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d004      	beq.n	8009c22 <HAL_TIM_OC_Start+0x13e>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a32      	ldr	r2, [pc, #200]	; (8009ce8 <HAL_TIM_OC_Start+0x204>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d101      	bne.n	8009c26 <HAL_TIM_OC_Start+0x142>
 8009c22:	2301      	movs	r3, #1
 8009c24:	e000      	b.n	8009c28 <HAL_TIM_OC_Start+0x144>
 8009c26:	2300      	movs	r3, #0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d007      	beq.n	8009c3c <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a25      	ldr	r2, [pc, #148]	; (8009cd8 <HAL_TIM_OC_Start+0x1f4>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d022      	beq.n	8009c8c <HAL_TIM_OC_Start+0x1a8>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c4e:	d01d      	beq.n	8009c8c <HAL_TIM_OC_Start+0x1a8>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a25      	ldr	r2, [pc, #148]	; (8009cec <HAL_TIM_OC_Start+0x208>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d018      	beq.n	8009c8c <HAL_TIM_OC_Start+0x1a8>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a24      	ldr	r2, [pc, #144]	; (8009cf0 <HAL_TIM_OC_Start+0x20c>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d013      	beq.n	8009c8c <HAL_TIM_OC_Start+0x1a8>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a22      	ldr	r2, [pc, #136]	; (8009cf4 <HAL_TIM_OC_Start+0x210>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d00e      	beq.n	8009c8c <HAL_TIM_OC_Start+0x1a8>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a1a      	ldr	r2, [pc, #104]	; (8009cdc <HAL_TIM_OC_Start+0x1f8>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d009      	beq.n	8009c8c <HAL_TIM_OC_Start+0x1a8>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a1e      	ldr	r2, [pc, #120]	; (8009cf8 <HAL_TIM_OC_Start+0x214>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d004      	beq.n	8009c8c <HAL_TIM_OC_Start+0x1a8>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a16      	ldr	r2, [pc, #88]	; (8009ce0 <HAL_TIM_OC_Start+0x1fc>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d115      	bne.n	8009cb8 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	689a      	ldr	r2, [r3, #8]
 8009c92:	4b1a      	ldr	r3, [pc, #104]	; (8009cfc <HAL_TIM_OC_Start+0x218>)
 8009c94:	4013      	ands	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2b06      	cmp	r3, #6
 8009c9c:	d015      	beq.n	8009cca <HAL_TIM_OC_Start+0x1e6>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ca4:	d011      	beq.n	8009cca <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f042 0201 	orr.w	r2, r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cb6:	e008      	b.n	8009cca <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f042 0201 	orr.w	r2, r2, #1
 8009cc6:	601a      	str	r2, [r3, #0]
 8009cc8:	e000      	b.n	8009ccc <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	40010000 	.word	0x40010000
 8009cdc:	40010400 	.word	0x40010400
 8009ce0:	40014000 	.word	0x40014000
 8009ce4:	40014400 	.word	0x40014400
 8009ce8:	40014800 	.word	0x40014800
 8009cec:	40000400 	.word	0x40000400
 8009cf0:	40000800 	.word	0x40000800
 8009cf4:	40000c00 	.word	0x40000c00
 8009cf8:	40001800 	.word	0x40001800
 8009cfc:	00010007 	.word	0x00010007

08009d00 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d101      	bne.n	8009d1e <HAL_TIM_OC_ConfigChannel+0x1e>
 8009d1a:	2302      	movs	r3, #2
 8009d1c:	e066      	b.n	8009dec <HAL_TIM_OC_ConfigChannel+0xec>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b14      	cmp	r3, #20
 8009d2a:	d857      	bhi.n	8009ddc <HAL_TIM_OC_ConfigChannel+0xdc>
 8009d2c:	a201      	add	r2, pc, #4	; (adr r2, 8009d34 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d32:	bf00      	nop
 8009d34:	08009d89 	.word	0x08009d89
 8009d38:	08009ddd 	.word	0x08009ddd
 8009d3c:	08009ddd 	.word	0x08009ddd
 8009d40:	08009ddd 	.word	0x08009ddd
 8009d44:	08009d97 	.word	0x08009d97
 8009d48:	08009ddd 	.word	0x08009ddd
 8009d4c:	08009ddd 	.word	0x08009ddd
 8009d50:	08009ddd 	.word	0x08009ddd
 8009d54:	08009da5 	.word	0x08009da5
 8009d58:	08009ddd 	.word	0x08009ddd
 8009d5c:	08009ddd 	.word	0x08009ddd
 8009d60:	08009ddd 	.word	0x08009ddd
 8009d64:	08009db3 	.word	0x08009db3
 8009d68:	08009ddd 	.word	0x08009ddd
 8009d6c:	08009ddd 	.word	0x08009ddd
 8009d70:	08009ddd 	.word	0x08009ddd
 8009d74:	08009dc1 	.word	0x08009dc1
 8009d78:	08009ddd 	.word	0x08009ddd
 8009d7c:	08009ddd 	.word	0x08009ddd
 8009d80:	08009ddd 	.word	0x08009ddd
 8009d84:	08009dcf 	.word	0x08009dcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68b9      	ldr	r1, [r7, #8]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 f90c 	bl	8009fac <TIM_OC1_SetConfig>
      break;
 8009d94:	e025      	b.n	8009de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68b9      	ldr	r1, [r7, #8]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 f995 	bl	800a0cc <TIM_OC2_SetConfig>
      break;
 8009da2:	e01e      	b.n	8009de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68b9      	ldr	r1, [r7, #8]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fa18 	bl	800a1e0 <TIM_OC3_SetConfig>
      break;
 8009db0:	e017      	b.n	8009de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68b9      	ldr	r1, [r7, #8]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 fa99 	bl	800a2f0 <TIM_OC4_SetConfig>
      break;
 8009dbe:	e010      	b.n	8009de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68b9      	ldr	r1, [r7, #8]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 fafc 	bl	800a3c4 <TIM_OC5_SetConfig>
      break;
 8009dcc:	e009      	b.n	8009de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68b9      	ldr	r1, [r7, #8]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 fb59 	bl	800a48c <TIM_OC6_SetConfig>
      break;
 8009dda:	e002      	b.n	8009de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	75fb      	strb	r3, [r7, #23]
      break;
 8009de0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d101      	bne.n	8009e0c <HAL_TIM_SlaveConfigSynchro+0x18>
 8009e08:	2302      	movs	r3, #2
 8009e0a:	e031      	b.n	8009e70 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fb9a 	bl	800a558 <TIM_SlaveTimer_SetConfig>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d009      	beq.n	8009e3e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e018      	b.n	8009e70 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68da      	ldr	r2, [r3, #12]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e4c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68da      	ldr	r2, [r3, #12]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009e5c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a40      	ldr	r2, [pc, #256]	; (8009f8c <TIM_Base_SetConfig+0x114>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d013      	beq.n	8009eb8 <TIM_Base_SetConfig+0x40>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e96:	d00f      	beq.n	8009eb8 <TIM_Base_SetConfig+0x40>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a3d      	ldr	r2, [pc, #244]	; (8009f90 <TIM_Base_SetConfig+0x118>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d00b      	beq.n	8009eb8 <TIM_Base_SetConfig+0x40>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a3c      	ldr	r2, [pc, #240]	; (8009f94 <TIM_Base_SetConfig+0x11c>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d007      	beq.n	8009eb8 <TIM_Base_SetConfig+0x40>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a3b      	ldr	r2, [pc, #236]	; (8009f98 <TIM_Base_SetConfig+0x120>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d003      	beq.n	8009eb8 <TIM_Base_SetConfig+0x40>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a3a      	ldr	r2, [pc, #232]	; (8009f9c <TIM_Base_SetConfig+0x124>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d108      	bne.n	8009eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a2f      	ldr	r2, [pc, #188]	; (8009f8c <TIM_Base_SetConfig+0x114>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d01f      	beq.n	8009f12 <TIM_Base_SetConfig+0x9a>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ed8:	d01b      	beq.n	8009f12 <TIM_Base_SetConfig+0x9a>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a2c      	ldr	r2, [pc, #176]	; (8009f90 <TIM_Base_SetConfig+0x118>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d017      	beq.n	8009f12 <TIM_Base_SetConfig+0x9a>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a2b      	ldr	r2, [pc, #172]	; (8009f94 <TIM_Base_SetConfig+0x11c>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d013      	beq.n	8009f12 <TIM_Base_SetConfig+0x9a>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4a2a      	ldr	r2, [pc, #168]	; (8009f98 <TIM_Base_SetConfig+0x120>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d00f      	beq.n	8009f12 <TIM_Base_SetConfig+0x9a>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4a29      	ldr	r2, [pc, #164]	; (8009f9c <TIM_Base_SetConfig+0x124>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d00b      	beq.n	8009f12 <TIM_Base_SetConfig+0x9a>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a28      	ldr	r2, [pc, #160]	; (8009fa0 <TIM_Base_SetConfig+0x128>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d007      	beq.n	8009f12 <TIM_Base_SetConfig+0x9a>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a27      	ldr	r2, [pc, #156]	; (8009fa4 <TIM_Base_SetConfig+0x12c>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d003      	beq.n	8009f12 <TIM_Base_SetConfig+0x9a>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a26      	ldr	r2, [pc, #152]	; (8009fa8 <TIM_Base_SetConfig+0x130>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d108      	bne.n	8009f24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	695b      	ldr	r3, [r3, #20]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	689a      	ldr	r2, [r3, #8]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a10      	ldr	r2, [pc, #64]	; (8009f8c <TIM_Base_SetConfig+0x114>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d00f      	beq.n	8009f70 <TIM_Base_SetConfig+0xf8>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a12      	ldr	r2, [pc, #72]	; (8009f9c <TIM_Base_SetConfig+0x124>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d00b      	beq.n	8009f70 <TIM_Base_SetConfig+0xf8>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a11      	ldr	r2, [pc, #68]	; (8009fa0 <TIM_Base_SetConfig+0x128>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d007      	beq.n	8009f70 <TIM_Base_SetConfig+0xf8>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a10      	ldr	r2, [pc, #64]	; (8009fa4 <TIM_Base_SetConfig+0x12c>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d003      	beq.n	8009f70 <TIM_Base_SetConfig+0xf8>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a0f      	ldr	r2, [pc, #60]	; (8009fa8 <TIM_Base_SetConfig+0x130>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d103      	bne.n	8009f78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	691a      	ldr	r2, [r3, #16]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	615a      	str	r2, [r3, #20]
}
 8009f7e:	bf00      	nop
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	40010000 	.word	0x40010000
 8009f90:	40000400 	.word	0x40000400
 8009f94:	40000800 	.word	0x40000800
 8009f98:	40000c00 	.word	0x40000c00
 8009f9c:	40010400 	.word	0x40010400
 8009fa0:	40014000 	.word	0x40014000
 8009fa4:	40014400 	.word	0x40014400
 8009fa8:	40014800 	.word	0x40014800

08009fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b087      	sub	sp, #28
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	f023 0201 	bic.w	r2, r3, #1
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	4b37      	ldr	r3, [pc, #220]	; (800a0b4 <TIM_OC1_SetConfig+0x108>)
 8009fd8:	4013      	ands	r3, r2
 8009fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f023 0303 	bic.w	r3, r3, #3
 8009fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f023 0302 	bic.w	r3, r3, #2
 8009ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a2d      	ldr	r2, [pc, #180]	; (800a0b8 <TIM_OC1_SetConfig+0x10c>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d00f      	beq.n	800a028 <TIM_OC1_SetConfig+0x7c>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a2c      	ldr	r2, [pc, #176]	; (800a0bc <TIM_OC1_SetConfig+0x110>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d00b      	beq.n	800a028 <TIM_OC1_SetConfig+0x7c>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a2b      	ldr	r2, [pc, #172]	; (800a0c0 <TIM_OC1_SetConfig+0x114>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d007      	beq.n	800a028 <TIM_OC1_SetConfig+0x7c>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a2a      	ldr	r2, [pc, #168]	; (800a0c4 <TIM_OC1_SetConfig+0x118>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d003      	beq.n	800a028 <TIM_OC1_SetConfig+0x7c>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a29      	ldr	r2, [pc, #164]	; (800a0c8 <TIM_OC1_SetConfig+0x11c>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d10c      	bne.n	800a042 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	f023 0308 	bic.w	r3, r3, #8
 800a02e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	4313      	orrs	r3, r2
 800a038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f023 0304 	bic.w	r3, r3, #4
 800a040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a1c      	ldr	r2, [pc, #112]	; (800a0b8 <TIM_OC1_SetConfig+0x10c>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d00f      	beq.n	800a06a <TIM_OC1_SetConfig+0xbe>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a1b      	ldr	r2, [pc, #108]	; (800a0bc <TIM_OC1_SetConfig+0x110>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d00b      	beq.n	800a06a <TIM_OC1_SetConfig+0xbe>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a1a      	ldr	r2, [pc, #104]	; (800a0c0 <TIM_OC1_SetConfig+0x114>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d007      	beq.n	800a06a <TIM_OC1_SetConfig+0xbe>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a19      	ldr	r2, [pc, #100]	; (800a0c4 <TIM_OC1_SetConfig+0x118>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d003      	beq.n	800a06a <TIM_OC1_SetConfig+0xbe>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a18      	ldr	r2, [pc, #96]	; (800a0c8 <TIM_OC1_SetConfig+0x11c>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d111      	bne.n	800a08e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	4313      	orrs	r3, r2
 800a082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	697a      	ldr	r2, [r7, #20]
 800a0a6:	621a      	str	r2, [r3, #32]
}
 800a0a8:	bf00      	nop
 800a0aa:	371c      	adds	r7, #28
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	fffeff8f 	.word	0xfffeff8f
 800a0b8:	40010000 	.word	0x40010000
 800a0bc:	40010400 	.word	0x40010400
 800a0c0:	40014000 	.word	0x40014000
 800a0c4:	40014400 	.word	0x40014400
 800a0c8:	40014800 	.word	0x40014800

0800a0cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	f023 0210 	bic.w	r2, r3, #16
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	4b34      	ldr	r3, [pc, #208]	; (800a1c8 <TIM_OC2_SetConfig+0xfc>)
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	021b      	lsls	r3, r3, #8
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	f023 0320 	bic.w	r3, r3, #32
 800a116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	011b      	lsls	r3, r3, #4
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	4313      	orrs	r3, r2
 800a122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a29      	ldr	r2, [pc, #164]	; (800a1cc <TIM_OC2_SetConfig+0x100>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d003      	beq.n	800a134 <TIM_OC2_SetConfig+0x68>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a28      	ldr	r2, [pc, #160]	; (800a1d0 <TIM_OC2_SetConfig+0x104>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d10d      	bne.n	800a150 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a13a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	011b      	lsls	r3, r3, #4
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	4313      	orrs	r3, r2
 800a146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a14e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a1e      	ldr	r2, [pc, #120]	; (800a1cc <TIM_OC2_SetConfig+0x100>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d00f      	beq.n	800a178 <TIM_OC2_SetConfig+0xac>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a1d      	ldr	r2, [pc, #116]	; (800a1d0 <TIM_OC2_SetConfig+0x104>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d00b      	beq.n	800a178 <TIM_OC2_SetConfig+0xac>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a1c      	ldr	r2, [pc, #112]	; (800a1d4 <TIM_OC2_SetConfig+0x108>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d007      	beq.n	800a178 <TIM_OC2_SetConfig+0xac>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a1b      	ldr	r2, [pc, #108]	; (800a1d8 <TIM_OC2_SetConfig+0x10c>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d003      	beq.n	800a178 <TIM_OC2_SetConfig+0xac>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a1a      	ldr	r2, [pc, #104]	; (800a1dc <TIM_OC2_SetConfig+0x110>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d113      	bne.n	800a1a0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a17e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	4313      	orrs	r3, r2
 800a192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	621a      	str	r2, [r3, #32]
}
 800a1ba:	bf00      	nop
 800a1bc:	371c      	adds	r7, #28
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	feff8fff 	.word	0xfeff8fff
 800a1cc:	40010000 	.word	0x40010000
 800a1d0:	40010400 	.word	0x40010400
 800a1d4:	40014000 	.word	0x40014000
 800a1d8:	40014400 	.word	0x40014400
 800a1dc:	40014800 	.word	0x40014800

0800a1e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b087      	sub	sp, #28
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a1b      	ldr	r3, [r3, #32]
 800a1ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	69db      	ldr	r3, [r3, #28]
 800a206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	4b33      	ldr	r3, [pc, #204]	; (800a2d8 <TIM_OC3_SetConfig+0xf8>)
 800a20c:	4013      	ands	r3, r2
 800a20e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f023 0303 	bic.w	r3, r3, #3
 800a216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	4313      	orrs	r3, r2
 800a220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	021b      	lsls	r3, r3, #8
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	4313      	orrs	r3, r2
 800a234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a28      	ldr	r2, [pc, #160]	; (800a2dc <TIM_OC3_SetConfig+0xfc>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d003      	beq.n	800a246 <TIM_OC3_SetConfig+0x66>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a27      	ldr	r2, [pc, #156]	; (800a2e0 <TIM_OC3_SetConfig+0x100>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d10d      	bne.n	800a262 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a24c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	021b      	lsls	r3, r3, #8
 800a254:	697a      	ldr	r2, [r7, #20]
 800a256:	4313      	orrs	r3, r2
 800a258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a1d      	ldr	r2, [pc, #116]	; (800a2dc <TIM_OC3_SetConfig+0xfc>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d00f      	beq.n	800a28a <TIM_OC3_SetConfig+0xaa>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a1c      	ldr	r2, [pc, #112]	; (800a2e0 <TIM_OC3_SetConfig+0x100>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d00b      	beq.n	800a28a <TIM_OC3_SetConfig+0xaa>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a1b      	ldr	r2, [pc, #108]	; (800a2e4 <TIM_OC3_SetConfig+0x104>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d007      	beq.n	800a28a <TIM_OC3_SetConfig+0xaa>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a1a      	ldr	r2, [pc, #104]	; (800a2e8 <TIM_OC3_SetConfig+0x108>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d003      	beq.n	800a28a <TIM_OC3_SetConfig+0xaa>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a19      	ldr	r2, [pc, #100]	; (800a2ec <TIM_OC3_SetConfig+0x10c>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d113      	bne.n	800a2b2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	011b      	lsls	r3, r3, #4
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	011b      	lsls	r3, r3, #4
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	621a      	str	r2, [r3, #32]
}
 800a2cc:	bf00      	nop
 800a2ce:	371c      	adds	r7, #28
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	fffeff8f 	.word	0xfffeff8f
 800a2dc:	40010000 	.word	0x40010000
 800a2e0:	40010400 	.word	0x40010400
 800a2e4:	40014000 	.word	0x40014000
 800a2e8:	40014400 	.word	0x40014400
 800a2ec:	40014800 	.word	0x40014800

0800a2f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	4b24      	ldr	r3, [pc, #144]	; (800a3ac <TIM_OC4_SetConfig+0xbc>)
 800a31c:	4013      	ands	r3, r2
 800a31e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a33a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	031b      	lsls	r3, r3, #12
 800a342:	693a      	ldr	r2, [r7, #16]
 800a344:	4313      	orrs	r3, r2
 800a346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a19      	ldr	r2, [pc, #100]	; (800a3b0 <TIM_OC4_SetConfig+0xc0>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d00f      	beq.n	800a370 <TIM_OC4_SetConfig+0x80>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a18      	ldr	r2, [pc, #96]	; (800a3b4 <TIM_OC4_SetConfig+0xc4>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d00b      	beq.n	800a370 <TIM_OC4_SetConfig+0x80>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a17      	ldr	r2, [pc, #92]	; (800a3b8 <TIM_OC4_SetConfig+0xc8>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d007      	beq.n	800a370 <TIM_OC4_SetConfig+0x80>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a16      	ldr	r2, [pc, #88]	; (800a3bc <TIM_OC4_SetConfig+0xcc>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d003      	beq.n	800a370 <TIM_OC4_SetConfig+0x80>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a15      	ldr	r2, [pc, #84]	; (800a3c0 <TIM_OC4_SetConfig+0xd0>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d109      	bne.n	800a384 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	019b      	lsls	r3, r3, #6
 800a37e:	697a      	ldr	r2, [r7, #20]
 800a380:	4313      	orrs	r3, r2
 800a382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	621a      	str	r2, [r3, #32]
}
 800a39e:	bf00      	nop
 800a3a0:	371c      	adds	r7, #28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	feff8fff 	.word	0xfeff8fff
 800a3b0:	40010000 	.word	0x40010000
 800a3b4:	40010400 	.word	0x40010400
 800a3b8:	40014000 	.word	0x40014000
 800a3bc:	40014400 	.word	0x40014400
 800a3c0:	40014800 	.word	0x40014800

0800a3c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	4b21      	ldr	r3, [pc, #132]	; (800a474 <TIM_OC5_SetConfig+0xb0>)
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a404:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	041b      	lsls	r3, r3, #16
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	4313      	orrs	r3, r2
 800a410:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a18      	ldr	r2, [pc, #96]	; (800a478 <TIM_OC5_SetConfig+0xb4>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d00f      	beq.n	800a43a <TIM_OC5_SetConfig+0x76>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a17      	ldr	r2, [pc, #92]	; (800a47c <TIM_OC5_SetConfig+0xb8>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d00b      	beq.n	800a43a <TIM_OC5_SetConfig+0x76>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a16      	ldr	r2, [pc, #88]	; (800a480 <TIM_OC5_SetConfig+0xbc>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d007      	beq.n	800a43a <TIM_OC5_SetConfig+0x76>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a15      	ldr	r2, [pc, #84]	; (800a484 <TIM_OC5_SetConfig+0xc0>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d003      	beq.n	800a43a <TIM_OC5_SetConfig+0x76>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a14      	ldr	r2, [pc, #80]	; (800a488 <TIM_OC5_SetConfig+0xc4>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d109      	bne.n	800a44e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a440:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	021b      	lsls	r3, r3, #8
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	621a      	str	r2, [r3, #32]
}
 800a468:	bf00      	nop
 800a46a:	371c      	adds	r7, #28
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	fffeff8f 	.word	0xfffeff8f
 800a478:	40010000 	.word	0x40010000
 800a47c:	40010400 	.word	0x40010400
 800a480:	40014000 	.word	0x40014000
 800a484:	40014400 	.word	0x40014400
 800a488:	40014800 	.word	0x40014800

0800a48c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b087      	sub	sp, #28
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	4b22      	ldr	r3, [pc, #136]	; (800a540 <TIM_OC6_SetConfig+0xb4>)
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	021b      	lsls	r3, r3, #8
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	051b      	lsls	r3, r3, #20
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a19      	ldr	r2, [pc, #100]	; (800a544 <TIM_OC6_SetConfig+0xb8>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d00f      	beq.n	800a504 <TIM_OC6_SetConfig+0x78>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a18      	ldr	r2, [pc, #96]	; (800a548 <TIM_OC6_SetConfig+0xbc>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d00b      	beq.n	800a504 <TIM_OC6_SetConfig+0x78>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a17      	ldr	r2, [pc, #92]	; (800a54c <TIM_OC6_SetConfig+0xc0>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d007      	beq.n	800a504 <TIM_OC6_SetConfig+0x78>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a16      	ldr	r2, [pc, #88]	; (800a550 <TIM_OC6_SetConfig+0xc4>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d003      	beq.n	800a504 <TIM_OC6_SetConfig+0x78>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a15      	ldr	r2, [pc, #84]	; (800a554 <TIM_OC6_SetConfig+0xc8>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d109      	bne.n	800a518 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a50a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	029b      	lsls	r3, r3, #10
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	4313      	orrs	r3, r2
 800a516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	693a      	ldr	r2, [r7, #16]
 800a530:	621a      	str	r2, [r3, #32]
}
 800a532:	bf00      	nop
 800a534:	371c      	adds	r7, #28
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	feff8fff 	.word	0xfeff8fff
 800a544:	40010000 	.word	0x40010000
 800a548:	40010400 	.word	0x40010400
 800a54c:	40014000 	.word	0x40014000
 800a550:	40014400 	.word	0x40014400
 800a554:	40014800 	.word	0x40014800

0800a558 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	4b65      	ldr	r3, [pc, #404]	; (800a708 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800a572:	4013      	ands	r3, r2
 800a574:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	4b62      	ldr	r3, [pc, #392]	; (800a70c <TIM_SlaveTimer_SetConfig+0x1b4>)
 800a584:	4013      	ands	r3, r2
 800a586:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	4313      	orrs	r3, r2
 800a590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	4a5c      	ldr	r2, [pc, #368]	; (800a710 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	f000 80ab 	beq.w	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a5a6:	4a5a      	ldr	r2, [pc, #360]	; (800a710 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	f200 80a4 	bhi.w	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a5ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5b2:	f000 80a3 	beq.w	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a5b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5ba:	f200 809c 	bhi.w	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a5be:	4a55      	ldr	r2, [pc, #340]	; (800a714 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	f000 809b 	beq.w	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a5c6:	4a53      	ldr	r2, [pc, #332]	; (800a714 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	f200 8094 	bhi.w	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a5ce:	4a52      	ldr	r2, [pc, #328]	; (800a718 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	f000 8093 	beq.w	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a5d6:	4a50      	ldr	r2, [pc, #320]	; (800a718 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	f200 808c 	bhi.w	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a5de:	4a4f      	ldr	r2, [pc, #316]	; (800a71c <TIM_SlaveTimer_SetConfig+0x1c4>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	f000 808b 	beq.w	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a5e6:	4a4d      	ldr	r2, [pc, #308]	; (800a71c <TIM_SlaveTimer_SetConfig+0x1c4>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	f200 8084 	bhi.w	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a5ee:	4a4c      	ldr	r2, [pc, #304]	; (800a720 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	f000 8083 	beq.w	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a5f6:	4a4a      	ldr	r2, [pc, #296]	; (800a720 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d87c      	bhi.n	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a5fc:	4a49      	ldr	r2, [pc, #292]	; (800a724 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d07c      	beq.n	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a602:	4a48      	ldr	r2, [pc, #288]	; (800a724 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d876      	bhi.n	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a608:	4a47      	ldr	r2, [pc, #284]	; (800a728 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d076      	beq.n	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a60e:	4a46      	ldr	r2, [pc, #280]	; (800a728 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d870      	bhi.n	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a614:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a618:	d070      	beq.n	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a61a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a61e:	d86a      	bhi.n	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a624:	d06a      	beq.n	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a62a:	d864      	bhi.n	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a62c:	2b70      	cmp	r3, #112	; 0x70
 800a62e:	d01a      	beq.n	800a666 <TIM_SlaveTimer_SetConfig+0x10e>
 800a630:	2b70      	cmp	r3, #112	; 0x70
 800a632:	d860      	bhi.n	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a634:	2b60      	cmp	r3, #96	; 0x60
 800a636:	d054      	beq.n	800a6e2 <TIM_SlaveTimer_SetConfig+0x18a>
 800a638:	2b60      	cmp	r3, #96	; 0x60
 800a63a:	d85c      	bhi.n	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a63c:	2b50      	cmp	r3, #80	; 0x50
 800a63e:	d046      	beq.n	800a6ce <TIM_SlaveTimer_SetConfig+0x176>
 800a640:	2b50      	cmp	r3, #80	; 0x50
 800a642:	d858      	bhi.n	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a644:	2b40      	cmp	r3, #64	; 0x40
 800a646:	d019      	beq.n	800a67c <TIM_SlaveTimer_SetConfig+0x124>
 800a648:	2b40      	cmp	r3, #64	; 0x40
 800a64a:	d854      	bhi.n	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a64c:	2b30      	cmp	r3, #48	; 0x30
 800a64e:	d055      	beq.n	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a650:	2b30      	cmp	r3, #48	; 0x30
 800a652:	d850      	bhi.n	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a654:	2b20      	cmp	r3, #32
 800a656:	d051      	beq.n	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a658:	2b20      	cmp	r3, #32
 800a65a:	d84c      	bhi.n	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d04d      	beq.n	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a660:	2b10      	cmp	r3, #16
 800a662:	d04b      	beq.n	800a6fc <TIM_SlaveTimer_SetConfig+0x1a4>
 800a664:	e047      	b.n	800a6f6 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6818      	ldr	r0, [r3, #0]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	68d9      	ldr	r1, [r3, #12]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	689a      	ldr	r2, [r3, #8]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	f000 f8b8 	bl	800a7ea <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800a67a:	e040      	b.n	800a6fe <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b05      	cmp	r3, #5
 800a682:	d101      	bne.n	800a688 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e03b      	b.n	800a700 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6a1a      	ldr	r2, [r3, #32]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 0201 	bic.w	r2, r2, #1
 800a69e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6ae:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	011b      	lsls	r3, r3, #4
 800a6b6:	68ba      	ldr	r2, [r7, #8]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	621a      	str	r2, [r3, #32]
      break;
 800a6cc:	e017      	b.n	800a6fe <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6818      	ldr	r0, [r3, #0]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	6899      	ldr	r1, [r3, #8]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	f000 f826 	bl	800a72c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a6e0:	e00d      	b.n	800a6fe <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6818      	ldr	r0, [r3, #0]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	6899      	ldr	r1, [r3, #8]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	f000 f84b 	bl	800a78a <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a6f4:	e003      	b.n	800a6fe <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6fa:	e000      	b.n	800a6fe <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800a6fc:	bf00      	nop
  }

  return status;
 800a6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3718      	adds	r7, #24
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	ffcfff8f 	.word	0xffcfff8f
 800a70c:	fffefff8 	.word	0xfffefff8
 800a710:	00200010 	.word	0x00200010
 800a714:	00100070 	.word	0x00100070
 800a718:	00100060 	.word	0x00100060
 800a71c:	00100050 	.word	0x00100050
 800a720:	00100040 	.word	0x00100040
 800a724:	00100030 	.word	0x00100030
 800a728:	00100020 	.word	0x00100020

0800a72c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b087      	sub	sp, #28
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6a1b      	ldr	r3, [r3, #32]
 800a73c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	f023 0201 	bic.w	r2, r3, #1
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	011b      	lsls	r3, r3, #4
 800a75c:	693a      	ldr	r2, [r7, #16]
 800a75e:	4313      	orrs	r3, r2
 800a760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f023 030a 	bic.w	r3, r3, #10
 800a768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	4313      	orrs	r3, r2
 800a770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	621a      	str	r2, [r3, #32]
}
 800a77e:	bf00      	nop
 800a780:	371c      	adds	r7, #28
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b087      	sub	sp, #28
 800a78e:	af00      	add	r7, sp, #0
 800a790:	60f8      	str	r0, [r7, #12]
 800a792:	60b9      	str	r1, [r7, #8]
 800a794:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	f023 0210 	bic.w	r2, r3, #16
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6a1b      	ldr	r3, [r3, #32]
 800a7ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	031b      	lsls	r3, r3, #12
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	011b      	lsls	r3, r3, #4
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	621a      	str	r2, [r3, #32]
}
 800a7de:	bf00      	nop
 800a7e0:	371c      	adds	r7, #28
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b087      	sub	sp, #28
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	60f8      	str	r0, [r7, #12]
 800a7f2:	60b9      	str	r1, [r7, #8]
 800a7f4:	607a      	str	r2, [r7, #4]
 800a7f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a804:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	021a      	lsls	r2, r3, #8
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	431a      	orrs	r2, r3
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	4313      	orrs	r3, r2
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	4313      	orrs	r3, r2
 800a816:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	609a      	str	r2, [r3, #8]
}
 800a81e:	bf00      	nop
 800a820:	371c      	adds	r7, #28
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b087      	sub	sp, #28
 800a82e:	af00      	add	r7, sp, #0
 800a830:	60f8      	str	r0, [r7, #12]
 800a832:	60b9      	str	r1, [r7, #8]
 800a834:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	f003 031f 	and.w	r3, r3, #31
 800a83c:	2201      	movs	r2, #1
 800a83e:	fa02 f303 	lsl.w	r3, r2, r3
 800a842:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6a1a      	ldr	r2, [r3, #32]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	43db      	mvns	r3, r3
 800a84c:	401a      	ands	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6a1a      	ldr	r2, [r3, #32]
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	f003 031f 	and.w	r3, r3, #31
 800a85c:	6879      	ldr	r1, [r7, #4]
 800a85e:	fa01 f303 	lsl.w	r3, r1, r3
 800a862:	431a      	orrs	r2, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	621a      	str	r2, [r3, #32]
}
 800a868:	bf00      	nop
 800a86a:	371c      	adds	r7, #28
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e042      	b.n	800a90c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d106      	bne.n	800a89e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f7f6 fcb7 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2224      	movs	r2, #36	; 0x24
 800a8a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f022 0201 	bic.w	r2, r2, #1
 800a8b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f82c 	bl	800a914 <UART_SetConfig>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d101      	bne.n	800a8c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e022      	b.n	800a90c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d002      	beq.n	800a8d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fe7e 	bl	800b5d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f042 0201 	orr.w	r2, r2, #1
 800a902:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 ff05 	bl	800b714 <UART_CheckIdleState>
 800a90a:	4603      	mov	r3, r0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a914:	b5b0      	push	{r4, r5, r7, lr}
 800a916:	b08e      	sub	sp, #56	; 0x38
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	689a      	ldr	r2, [r3, #8]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	431a      	orrs	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	431a      	orrs	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	4313      	orrs	r3, r2
 800a938:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	4bbf      	ldr	r3, [pc, #764]	; (800ac40 <UART_SetConfig+0x32c>)
 800a942:	4013      	ands	r3, r2
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	6812      	ldr	r2, [r2, #0]
 800a948:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a94a:	430b      	orrs	r3, r1
 800a94c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	68da      	ldr	r2, [r3, #12]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4ab5      	ldr	r2, [pc, #724]	; (800ac44 <UART_SetConfig+0x330>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d004      	beq.n	800a97e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a1b      	ldr	r3, [r3, #32]
 800a978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a97a:	4313      	orrs	r3, r2
 800a97c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689a      	ldr	r2, [r3, #8]
 800a984:	4bb0      	ldr	r3, [pc, #704]	; (800ac48 <UART_SetConfig+0x334>)
 800a986:	4013      	ands	r3, r2
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	6812      	ldr	r2, [r2, #0]
 800a98c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a98e:	430b      	orrs	r3, r1
 800a990:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a998:	f023 010f 	bic.w	r1, r3, #15
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	430a      	orrs	r2, r1
 800a9a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4aa7      	ldr	r2, [pc, #668]	; (800ac4c <UART_SetConfig+0x338>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d176      	bne.n	800aaa0 <UART_SetConfig+0x18c>
 800a9b2:	4ba7      	ldr	r3, [pc, #668]	; (800ac50 <UART_SetConfig+0x33c>)
 800a9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9ba:	2b28      	cmp	r3, #40	; 0x28
 800a9bc:	d86c      	bhi.n	800aa98 <UART_SetConfig+0x184>
 800a9be:	a201      	add	r2, pc, #4	; (adr r2, 800a9c4 <UART_SetConfig+0xb0>)
 800a9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c4:	0800aa69 	.word	0x0800aa69
 800a9c8:	0800aa99 	.word	0x0800aa99
 800a9cc:	0800aa99 	.word	0x0800aa99
 800a9d0:	0800aa99 	.word	0x0800aa99
 800a9d4:	0800aa99 	.word	0x0800aa99
 800a9d8:	0800aa99 	.word	0x0800aa99
 800a9dc:	0800aa99 	.word	0x0800aa99
 800a9e0:	0800aa99 	.word	0x0800aa99
 800a9e4:	0800aa71 	.word	0x0800aa71
 800a9e8:	0800aa99 	.word	0x0800aa99
 800a9ec:	0800aa99 	.word	0x0800aa99
 800a9f0:	0800aa99 	.word	0x0800aa99
 800a9f4:	0800aa99 	.word	0x0800aa99
 800a9f8:	0800aa99 	.word	0x0800aa99
 800a9fc:	0800aa99 	.word	0x0800aa99
 800aa00:	0800aa99 	.word	0x0800aa99
 800aa04:	0800aa79 	.word	0x0800aa79
 800aa08:	0800aa99 	.word	0x0800aa99
 800aa0c:	0800aa99 	.word	0x0800aa99
 800aa10:	0800aa99 	.word	0x0800aa99
 800aa14:	0800aa99 	.word	0x0800aa99
 800aa18:	0800aa99 	.word	0x0800aa99
 800aa1c:	0800aa99 	.word	0x0800aa99
 800aa20:	0800aa99 	.word	0x0800aa99
 800aa24:	0800aa81 	.word	0x0800aa81
 800aa28:	0800aa99 	.word	0x0800aa99
 800aa2c:	0800aa99 	.word	0x0800aa99
 800aa30:	0800aa99 	.word	0x0800aa99
 800aa34:	0800aa99 	.word	0x0800aa99
 800aa38:	0800aa99 	.word	0x0800aa99
 800aa3c:	0800aa99 	.word	0x0800aa99
 800aa40:	0800aa99 	.word	0x0800aa99
 800aa44:	0800aa89 	.word	0x0800aa89
 800aa48:	0800aa99 	.word	0x0800aa99
 800aa4c:	0800aa99 	.word	0x0800aa99
 800aa50:	0800aa99 	.word	0x0800aa99
 800aa54:	0800aa99 	.word	0x0800aa99
 800aa58:	0800aa99 	.word	0x0800aa99
 800aa5c:	0800aa99 	.word	0x0800aa99
 800aa60:	0800aa99 	.word	0x0800aa99
 800aa64:	0800aa91 	.word	0x0800aa91
 800aa68:	2301      	movs	r3, #1
 800aa6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa6e:	e326      	b.n	800b0be <UART_SetConfig+0x7aa>
 800aa70:	2304      	movs	r3, #4
 800aa72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa76:	e322      	b.n	800b0be <UART_SetConfig+0x7aa>
 800aa78:	2308      	movs	r3, #8
 800aa7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa7e:	e31e      	b.n	800b0be <UART_SetConfig+0x7aa>
 800aa80:	2310      	movs	r3, #16
 800aa82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa86:	e31a      	b.n	800b0be <UART_SetConfig+0x7aa>
 800aa88:	2320      	movs	r3, #32
 800aa8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa8e:	e316      	b.n	800b0be <UART_SetConfig+0x7aa>
 800aa90:	2340      	movs	r3, #64	; 0x40
 800aa92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa96:	e312      	b.n	800b0be <UART_SetConfig+0x7aa>
 800aa98:	2380      	movs	r3, #128	; 0x80
 800aa9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa9e:	e30e      	b.n	800b0be <UART_SetConfig+0x7aa>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a6b      	ldr	r2, [pc, #428]	; (800ac54 <UART_SetConfig+0x340>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d130      	bne.n	800ab0c <UART_SetConfig+0x1f8>
 800aaaa:	4b69      	ldr	r3, [pc, #420]	; (800ac50 <UART_SetConfig+0x33c>)
 800aaac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaae:	f003 0307 	and.w	r3, r3, #7
 800aab2:	2b05      	cmp	r3, #5
 800aab4:	d826      	bhi.n	800ab04 <UART_SetConfig+0x1f0>
 800aab6:	a201      	add	r2, pc, #4	; (adr r2, 800aabc <UART_SetConfig+0x1a8>)
 800aab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabc:	0800aad5 	.word	0x0800aad5
 800aac0:	0800aadd 	.word	0x0800aadd
 800aac4:	0800aae5 	.word	0x0800aae5
 800aac8:	0800aaed 	.word	0x0800aaed
 800aacc:	0800aaf5 	.word	0x0800aaf5
 800aad0:	0800aafd 	.word	0x0800aafd
 800aad4:	2300      	movs	r3, #0
 800aad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aada:	e2f0      	b.n	800b0be <UART_SetConfig+0x7aa>
 800aadc:	2304      	movs	r3, #4
 800aade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aae2:	e2ec      	b.n	800b0be <UART_SetConfig+0x7aa>
 800aae4:	2308      	movs	r3, #8
 800aae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaea:	e2e8      	b.n	800b0be <UART_SetConfig+0x7aa>
 800aaec:	2310      	movs	r3, #16
 800aaee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaf2:	e2e4      	b.n	800b0be <UART_SetConfig+0x7aa>
 800aaf4:	2320      	movs	r3, #32
 800aaf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aafa:	e2e0      	b.n	800b0be <UART_SetConfig+0x7aa>
 800aafc:	2340      	movs	r3, #64	; 0x40
 800aafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab02:	e2dc      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ab04:	2380      	movs	r3, #128	; 0x80
 800ab06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab0a:	e2d8      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a51      	ldr	r2, [pc, #324]	; (800ac58 <UART_SetConfig+0x344>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d130      	bne.n	800ab78 <UART_SetConfig+0x264>
 800ab16:	4b4e      	ldr	r3, [pc, #312]	; (800ac50 <UART_SetConfig+0x33c>)
 800ab18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab1a:	f003 0307 	and.w	r3, r3, #7
 800ab1e:	2b05      	cmp	r3, #5
 800ab20:	d826      	bhi.n	800ab70 <UART_SetConfig+0x25c>
 800ab22:	a201      	add	r2, pc, #4	; (adr r2, 800ab28 <UART_SetConfig+0x214>)
 800ab24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab28:	0800ab41 	.word	0x0800ab41
 800ab2c:	0800ab49 	.word	0x0800ab49
 800ab30:	0800ab51 	.word	0x0800ab51
 800ab34:	0800ab59 	.word	0x0800ab59
 800ab38:	0800ab61 	.word	0x0800ab61
 800ab3c:	0800ab69 	.word	0x0800ab69
 800ab40:	2300      	movs	r3, #0
 800ab42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab46:	e2ba      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ab48:	2304      	movs	r3, #4
 800ab4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab4e:	e2b6      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ab50:	2308      	movs	r3, #8
 800ab52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab56:	e2b2      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ab58:	2310      	movs	r3, #16
 800ab5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab5e:	e2ae      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ab60:	2320      	movs	r3, #32
 800ab62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab66:	e2aa      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ab68:	2340      	movs	r3, #64	; 0x40
 800ab6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab6e:	e2a6      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ab70:	2380      	movs	r3, #128	; 0x80
 800ab72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab76:	e2a2      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a37      	ldr	r2, [pc, #220]	; (800ac5c <UART_SetConfig+0x348>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d130      	bne.n	800abe4 <UART_SetConfig+0x2d0>
 800ab82:	4b33      	ldr	r3, [pc, #204]	; (800ac50 <UART_SetConfig+0x33c>)
 800ab84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab86:	f003 0307 	and.w	r3, r3, #7
 800ab8a:	2b05      	cmp	r3, #5
 800ab8c:	d826      	bhi.n	800abdc <UART_SetConfig+0x2c8>
 800ab8e:	a201      	add	r2, pc, #4	; (adr r2, 800ab94 <UART_SetConfig+0x280>)
 800ab90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab94:	0800abad 	.word	0x0800abad
 800ab98:	0800abb5 	.word	0x0800abb5
 800ab9c:	0800abbd 	.word	0x0800abbd
 800aba0:	0800abc5 	.word	0x0800abc5
 800aba4:	0800abcd 	.word	0x0800abcd
 800aba8:	0800abd5 	.word	0x0800abd5
 800abac:	2300      	movs	r3, #0
 800abae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abb2:	e284      	b.n	800b0be <UART_SetConfig+0x7aa>
 800abb4:	2304      	movs	r3, #4
 800abb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abba:	e280      	b.n	800b0be <UART_SetConfig+0x7aa>
 800abbc:	2308      	movs	r3, #8
 800abbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abc2:	e27c      	b.n	800b0be <UART_SetConfig+0x7aa>
 800abc4:	2310      	movs	r3, #16
 800abc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abca:	e278      	b.n	800b0be <UART_SetConfig+0x7aa>
 800abcc:	2320      	movs	r3, #32
 800abce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abd2:	e274      	b.n	800b0be <UART_SetConfig+0x7aa>
 800abd4:	2340      	movs	r3, #64	; 0x40
 800abd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abda:	e270      	b.n	800b0be <UART_SetConfig+0x7aa>
 800abdc:	2380      	movs	r3, #128	; 0x80
 800abde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abe2:	e26c      	b.n	800b0be <UART_SetConfig+0x7aa>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a1d      	ldr	r2, [pc, #116]	; (800ac60 <UART_SetConfig+0x34c>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d142      	bne.n	800ac74 <UART_SetConfig+0x360>
 800abee:	4b18      	ldr	r3, [pc, #96]	; (800ac50 <UART_SetConfig+0x33c>)
 800abf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abf2:	f003 0307 	and.w	r3, r3, #7
 800abf6:	2b05      	cmp	r3, #5
 800abf8:	d838      	bhi.n	800ac6c <UART_SetConfig+0x358>
 800abfa:	a201      	add	r2, pc, #4	; (adr r2, 800ac00 <UART_SetConfig+0x2ec>)
 800abfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac00:	0800ac19 	.word	0x0800ac19
 800ac04:	0800ac21 	.word	0x0800ac21
 800ac08:	0800ac29 	.word	0x0800ac29
 800ac0c:	0800ac31 	.word	0x0800ac31
 800ac10:	0800ac39 	.word	0x0800ac39
 800ac14:	0800ac65 	.word	0x0800ac65
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1e:	e24e      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ac20:	2304      	movs	r3, #4
 800ac22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac26:	e24a      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ac28:	2308      	movs	r3, #8
 800ac2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac2e:	e246      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ac30:	2310      	movs	r3, #16
 800ac32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac36:	e242      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ac38:	2320      	movs	r3, #32
 800ac3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac3e:	e23e      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ac40:	cfff69f3 	.word	0xcfff69f3
 800ac44:	58000c00 	.word	0x58000c00
 800ac48:	11fff4ff 	.word	0x11fff4ff
 800ac4c:	40011000 	.word	0x40011000
 800ac50:	58024400 	.word	0x58024400
 800ac54:	40004400 	.word	0x40004400
 800ac58:	40004800 	.word	0x40004800
 800ac5c:	40004c00 	.word	0x40004c00
 800ac60:	40005000 	.word	0x40005000
 800ac64:	2340      	movs	r3, #64	; 0x40
 800ac66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac6a:	e228      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ac6c:	2380      	movs	r3, #128	; 0x80
 800ac6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac72:	e224      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4ab1      	ldr	r2, [pc, #708]	; (800af40 <UART_SetConfig+0x62c>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d176      	bne.n	800ad6c <UART_SetConfig+0x458>
 800ac7e:	4bb1      	ldr	r3, [pc, #708]	; (800af44 <UART_SetConfig+0x630>)
 800ac80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac86:	2b28      	cmp	r3, #40	; 0x28
 800ac88:	d86c      	bhi.n	800ad64 <UART_SetConfig+0x450>
 800ac8a:	a201      	add	r2, pc, #4	; (adr r2, 800ac90 <UART_SetConfig+0x37c>)
 800ac8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac90:	0800ad35 	.word	0x0800ad35
 800ac94:	0800ad65 	.word	0x0800ad65
 800ac98:	0800ad65 	.word	0x0800ad65
 800ac9c:	0800ad65 	.word	0x0800ad65
 800aca0:	0800ad65 	.word	0x0800ad65
 800aca4:	0800ad65 	.word	0x0800ad65
 800aca8:	0800ad65 	.word	0x0800ad65
 800acac:	0800ad65 	.word	0x0800ad65
 800acb0:	0800ad3d 	.word	0x0800ad3d
 800acb4:	0800ad65 	.word	0x0800ad65
 800acb8:	0800ad65 	.word	0x0800ad65
 800acbc:	0800ad65 	.word	0x0800ad65
 800acc0:	0800ad65 	.word	0x0800ad65
 800acc4:	0800ad65 	.word	0x0800ad65
 800acc8:	0800ad65 	.word	0x0800ad65
 800accc:	0800ad65 	.word	0x0800ad65
 800acd0:	0800ad45 	.word	0x0800ad45
 800acd4:	0800ad65 	.word	0x0800ad65
 800acd8:	0800ad65 	.word	0x0800ad65
 800acdc:	0800ad65 	.word	0x0800ad65
 800ace0:	0800ad65 	.word	0x0800ad65
 800ace4:	0800ad65 	.word	0x0800ad65
 800ace8:	0800ad65 	.word	0x0800ad65
 800acec:	0800ad65 	.word	0x0800ad65
 800acf0:	0800ad4d 	.word	0x0800ad4d
 800acf4:	0800ad65 	.word	0x0800ad65
 800acf8:	0800ad65 	.word	0x0800ad65
 800acfc:	0800ad65 	.word	0x0800ad65
 800ad00:	0800ad65 	.word	0x0800ad65
 800ad04:	0800ad65 	.word	0x0800ad65
 800ad08:	0800ad65 	.word	0x0800ad65
 800ad0c:	0800ad65 	.word	0x0800ad65
 800ad10:	0800ad55 	.word	0x0800ad55
 800ad14:	0800ad65 	.word	0x0800ad65
 800ad18:	0800ad65 	.word	0x0800ad65
 800ad1c:	0800ad65 	.word	0x0800ad65
 800ad20:	0800ad65 	.word	0x0800ad65
 800ad24:	0800ad65 	.word	0x0800ad65
 800ad28:	0800ad65 	.word	0x0800ad65
 800ad2c:	0800ad65 	.word	0x0800ad65
 800ad30:	0800ad5d 	.word	0x0800ad5d
 800ad34:	2301      	movs	r3, #1
 800ad36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad3a:	e1c0      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ad3c:	2304      	movs	r3, #4
 800ad3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad42:	e1bc      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ad44:	2308      	movs	r3, #8
 800ad46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad4a:	e1b8      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ad4c:	2310      	movs	r3, #16
 800ad4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad52:	e1b4      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ad54:	2320      	movs	r3, #32
 800ad56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad5a:	e1b0      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ad5c:	2340      	movs	r3, #64	; 0x40
 800ad5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad62:	e1ac      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ad64:	2380      	movs	r3, #128	; 0x80
 800ad66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad6a:	e1a8      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a75      	ldr	r2, [pc, #468]	; (800af48 <UART_SetConfig+0x634>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d130      	bne.n	800add8 <UART_SetConfig+0x4c4>
 800ad76:	4b73      	ldr	r3, [pc, #460]	; (800af44 <UART_SetConfig+0x630>)
 800ad78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7a:	f003 0307 	and.w	r3, r3, #7
 800ad7e:	2b05      	cmp	r3, #5
 800ad80:	d826      	bhi.n	800add0 <UART_SetConfig+0x4bc>
 800ad82:	a201      	add	r2, pc, #4	; (adr r2, 800ad88 <UART_SetConfig+0x474>)
 800ad84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad88:	0800ada1 	.word	0x0800ada1
 800ad8c:	0800ada9 	.word	0x0800ada9
 800ad90:	0800adb1 	.word	0x0800adb1
 800ad94:	0800adb9 	.word	0x0800adb9
 800ad98:	0800adc1 	.word	0x0800adc1
 800ad9c:	0800adc9 	.word	0x0800adc9
 800ada0:	2300      	movs	r3, #0
 800ada2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ada6:	e18a      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ada8:	2304      	movs	r3, #4
 800adaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adae:	e186      	b.n	800b0be <UART_SetConfig+0x7aa>
 800adb0:	2308      	movs	r3, #8
 800adb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adb6:	e182      	b.n	800b0be <UART_SetConfig+0x7aa>
 800adb8:	2310      	movs	r3, #16
 800adba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adbe:	e17e      	b.n	800b0be <UART_SetConfig+0x7aa>
 800adc0:	2320      	movs	r3, #32
 800adc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adc6:	e17a      	b.n	800b0be <UART_SetConfig+0x7aa>
 800adc8:	2340      	movs	r3, #64	; 0x40
 800adca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adce:	e176      	b.n	800b0be <UART_SetConfig+0x7aa>
 800add0:	2380      	movs	r3, #128	; 0x80
 800add2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800add6:	e172      	b.n	800b0be <UART_SetConfig+0x7aa>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a5b      	ldr	r2, [pc, #364]	; (800af4c <UART_SetConfig+0x638>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d130      	bne.n	800ae44 <UART_SetConfig+0x530>
 800ade2:	4b58      	ldr	r3, [pc, #352]	; (800af44 <UART_SetConfig+0x630>)
 800ade4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade6:	f003 0307 	and.w	r3, r3, #7
 800adea:	2b05      	cmp	r3, #5
 800adec:	d826      	bhi.n	800ae3c <UART_SetConfig+0x528>
 800adee:	a201      	add	r2, pc, #4	; (adr r2, 800adf4 <UART_SetConfig+0x4e0>)
 800adf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf4:	0800ae0d 	.word	0x0800ae0d
 800adf8:	0800ae15 	.word	0x0800ae15
 800adfc:	0800ae1d 	.word	0x0800ae1d
 800ae00:	0800ae25 	.word	0x0800ae25
 800ae04:	0800ae2d 	.word	0x0800ae2d
 800ae08:	0800ae35 	.word	0x0800ae35
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae12:	e154      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ae14:	2304      	movs	r3, #4
 800ae16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae1a:	e150      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ae1c:	2308      	movs	r3, #8
 800ae1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae22:	e14c      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ae24:	2310      	movs	r3, #16
 800ae26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae2a:	e148      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ae2c:	2320      	movs	r3, #32
 800ae2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae32:	e144      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ae34:	2340      	movs	r3, #64	; 0x40
 800ae36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae3a:	e140      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ae3c:	2380      	movs	r3, #128	; 0x80
 800ae3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae42:	e13c      	b.n	800b0be <UART_SetConfig+0x7aa>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a41      	ldr	r2, [pc, #260]	; (800af50 <UART_SetConfig+0x63c>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	f040 8082 	bne.w	800af54 <UART_SetConfig+0x640>
 800ae50:	4b3c      	ldr	r3, [pc, #240]	; (800af44 <UART_SetConfig+0x630>)
 800ae52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae58:	2b28      	cmp	r3, #40	; 0x28
 800ae5a:	d86d      	bhi.n	800af38 <UART_SetConfig+0x624>
 800ae5c:	a201      	add	r2, pc, #4	; (adr r2, 800ae64 <UART_SetConfig+0x550>)
 800ae5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae62:	bf00      	nop
 800ae64:	0800af09 	.word	0x0800af09
 800ae68:	0800af39 	.word	0x0800af39
 800ae6c:	0800af39 	.word	0x0800af39
 800ae70:	0800af39 	.word	0x0800af39
 800ae74:	0800af39 	.word	0x0800af39
 800ae78:	0800af39 	.word	0x0800af39
 800ae7c:	0800af39 	.word	0x0800af39
 800ae80:	0800af39 	.word	0x0800af39
 800ae84:	0800af11 	.word	0x0800af11
 800ae88:	0800af39 	.word	0x0800af39
 800ae8c:	0800af39 	.word	0x0800af39
 800ae90:	0800af39 	.word	0x0800af39
 800ae94:	0800af39 	.word	0x0800af39
 800ae98:	0800af39 	.word	0x0800af39
 800ae9c:	0800af39 	.word	0x0800af39
 800aea0:	0800af39 	.word	0x0800af39
 800aea4:	0800af19 	.word	0x0800af19
 800aea8:	0800af39 	.word	0x0800af39
 800aeac:	0800af39 	.word	0x0800af39
 800aeb0:	0800af39 	.word	0x0800af39
 800aeb4:	0800af39 	.word	0x0800af39
 800aeb8:	0800af39 	.word	0x0800af39
 800aebc:	0800af39 	.word	0x0800af39
 800aec0:	0800af39 	.word	0x0800af39
 800aec4:	0800af21 	.word	0x0800af21
 800aec8:	0800af39 	.word	0x0800af39
 800aecc:	0800af39 	.word	0x0800af39
 800aed0:	0800af39 	.word	0x0800af39
 800aed4:	0800af39 	.word	0x0800af39
 800aed8:	0800af39 	.word	0x0800af39
 800aedc:	0800af39 	.word	0x0800af39
 800aee0:	0800af39 	.word	0x0800af39
 800aee4:	0800af29 	.word	0x0800af29
 800aee8:	0800af39 	.word	0x0800af39
 800aeec:	0800af39 	.word	0x0800af39
 800aef0:	0800af39 	.word	0x0800af39
 800aef4:	0800af39 	.word	0x0800af39
 800aef8:	0800af39 	.word	0x0800af39
 800aefc:	0800af39 	.word	0x0800af39
 800af00:	0800af39 	.word	0x0800af39
 800af04:	0800af31 	.word	0x0800af31
 800af08:	2301      	movs	r3, #1
 800af0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af0e:	e0d6      	b.n	800b0be <UART_SetConfig+0x7aa>
 800af10:	2304      	movs	r3, #4
 800af12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af16:	e0d2      	b.n	800b0be <UART_SetConfig+0x7aa>
 800af18:	2308      	movs	r3, #8
 800af1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af1e:	e0ce      	b.n	800b0be <UART_SetConfig+0x7aa>
 800af20:	2310      	movs	r3, #16
 800af22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af26:	e0ca      	b.n	800b0be <UART_SetConfig+0x7aa>
 800af28:	2320      	movs	r3, #32
 800af2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af2e:	e0c6      	b.n	800b0be <UART_SetConfig+0x7aa>
 800af30:	2340      	movs	r3, #64	; 0x40
 800af32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af36:	e0c2      	b.n	800b0be <UART_SetConfig+0x7aa>
 800af38:	2380      	movs	r3, #128	; 0x80
 800af3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af3e:	e0be      	b.n	800b0be <UART_SetConfig+0x7aa>
 800af40:	40011400 	.word	0x40011400
 800af44:	58024400 	.word	0x58024400
 800af48:	40007800 	.word	0x40007800
 800af4c:	40007c00 	.word	0x40007c00
 800af50:	40011800 	.word	0x40011800
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4aad      	ldr	r2, [pc, #692]	; (800b210 <UART_SetConfig+0x8fc>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d176      	bne.n	800b04c <UART_SetConfig+0x738>
 800af5e:	4bad      	ldr	r3, [pc, #692]	; (800b214 <UART_SetConfig+0x900>)
 800af60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af66:	2b28      	cmp	r3, #40	; 0x28
 800af68:	d86c      	bhi.n	800b044 <UART_SetConfig+0x730>
 800af6a:	a201      	add	r2, pc, #4	; (adr r2, 800af70 <UART_SetConfig+0x65c>)
 800af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af70:	0800b015 	.word	0x0800b015
 800af74:	0800b045 	.word	0x0800b045
 800af78:	0800b045 	.word	0x0800b045
 800af7c:	0800b045 	.word	0x0800b045
 800af80:	0800b045 	.word	0x0800b045
 800af84:	0800b045 	.word	0x0800b045
 800af88:	0800b045 	.word	0x0800b045
 800af8c:	0800b045 	.word	0x0800b045
 800af90:	0800b01d 	.word	0x0800b01d
 800af94:	0800b045 	.word	0x0800b045
 800af98:	0800b045 	.word	0x0800b045
 800af9c:	0800b045 	.word	0x0800b045
 800afa0:	0800b045 	.word	0x0800b045
 800afa4:	0800b045 	.word	0x0800b045
 800afa8:	0800b045 	.word	0x0800b045
 800afac:	0800b045 	.word	0x0800b045
 800afb0:	0800b025 	.word	0x0800b025
 800afb4:	0800b045 	.word	0x0800b045
 800afb8:	0800b045 	.word	0x0800b045
 800afbc:	0800b045 	.word	0x0800b045
 800afc0:	0800b045 	.word	0x0800b045
 800afc4:	0800b045 	.word	0x0800b045
 800afc8:	0800b045 	.word	0x0800b045
 800afcc:	0800b045 	.word	0x0800b045
 800afd0:	0800b02d 	.word	0x0800b02d
 800afd4:	0800b045 	.word	0x0800b045
 800afd8:	0800b045 	.word	0x0800b045
 800afdc:	0800b045 	.word	0x0800b045
 800afe0:	0800b045 	.word	0x0800b045
 800afe4:	0800b045 	.word	0x0800b045
 800afe8:	0800b045 	.word	0x0800b045
 800afec:	0800b045 	.word	0x0800b045
 800aff0:	0800b035 	.word	0x0800b035
 800aff4:	0800b045 	.word	0x0800b045
 800aff8:	0800b045 	.word	0x0800b045
 800affc:	0800b045 	.word	0x0800b045
 800b000:	0800b045 	.word	0x0800b045
 800b004:	0800b045 	.word	0x0800b045
 800b008:	0800b045 	.word	0x0800b045
 800b00c:	0800b045 	.word	0x0800b045
 800b010:	0800b03d 	.word	0x0800b03d
 800b014:	2301      	movs	r3, #1
 800b016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b01a:	e050      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b01c:	2304      	movs	r3, #4
 800b01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b022:	e04c      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b024:	2308      	movs	r3, #8
 800b026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b02a:	e048      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b02c:	2310      	movs	r3, #16
 800b02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b032:	e044      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b034:	2320      	movs	r3, #32
 800b036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b03a:	e040      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b03c:	2340      	movs	r3, #64	; 0x40
 800b03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b042:	e03c      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b044:	2380      	movs	r3, #128	; 0x80
 800b046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b04a:	e038      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a71      	ldr	r2, [pc, #452]	; (800b218 <UART_SetConfig+0x904>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d130      	bne.n	800b0b8 <UART_SetConfig+0x7a4>
 800b056:	4b6f      	ldr	r3, [pc, #444]	; (800b214 <UART_SetConfig+0x900>)
 800b058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b05a:	f003 0307 	and.w	r3, r3, #7
 800b05e:	2b05      	cmp	r3, #5
 800b060:	d826      	bhi.n	800b0b0 <UART_SetConfig+0x79c>
 800b062:	a201      	add	r2, pc, #4	; (adr r2, 800b068 <UART_SetConfig+0x754>)
 800b064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b068:	0800b081 	.word	0x0800b081
 800b06c:	0800b089 	.word	0x0800b089
 800b070:	0800b091 	.word	0x0800b091
 800b074:	0800b099 	.word	0x0800b099
 800b078:	0800b0a1 	.word	0x0800b0a1
 800b07c:	0800b0a9 	.word	0x0800b0a9
 800b080:	2302      	movs	r3, #2
 800b082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b086:	e01a      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b088:	2304      	movs	r3, #4
 800b08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b08e:	e016      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b090:	2308      	movs	r3, #8
 800b092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b096:	e012      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b098:	2310      	movs	r3, #16
 800b09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b09e:	e00e      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b0a0:	2320      	movs	r3, #32
 800b0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0a6:	e00a      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b0a8:	2340      	movs	r3, #64	; 0x40
 800b0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ae:	e006      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b0b0:	2380      	movs	r3, #128	; 0x80
 800b0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0b6:	e002      	b.n	800b0be <UART_SetConfig+0x7aa>
 800b0b8:	2380      	movs	r3, #128	; 0x80
 800b0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a55      	ldr	r2, [pc, #340]	; (800b218 <UART_SetConfig+0x904>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	f040 80f0 	bne.w	800b2aa <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b0ce:	2b20      	cmp	r3, #32
 800b0d0:	dc46      	bgt.n	800b160 <UART_SetConfig+0x84c>
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	db75      	blt.n	800b1c2 <UART_SetConfig+0x8ae>
 800b0d6:	3b02      	subs	r3, #2
 800b0d8:	2b1e      	cmp	r3, #30
 800b0da:	d872      	bhi.n	800b1c2 <UART_SetConfig+0x8ae>
 800b0dc:	a201      	add	r2, pc, #4	; (adr r2, 800b0e4 <UART_SetConfig+0x7d0>)
 800b0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e2:	bf00      	nop
 800b0e4:	0800b167 	.word	0x0800b167
 800b0e8:	0800b1c3 	.word	0x0800b1c3
 800b0ec:	0800b16f 	.word	0x0800b16f
 800b0f0:	0800b1c3 	.word	0x0800b1c3
 800b0f4:	0800b1c3 	.word	0x0800b1c3
 800b0f8:	0800b1c3 	.word	0x0800b1c3
 800b0fc:	0800b17f 	.word	0x0800b17f
 800b100:	0800b1c3 	.word	0x0800b1c3
 800b104:	0800b1c3 	.word	0x0800b1c3
 800b108:	0800b1c3 	.word	0x0800b1c3
 800b10c:	0800b1c3 	.word	0x0800b1c3
 800b110:	0800b1c3 	.word	0x0800b1c3
 800b114:	0800b1c3 	.word	0x0800b1c3
 800b118:	0800b1c3 	.word	0x0800b1c3
 800b11c:	0800b18f 	.word	0x0800b18f
 800b120:	0800b1c3 	.word	0x0800b1c3
 800b124:	0800b1c3 	.word	0x0800b1c3
 800b128:	0800b1c3 	.word	0x0800b1c3
 800b12c:	0800b1c3 	.word	0x0800b1c3
 800b130:	0800b1c3 	.word	0x0800b1c3
 800b134:	0800b1c3 	.word	0x0800b1c3
 800b138:	0800b1c3 	.word	0x0800b1c3
 800b13c:	0800b1c3 	.word	0x0800b1c3
 800b140:	0800b1c3 	.word	0x0800b1c3
 800b144:	0800b1c3 	.word	0x0800b1c3
 800b148:	0800b1c3 	.word	0x0800b1c3
 800b14c:	0800b1c3 	.word	0x0800b1c3
 800b150:	0800b1c3 	.word	0x0800b1c3
 800b154:	0800b1c3 	.word	0x0800b1c3
 800b158:	0800b1c3 	.word	0x0800b1c3
 800b15c:	0800b1b5 	.word	0x0800b1b5
 800b160:	2b40      	cmp	r3, #64	; 0x40
 800b162:	d02a      	beq.n	800b1ba <UART_SetConfig+0x8a6>
 800b164:	e02d      	b.n	800b1c2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b166:	f7fc f82f 	bl	80071c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b16a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b16c:	e02f      	b.n	800b1ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b16e:	f107 0314 	add.w	r3, r7, #20
 800b172:	4618      	mov	r0, r3
 800b174:	f7fc f83e 	bl	80071f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b17c:	e027      	b.n	800b1ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b17e:	f107 0308 	add.w	r3, r7, #8
 800b182:	4618      	mov	r0, r3
 800b184:	f7fc f98a 	bl	800749c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b18c:	e01f      	b.n	800b1ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b18e:	4b21      	ldr	r3, [pc, #132]	; (800b214 <UART_SetConfig+0x900>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 0320 	and.w	r3, r3, #32
 800b196:	2b00      	cmp	r3, #0
 800b198:	d009      	beq.n	800b1ae <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b19a:	4b1e      	ldr	r3, [pc, #120]	; (800b214 <UART_SetConfig+0x900>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	08db      	lsrs	r3, r3, #3
 800b1a0:	f003 0303 	and.w	r3, r3, #3
 800b1a4:	4a1d      	ldr	r2, [pc, #116]	; (800b21c <UART_SetConfig+0x908>)
 800b1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1ac:	e00f      	b.n	800b1ce <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800b1ae:	4b1b      	ldr	r3, [pc, #108]	; (800b21c <UART_SetConfig+0x908>)
 800b1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1b2:	e00c      	b.n	800b1ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b1b4:	4b1a      	ldr	r3, [pc, #104]	; (800b220 <UART_SetConfig+0x90c>)
 800b1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1b8:	e009      	b.n	800b1ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1c0:	e005      	b.n	800b1ce <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b1cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 81e6 	beq.w	800b5a2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1da:	4a12      	ldr	r2, [pc, #72]	; (800b224 <UART_SetConfig+0x910>)
 800b1dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1e8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	005b      	lsls	r3, r3, #1
 800b1f2:	4413      	add	r3, r2
 800b1f4:	6a3a      	ldr	r2, [r7, #32]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d305      	bcc.n	800b206 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b200:	6a3a      	ldr	r2, [r7, #32]
 800b202:	429a      	cmp	r2, r3
 800b204:	d910      	bls.n	800b228 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b20c:	e1c9      	b.n	800b5a2 <UART_SetConfig+0xc8e>
 800b20e:	bf00      	nop
 800b210:	40011c00 	.word	0x40011c00
 800b214:	58024400 	.word	0x58024400
 800b218:	58000c00 	.word	0x58000c00
 800b21c:	03d09000 	.word	0x03d09000
 800b220:	003d0900 	.word	0x003d0900
 800b224:	0800cb78 	.word	0x0800cb78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22a:	4618      	mov	r0, r3
 800b22c:	f04f 0100 	mov.w	r1, #0
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b234:	4ac1      	ldr	r2, [pc, #772]	; (800b53c <UART_SetConfig+0xc28>)
 800b236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	f04f 0300 	mov.w	r3, #0
 800b240:	f7f5 f854 	bl	80002ec <__aeabi_uldivmod>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	4610      	mov	r0, r2
 800b24a:	4619      	mov	r1, r3
 800b24c:	f04f 0200 	mov.w	r2, #0
 800b250:	f04f 0300 	mov.w	r3, #0
 800b254:	020b      	lsls	r3, r1, #8
 800b256:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b25a:	0202      	lsls	r2, r0, #8
 800b25c:	6879      	ldr	r1, [r7, #4]
 800b25e:	6849      	ldr	r1, [r1, #4]
 800b260:	0849      	lsrs	r1, r1, #1
 800b262:	4608      	mov	r0, r1
 800b264:	f04f 0100 	mov.w	r1, #0
 800b268:	1814      	adds	r4, r2, r0
 800b26a:	eb43 0501 	adc.w	r5, r3, r1
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	461a      	mov	r2, r3
 800b274:	f04f 0300 	mov.w	r3, #0
 800b278:	4620      	mov	r0, r4
 800b27a:	4629      	mov	r1, r5
 800b27c:	f7f5 f836 	bl	80002ec <__aeabi_uldivmod>
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	4613      	mov	r3, r2
 800b286:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b28e:	d308      	bcc.n	800b2a2 <UART_SetConfig+0x98e>
 800b290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b296:	d204      	bcs.n	800b2a2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b29e:	60da      	str	r2, [r3, #12]
 800b2a0:	e17f      	b.n	800b5a2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b2a8:	e17b      	b.n	800b5a2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2b2:	f040 80bd 	bne.w	800b430 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800b2b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b2ba:	2b20      	cmp	r3, #32
 800b2bc:	dc48      	bgt.n	800b350 <UART_SetConfig+0xa3c>
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	db7b      	blt.n	800b3ba <UART_SetConfig+0xaa6>
 800b2c2:	2b20      	cmp	r3, #32
 800b2c4:	d879      	bhi.n	800b3ba <UART_SetConfig+0xaa6>
 800b2c6:	a201      	add	r2, pc, #4	; (adr r2, 800b2cc <UART_SetConfig+0x9b8>)
 800b2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2cc:	0800b357 	.word	0x0800b357
 800b2d0:	0800b35f 	.word	0x0800b35f
 800b2d4:	0800b3bb 	.word	0x0800b3bb
 800b2d8:	0800b3bb 	.word	0x0800b3bb
 800b2dc:	0800b367 	.word	0x0800b367
 800b2e0:	0800b3bb 	.word	0x0800b3bb
 800b2e4:	0800b3bb 	.word	0x0800b3bb
 800b2e8:	0800b3bb 	.word	0x0800b3bb
 800b2ec:	0800b377 	.word	0x0800b377
 800b2f0:	0800b3bb 	.word	0x0800b3bb
 800b2f4:	0800b3bb 	.word	0x0800b3bb
 800b2f8:	0800b3bb 	.word	0x0800b3bb
 800b2fc:	0800b3bb 	.word	0x0800b3bb
 800b300:	0800b3bb 	.word	0x0800b3bb
 800b304:	0800b3bb 	.word	0x0800b3bb
 800b308:	0800b3bb 	.word	0x0800b3bb
 800b30c:	0800b387 	.word	0x0800b387
 800b310:	0800b3bb 	.word	0x0800b3bb
 800b314:	0800b3bb 	.word	0x0800b3bb
 800b318:	0800b3bb 	.word	0x0800b3bb
 800b31c:	0800b3bb 	.word	0x0800b3bb
 800b320:	0800b3bb 	.word	0x0800b3bb
 800b324:	0800b3bb 	.word	0x0800b3bb
 800b328:	0800b3bb 	.word	0x0800b3bb
 800b32c:	0800b3bb 	.word	0x0800b3bb
 800b330:	0800b3bb 	.word	0x0800b3bb
 800b334:	0800b3bb 	.word	0x0800b3bb
 800b338:	0800b3bb 	.word	0x0800b3bb
 800b33c:	0800b3bb 	.word	0x0800b3bb
 800b340:	0800b3bb 	.word	0x0800b3bb
 800b344:	0800b3bb 	.word	0x0800b3bb
 800b348:	0800b3bb 	.word	0x0800b3bb
 800b34c:	0800b3ad 	.word	0x0800b3ad
 800b350:	2b40      	cmp	r3, #64	; 0x40
 800b352:	d02e      	beq.n	800b3b2 <UART_SetConfig+0xa9e>
 800b354:	e031      	b.n	800b3ba <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b356:	f7fa fbd5 	bl	8005b04 <HAL_RCC_GetPCLK1Freq>
 800b35a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b35c:	e033      	b.n	800b3c6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b35e:	f7fa fbe7 	bl	8005b30 <HAL_RCC_GetPCLK2Freq>
 800b362:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b364:	e02f      	b.n	800b3c6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b366:	f107 0314 	add.w	r3, r7, #20
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fb ff42 	bl	80071f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b374:	e027      	b.n	800b3c6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b376:	f107 0308 	add.w	r3, r7, #8
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fc f88e 	bl	800749c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b384:	e01f      	b.n	800b3c6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b386:	4b6e      	ldr	r3, [pc, #440]	; (800b540 <UART_SetConfig+0xc2c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0320 	and.w	r3, r3, #32
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d009      	beq.n	800b3a6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b392:	4b6b      	ldr	r3, [pc, #428]	; (800b540 <UART_SetConfig+0xc2c>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	08db      	lsrs	r3, r3, #3
 800b398:	f003 0303 	and.w	r3, r3, #3
 800b39c:	4a69      	ldr	r2, [pc, #420]	; (800b544 <UART_SetConfig+0xc30>)
 800b39e:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3a4:	e00f      	b.n	800b3c6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800b3a6:	4b67      	ldr	r3, [pc, #412]	; (800b544 <UART_SetConfig+0xc30>)
 800b3a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3aa:	e00c      	b.n	800b3c6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3ac:	4b66      	ldr	r3, [pc, #408]	; (800b548 <UART_SetConfig+0xc34>)
 800b3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3b0:	e009      	b.n	800b3c6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3b8:	e005      	b.n	800b3c6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b3c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f000 80ea 	beq.w	800b5a2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d2:	4a5a      	ldr	r2, [pc, #360]	; (800b53c <UART_SetConfig+0xc28>)
 800b3d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3e0:	005a      	lsls	r2, r3, #1
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	085b      	lsrs	r3, r3, #1
 800b3e8:	441a      	add	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f6:	2b0f      	cmp	r3, #15
 800b3f8:	d916      	bls.n	800b428 <UART_SetConfig+0xb14>
 800b3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b400:	d212      	bcs.n	800b428 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b404:	b29b      	uxth	r3, r3
 800b406:	f023 030f 	bic.w	r3, r3, #15
 800b40a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40e:	085b      	lsrs	r3, r3, #1
 800b410:	b29b      	uxth	r3, r3
 800b412:	f003 0307 	and.w	r3, r3, #7
 800b416:	b29a      	uxth	r2, r3
 800b418:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b41a:	4313      	orrs	r3, r2
 800b41c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b424:	60da      	str	r2, [r3, #12]
 800b426:	e0bc      	b.n	800b5a2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b42e:	e0b8      	b.n	800b5a2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b430:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b434:	2b20      	cmp	r3, #32
 800b436:	dc4b      	bgt.n	800b4d0 <UART_SetConfig+0xbbc>
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f2c0 8087 	blt.w	800b54c <UART_SetConfig+0xc38>
 800b43e:	2b20      	cmp	r3, #32
 800b440:	f200 8084 	bhi.w	800b54c <UART_SetConfig+0xc38>
 800b444:	a201      	add	r2, pc, #4	; (adr r2, 800b44c <UART_SetConfig+0xb38>)
 800b446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44a:	bf00      	nop
 800b44c:	0800b4d7 	.word	0x0800b4d7
 800b450:	0800b4df 	.word	0x0800b4df
 800b454:	0800b54d 	.word	0x0800b54d
 800b458:	0800b54d 	.word	0x0800b54d
 800b45c:	0800b4e7 	.word	0x0800b4e7
 800b460:	0800b54d 	.word	0x0800b54d
 800b464:	0800b54d 	.word	0x0800b54d
 800b468:	0800b54d 	.word	0x0800b54d
 800b46c:	0800b4f7 	.word	0x0800b4f7
 800b470:	0800b54d 	.word	0x0800b54d
 800b474:	0800b54d 	.word	0x0800b54d
 800b478:	0800b54d 	.word	0x0800b54d
 800b47c:	0800b54d 	.word	0x0800b54d
 800b480:	0800b54d 	.word	0x0800b54d
 800b484:	0800b54d 	.word	0x0800b54d
 800b488:	0800b54d 	.word	0x0800b54d
 800b48c:	0800b507 	.word	0x0800b507
 800b490:	0800b54d 	.word	0x0800b54d
 800b494:	0800b54d 	.word	0x0800b54d
 800b498:	0800b54d 	.word	0x0800b54d
 800b49c:	0800b54d 	.word	0x0800b54d
 800b4a0:	0800b54d 	.word	0x0800b54d
 800b4a4:	0800b54d 	.word	0x0800b54d
 800b4a8:	0800b54d 	.word	0x0800b54d
 800b4ac:	0800b54d 	.word	0x0800b54d
 800b4b0:	0800b54d 	.word	0x0800b54d
 800b4b4:	0800b54d 	.word	0x0800b54d
 800b4b8:	0800b54d 	.word	0x0800b54d
 800b4bc:	0800b54d 	.word	0x0800b54d
 800b4c0:	0800b54d 	.word	0x0800b54d
 800b4c4:	0800b54d 	.word	0x0800b54d
 800b4c8:	0800b54d 	.word	0x0800b54d
 800b4cc:	0800b52d 	.word	0x0800b52d
 800b4d0:	2b40      	cmp	r3, #64	; 0x40
 800b4d2:	d02e      	beq.n	800b532 <UART_SetConfig+0xc1e>
 800b4d4:	e03a      	b.n	800b54c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4d6:	f7fa fb15 	bl	8005b04 <HAL_RCC_GetPCLK1Freq>
 800b4da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b4dc:	e03c      	b.n	800b558 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4de:	f7fa fb27 	bl	8005b30 <HAL_RCC_GetPCLK2Freq>
 800b4e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b4e4:	e038      	b.n	800b558 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4e6:	f107 0314 	add.w	r3, r7, #20
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fb fe82 	bl	80071f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4f4:	e030      	b.n	800b558 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4f6:	f107 0308 	add.w	r3, r7, #8
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fb ffce 	bl	800749c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b504:	e028      	b.n	800b558 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b506:	4b0e      	ldr	r3, [pc, #56]	; (800b540 <UART_SetConfig+0xc2c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0320 	and.w	r3, r3, #32
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d009      	beq.n	800b526 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b512:	4b0b      	ldr	r3, [pc, #44]	; (800b540 <UART_SetConfig+0xc2c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	08db      	lsrs	r3, r3, #3
 800b518:	f003 0303 	and.w	r3, r3, #3
 800b51c:	4a09      	ldr	r2, [pc, #36]	; (800b544 <UART_SetConfig+0xc30>)
 800b51e:	fa22 f303 	lsr.w	r3, r2, r3
 800b522:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b524:	e018      	b.n	800b558 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800b526:	4b07      	ldr	r3, [pc, #28]	; (800b544 <UART_SetConfig+0xc30>)
 800b528:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b52a:	e015      	b.n	800b558 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b52c:	4b06      	ldr	r3, [pc, #24]	; (800b548 <UART_SetConfig+0xc34>)
 800b52e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b530:	e012      	b.n	800b558 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b536:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b538:	e00e      	b.n	800b558 <UART_SetConfig+0xc44>
 800b53a:	bf00      	nop
 800b53c:	0800cb78 	.word	0x0800cb78
 800b540:	58024400 	.word	0x58024400
 800b544:	03d09000 	.word	0x03d09000
 800b548:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b54c:	2300      	movs	r3, #0
 800b54e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b556:	bf00      	nop
    }

    if (pclk != 0U)
 800b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d021      	beq.n	800b5a2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b562:	4a1a      	ldr	r2, [pc, #104]	; (800b5cc <UART_SetConfig+0xcb8>)
 800b564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b568:	461a      	mov	r2, r3
 800b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	085b      	lsrs	r3, r3, #1
 800b576:	441a      	add	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b580:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b584:	2b0f      	cmp	r3, #15
 800b586:	d909      	bls.n	800b59c <UART_SetConfig+0xc88>
 800b588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b58e:	d205      	bcs.n	800b59c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b592:	b29a      	uxth	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	60da      	str	r2, [r3, #12]
 800b59a:	e002      	b.n	800b5a2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b5be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3738      	adds	r7, #56	; 0x38
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bdb0      	pop	{r4, r5, r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	0800cb78 	.word	0x0800cb78

0800b5d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00a      	beq.n	800b5fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fe:	f003 0302 	and.w	r3, r3, #2
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00a      	beq.n	800b61c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	430a      	orrs	r2, r1
 800b61a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b620:	f003 0304 	and.w	r3, r3, #4
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00a      	beq.n	800b63e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	430a      	orrs	r2, r1
 800b63c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b642:	f003 0308 	and.w	r3, r3, #8
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	430a      	orrs	r2, r1
 800b65e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b664:	f003 0310 	and.w	r3, r3, #16
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00a      	beq.n	800b682 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	430a      	orrs	r2, r1
 800b680:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b686:	f003 0320 	and.w	r3, r3, #32
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00a      	beq.n	800b6a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	430a      	orrs	r2, r1
 800b6a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d01a      	beq.n	800b6e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	430a      	orrs	r2, r1
 800b6c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6ce:	d10a      	bne.n	800b6e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	430a      	orrs	r2, r1
 800b6e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00a      	beq.n	800b708 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	430a      	orrs	r2, r1
 800b706:	605a      	str	r2, [r3, #4]
  }
}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af02      	add	r7, sp, #8
 800b71a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b724:	f7f5 fe90 	bl	8001448 <HAL_GetTick>
 800b728:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 0308 	and.w	r3, r3, #8
 800b734:	2b08      	cmp	r3, #8
 800b736:	d10e      	bne.n	800b756 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b738:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2200      	movs	r2, #0
 800b742:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f82f 	bl	800b7aa <UART_WaitOnFlagUntilTimeout>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b752:	2303      	movs	r3, #3
 800b754:	e025      	b.n	800b7a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 0304 	and.w	r3, r3, #4
 800b760:	2b04      	cmp	r3, #4
 800b762:	d10e      	bne.n	800b782 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b768:	9300      	str	r3, [sp, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 f819 	bl	800b7aa <UART_WaitOnFlagUntilTimeout>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	e00f      	b.n	800b7a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2220      	movs	r2, #32
 800b786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2220      	movs	r2, #32
 800b78e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b09c      	sub	sp, #112	; 0x70
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	60b9      	str	r1, [r7, #8]
 800b7b4:	603b      	str	r3, [r7, #0]
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7ba:	e0a9      	b.n	800b910 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c2:	f000 80a5 	beq.w	800b910 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7c6:	f7f5 fe3f 	bl	8001448 <HAL_GetTick>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d302      	bcc.n	800b7dc <UART_WaitOnFlagUntilTimeout+0x32>
 800b7d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d140      	bne.n	800b85e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7e4:	e853 3f00 	ldrex	r3, [r3]
 800b7e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b7ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b7f0:	667b      	str	r3, [r7, #100]	; 0x64
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b800:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b802:	e841 2300 	strex	r3, r2, [r1]
 800b806:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1e6      	bne.n	800b7dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3308      	adds	r3, #8
 800b814:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b818:	e853 3f00 	ldrex	r3, [r3]
 800b81c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b820:	f023 0301 	bic.w	r3, r3, #1
 800b824:	663b      	str	r3, [r7, #96]	; 0x60
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3308      	adds	r3, #8
 800b82c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b82e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b830:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b832:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b836:	e841 2300 	strex	r3, r2, [r1]
 800b83a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d1e5      	bne.n	800b80e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2220      	movs	r2, #32
 800b846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2220      	movs	r2, #32
 800b84e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2200      	movs	r2, #0
 800b856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b85a:	2303      	movs	r3, #3
 800b85c:	e069      	b.n	800b932 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 0304 	and.w	r3, r3, #4
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d051      	beq.n	800b910 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	69db      	ldr	r3, [r3, #28]
 800b872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b87a:	d149      	bne.n	800b910 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b884:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88e:	e853 3f00 	ldrex	r3, [r3]
 800b892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b89a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b8a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8ac:	e841 2300 	strex	r3, r2, [r1]
 800b8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1e6      	bne.n	800b886 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3308      	adds	r3, #8
 800b8be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	e853 3f00 	ldrex	r3, [r3]
 800b8c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	f023 0301 	bic.w	r3, r3, #1
 800b8ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	3308      	adds	r3, #8
 800b8d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b8d8:	623a      	str	r2, [r7, #32]
 800b8da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8dc:	69f9      	ldr	r1, [r7, #28]
 800b8de:	6a3a      	ldr	r2, [r7, #32]
 800b8e0:	e841 2300 	strex	r3, r2, [r1]
 800b8e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e5      	bne.n	800b8b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2220      	movs	r2, #32
 800b8f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2220      	movs	r2, #32
 800b8f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2220      	movs	r2, #32
 800b900:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b90c:	2303      	movs	r3, #3
 800b90e:	e010      	b.n	800b932 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	69da      	ldr	r2, [r3, #28]
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	4013      	ands	r3, r2
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	bf0c      	ite	eq
 800b920:	2301      	moveq	r3, #1
 800b922:	2300      	movne	r3, #0
 800b924:	b2db      	uxtb	r3, r3
 800b926:	461a      	mov	r2, r3
 800b928:	79fb      	ldrb	r3, [r7, #7]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	f43f af46 	beq.w	800b7bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3770      	adds	r7, #112	; 0x70
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b085      	sub	sp, #20
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d101      	bne.n	800b950 <HAL_UARTEx_DisableFifoMode+0x16>
 800b94c:	2302      	movs	r3, #2
 800b94e:	e027      	b.n	800b9a0 <HAL_UARTEx_DisableFifoMode+0x66>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2224      	movs	r2, #36	; 0x24
 800b95c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f022 0201 	bic.w	r2, r2, #1
 800b976:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b97e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2220      	movs	r2, #32
 800b992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3714      	adds	r7, #20
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d101      	bne.n	800b9c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	e02d      	b.n	800ba20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2224      	movs	r2, #36	; 0x24
 800b9d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f022 0201 	bic.w	r2, r2, #1
 800b9ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	430a      	orrs	r2, r1
 800b9fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f84f 	bl	800baa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2220      	movs	r2, #32
 800ba12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d101      	bne.n	800ba40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	e02d      	b.n	800ba9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2224      	movs	r2, #36	; 0x24
 800ba4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f022 0201 	bic.w	r2, r2, #1
 800ba66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	683a      	ldr	r2, [r7, #0]
 800ba78:	430a      	orrs	r2, r1
 800ba7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 f811 	bl	800baa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2220      	movs	r2, #32
 800ba8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d108      	bne.n	800bac6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bac4:	e031      	b.n	800bb2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bac6:	2310      	movs	r3, #16
 800bac8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800baca:	2310      	movs	r3, #16
 800bacc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	0e5b      	lsrs	r3, r3, #25
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	f003 0307 	and.w	r3, r3, #7
 800badc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	0f5b      	lsrs	r3, r3, #29
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	f003 0307 	and.w	r3, r3, #7
 800baec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800baee:	7bbb      	ldrb	r3, [r7, #14]
 800baf0:	7b3a      	ldrb	r2, [r7, #12]
 800baf2:	4911      	ldr	r1, [pc, #68]	; (800bb38 <UARTEx_SetNbDataToProcess+0x94>)
 800baf4:	5c8a      	ldrb	r2, [r1, r2]
 800baf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bafa:	7b3a      	ldrb	r2, [r7, #12]
 800bafc:	490f      	ldr	r1, [pc, #60]	; (800bb3c <UARTEx_SetNbDataToProcess+0x98>)
 800bafe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb00:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
 800bb0e:	7b7a      	ldrb	r2, [r7, #13]
 800bb10:	4909      	ldr	r1, [pc, #36]	; (800bb38 <UARTEx_SetNbDataToProcess+0x94>)
 800bb12:	5c8a      	ldrb	r2, [r1, r2]
 800bb14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb18:	7b7a      	ldrb	r2, [r7, #13]
 800bb1a:	4908      	ldr	r1, [pc, #32]	; (800bb3c <UARTEx_SetNbDataToProcess+0x98>)
 800bb1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb22:	b29a      	uxth	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bb2a:	bf00      	nop
 800bb2c:	3714      	adds	r7, #20
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	0800cb90 	.word	0x0800cb90
 800bb3c:	0800cb98 	.word	0x0800cb98

0800bb40 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bb40:	b084      	sub	sp, #16
 800bb42:	b480      	push	{r7}
 800bb44:	b085      	sub	sp, #20
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	f107 001c 	add.w	r0, r7, #28
 800bb4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bb52:	2300      	movs	r3, #0
 800bb54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800bb56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800bb58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800bb5a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800bb5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800bb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800bb62:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800bb66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	685a      	ldr	r2, [r3, #4]
 800bb72:	4b07      	ldr	r3, [pc, #28]	; (800bb90 <SDMMC_Init+0x50>)
 800bb74:	4013      	ands	r3, r2
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	431a      	orrs	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3714      	adds	r7, #20
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	b004      	add	sp, #16
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	ffc02c00 	.word	0xffc02c00

0800bb94 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b083      	sub	sp, #12
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f043 0203 	orr.w	r2, r3, #3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b083      	sub	sp, #12
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f003 0303 	and.w	r3, r3, #3
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	370c      	adds	r7, #12
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
	...

0800bc10 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bc2e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800bc34:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800bc3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68da      	ldr	r2, [r3, #12]
 800bc46:	4b06      	ldr	r3, [pc, #24]	; (800bc60 <SDMMC_SendCommand+0x50>)
 800bc48:	4013      	ands	r3, r2
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	431a      	orrs	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr
 800bc60:	fffee0c0 	.word	0xfffee0c0

0800bc64 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	b2db      	uxtb	r3, r3
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	370c      	adds	r7, #12
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b085      	sub	sp, #20
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
 800bc86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	3314      	adds	r3, #20
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	4413      	add	r3, r2
 800bc92:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	685a      	ldr	r2, [r3, #4]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bcca:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800bcd0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800bcd6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	431a      	orrs	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bcee:	2300      	movs	r3, #0

}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3714      	adds	r7, #20
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b088      	sub	sp, #32
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bd0a:	2310      	movs	r3, #16
 800bd0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd14:	2300      	movs	r3, #0
 800bd16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd1e:	f107 0308 	add.w	r3, r7, #8
 800bd22:	4619      	mov	r1, r3
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f7ff ff73 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bd2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd2e:	2110      	movs	r1, #16
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 fa5f 	bl	800c1f4 <SDMMC_GetCmdResp1>
 800bd36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd38:	69fb      	ldr	r3, [r7, #28]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3720      	adds	r7, #32
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b088      	sub	sp, #32
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bd50:	2311      	movs	r3, #17
 800bd52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd64:	f107 0308 	add.w	r3, r7, #8
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7ff ff50 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bd70:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd74:	2111      	movs	r1, #17
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 fa3c 	bl	800c1f4 <SDMMC_GetCmdResp1>
 800bd7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd7e:	69fb      	ldr	r3, [r7, #28]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3720      	adds	r7, #32
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b088      	sub	sp, #32
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bd96:	2312      	movs	r3, #18
 800bd98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bda0:	2300      	movs	r3, #0
 800bda2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bda4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bda8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdaa:	f107 0308 	add.w	r3, r7, #8
 800bdae:	4619      	mov	r1, r3
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f7ff ff2d 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bdb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdba:	2112      	movs	r1, #18
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fa19 	bl	800c1f4 <SDMMC_GetCmdResp1>
 800bdc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdc4:	69fb      	ldr	r3, [r7, #28]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3720      	adds	r7, #32
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b088      	sub	sp, #32
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bddc:	2318      	movs	r3, #24
 800bdde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bde0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bde4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bde6:	2300      	movs	r3, #0
 800bde8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdf0:	f107 0308 	add.w	r3, r7, #8
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7ff ff0a 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bdfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800be00:	2118      	movs	r1, #24
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 f9f6 	bl	800c1f4 <SDMMC_GetCmdResp1>
 800be08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be0a:	69fb      	ldr	r3, [r7, #28]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3720      	adds	r7, #32
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b088      	sub	sp, #32
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800be22:	2319      	movs	r3, #25
 800be24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be2c:	2300      	movs	r3, #0
 800be2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be36:	f107 0308 	add.w	r3, r7, #8
 800be3a:	4619      	mov	r1, r3
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7ff fee7 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800be42:	f241 3288 	movw	r2, #5000	; 0x1388
 800be46:	2119      	movs	r1, #25
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 f9d3 	bl	800c1f4 <SDMMC_GetCmdResp1>
 800be4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be50:	69fb      	ldr	r3, [r7, #28]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3720      	adds	r7, #32
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
	...

0800be5c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b088      	sub	sp, #32
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800be64:	2300      	movs	r3, #0
 800be66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800be68:	230c      	movs	r3, #12
 800be6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be72:	2300      	movs	r3, #0
 800be74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be7a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be94:	f107 0308 	add.w	r3, r7, #8
 800be98:	4619      	mov	r1, r3
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f7ff feb8 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bea0:	4a0b      	ldr	r2, [pc, #44]	; (800bed0 <SDMMC_CmdStopTransfer+0x74>)
 800bea2:	210c      	movs	r1, #12
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 f9a5 	bl	800c1f4 <SDMMC_GetCmdResp1>
 800beaa:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bebe:	d101      	bne.n	800bec4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800bec0:	2300      	movs	r3, #0
 800bec2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800bec4:	69fb      	ldr	r3, [r7, #28]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3720      	adds	r7, #32
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	05f5e100 	.word	0x05f5e100

0800bed4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bee2:	2307      	movs	r3, #7
 800bee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800beea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beec:	2300      	movs	r3, #0
 800beee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bef4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bef6:	f107 0308 	add.w	r3, r7, #8
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f7ff fe87 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bf02:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf06:	2107      	movs	r1, #7
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 f973 	bl	800c1f4 <SDMMC_GetCmdResp1>
 800bf0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf10:	69fb      	ldr	r3, [r7, #28]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3720      	adds	r7, #32
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b088      	sub	sp, #32
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bf22:	2300      	movs	r3, #0
 800bf24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bf26:	2300      	movs	r3, #0
 800bf28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf38:	f107 0308 	add.w	r3, r7, #8
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f7ff fe66 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fb97 	bl	800c678 <SDMMC_GetCmdError>
 800bf4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf4c:	69fb      	ldr	r3, [r7, #28]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3720      	adds	r7, #32
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b088      	sub	sp, #32
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bf5e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bf62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bf64:	2308      	movs	r3, #8
 800bf66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf78:	f107 0308 	add.w	r3, r7, #8
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7ff fe46 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 fb29 	bl	800c5dc <SDMMC_GetCmdResp7>
 800bf8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf8c:	69fb      	ldr	r3, [r7, #28]
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3720      	adds	r7, #32
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b088      	sub	sp, #32
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bfa4:	2337      	movs	r3, #55	; 0x37
 800bfa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfb8:	f107 0308 	add.w	r3, r7, #8
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7ff fe26 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bfc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfc8:	2137      	movs	r1, #55	; 0x37
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f912 	bl	800c1f4 <SDMMC_GetCmdResp1>
 800bfd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfd2:	69fb      	ldr	r3, [r7, #28]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3720      	adds	r7, #32
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bfea:	2329      	movs	r3, #41	; 0x29
 800bfec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bff4:	2300      	movs	r3, #0
 800bff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bffc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bffe:	f107 0308 	add.w	r3, r7, #8
 800c002:	4619      	mov	r1, r3
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7ff fe03 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fa2e 	bl	800c46c <SDMMC_GetCmdResp3>
 800c010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c012:	69fb      	ldr	r3, [r7, #28]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3720      	adds	r7, #32
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b088      	sub	sp, #32
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c02a:	2306      	movs	r3, #6
 800c02c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c02e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c034:	2300      	movs	r3, #0
 800c036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c03c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c03e:	f107 0308 	add.w	r3, r7, #8
 800c042:	4619      	mov	r1, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7ff fde3 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c04a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c04e:	2106      	movs	r1, #6
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 f8cf 	bl	800c1f4 <SDMMC_GetCmdResp1>
 800c056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c058:	69fb      	ldr	r3, [r7, #28]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3720      	adds	r7, #32
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b088      	sub	sp, #32
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c06a:	2300      	movs	r3, #0
 800c06c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c06e:	2333      	movs	r3, #51	; 0x33
 800c070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c072:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c078:	2300      	movs	r3, #0
 800c07a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c07c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c080:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c082:	f107 0308 	add.w	r3, r7, #8
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f7ff fdc1 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c08e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c092:	2133      	movs	r1, #51	; 0x33
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 f8ad 	bl	800c1f4 <SDMMC_GetCmdResp1>
 800c09a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c09c:	69fb      	ldr	r3, [r7, #28]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3720      	adds	r7, #32
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b088      	sub	sp, #32
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c0b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c0ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0c6:	f107 0308 	add.w	r3, r7, #8
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f7ff fd9f 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f980 	bl	800c3d8 <SDMMC_GetCmdResp2>
 800c0d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0da:	69fb      	ldr	r3, [r7, #28]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3720      	adds	r7, #32
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b088      	sub	sp, #32
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c0f2:	2309      	movs	r3, #9
 800c0f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c0f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c0fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c104:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c106:	f107 0308 	add.w	r3, r7, #8
 800c10a:	4619      	mov	r1, r3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7ff fd7f 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f960 	bl	800c3d8 <SDMMC_GetCmdResp2>
 800c118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c11a:	69fb      	ldr	r3, [r7, #28]
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3720      	adds	r7, #32
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b088      	sub	sp, #32
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c12e:	2300      	movs	r3, #0
 800c130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c132:	2303      	movs	r3, #3
 800c134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c13a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c13c:	2300      	movs	r3, #0
 800c13e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c144:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c146:	f107 0308 	add.w	r3, r7, #8
 800c14a:	4619      	mov	r1, r3
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7ff fd5f 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	2103      	movs	r1, #3
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f9c8 	bl	800c4ec <SDMMC_GetCmdResp6>
 800c15c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c15e:	69fb      	ldr	r3, [r7, #28]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3720      	adds	r7, #32
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b088      	sub	sp, #32
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c176:	230d      	movs	r3, #13
 800c178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c17a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c17e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c180:	2300      	movs	r3, #0
 800c182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c188:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c18a:	f107 0308 	add.w	r3, r7, #8
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff fd3d 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c196:	f241 3288 	movw	r2, #5000	; 0x1388
 800c19a:	210d      	movs	r1, #13
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 f829 	bl	800c1f4 <SDMMC_GetCmdResp1>
 800c1a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1a4:	69fb      	ldr	r3, [r7, #28]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3720      	adds	r7, #32
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b088      	sub	sp, #32
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c1ba:	230d      	movs	r3, #13
 800c1bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1ce:	f107 0308 	add.w	r3, r7, #8
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7ff fd1b 	bl	800bc10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c1da:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1de:	210d      	movs	r1, #13
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 f807 	bl	800c1f4 <SDMMC_GetCmdResp1>
 800c1e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1e8:	69fb      	ldr	r3, [r7, #28]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3720      	adds	r7, #32
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
	...

0800c1f4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b088      	sub	sp, #32
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	607a      	str	r2, [r7, #4]
 800c200:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c202:	4b70      	ldr	r3, [pc, #448]	; (800c3c4 <SDMMC_GetCmdResp1+0x1d0>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a70      	ldr	r2, [pc, #448]	; (800c3c8 <SDMMC_GetCmdResp1+0x1d4>)
 800c208:	fba2 2303 	umull	r2, r3, r2, r3
 800c20c:	0a5a      	lsrs	r2, r3, #9
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	fb02 f303 	mul.w	r3, r2, r3
 800c214:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	1e5a      	subs	r2, r3, #1
 800c21a:	61fa      	str	r2, [r7, #28]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d102      	bne.n	800c226 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c220:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c224:	e0c9      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c22a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c22c:	69ba      	ldr	r2, [r7, #24]
 800c22e:	4b67      	ldr	r3, [pc, #412]	; (800c3cc <SDMMC_GetCmdResp1+0x1d8>)
 800c230:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c232:	2b00      	cmp	r3, #0
 800c234:	d0ef      	beq.n	800c216 <SDMMC_GetCmdResp1+0x22>
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1ea      	bne.n	800c216 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c244:	f003 0304 	and.w	r3, r3, #4
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d004      	beq.n	800c256 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2204      	movs	r2, #4
 800c250:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c252:	2304      	movs	r3, #4
 800c254:	e0b1      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c25a:	f003 0301 	and.w	r3, r3, #1
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d004      	beq.n	800c26c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2201      	movs	r2, #1
 800c266:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c268:	2301      	movs	r3, #1
 800c26a:	e0a6      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	4a58      	ldr	r2, [pc, #352]	; (800c3d0 <SDMMC_GetCmdResp1+0x1dc>)
 800c270:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f7ff fcf6 	bl	800bc64 <SDMMC_GetCommandResponse>
 800c278:	4603      	mov	r3, r0
 800c27a:	461a      	mov	r2, r3
 800c27c:	7afb      	ldrb	r3, [r7, #11]
 800c27e:	4293      	cmp	r3, r2
 800c280:	d001      	beq.n	800c286 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c282:	2301      	movs	r3, #1
 800c284:	e099      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c286:	2100      	movs	r1, #0
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f7ff fcf8 	bl	800bc7e <SDMMC_GetResponse>
 800c28e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c290:	697a      	ldr	r2, [r7, #20]
 800c292:	4b50      	ldr	r3, [pc, #320]	; (800c3d4 <SDMMC_GetCmdResp1+0x1e0>)
 800c294:	4013      	ands	r3, r2
 800c296:	2b00      	cmp	r3, #0
 800c298:	d101      	bne.n	800c29e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c29a:	2300      	movs	r3, #0
 800c29c:	e08d      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	da02      	bge.n	800c2aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c2a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2a8:	e087      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d001      	beq.n	800c2b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c2b4:	2340      	movs	r3, #64	; 0x40
 800c2b6:	e080      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d001      	beq.n	800c2c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c2c2:	2380      	movs	r3, #128	; 0x80
 800c2c4:	e079      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d002      	beq.n	800c2d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c2d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2d4:	e071      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d002      	beq.n	800c2e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c2e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2e4:	e069      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d002      	beq.n	800c2f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c2f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2f4:	e061      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d002      	beq.n	800c306 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c304:	e059      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d002      	beq.n	800c316 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c314:	e051      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c324:	e049      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d002      	beq.n	800c336 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c334:	e041      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d002      	beq.n	800c346 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c344:	e039      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d002      	beq.n	800c356 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c354:	e031      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d002      	beq.n	800c366 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c360:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c364:	e029      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d002      	beq.n	800c376 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c370:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c374:	e021      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c380:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c384:	e019      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d002      	beq.n	800c396 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c390:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c394:	e011      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d002      	beq.n	800c3a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c3a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c3a4:	e009      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	f003 0308 	and.w	r3, r3, #8
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d002      	beq.n	800c3b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c3b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c3b4:	e001      	b.n	800c3ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c3b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3720      	adds	r7, #32
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	24000000 	.word	0x24000000
 800c3c8:	10624dd3 	.word	0x10624dd3
 800c3cc:	00200045 	.word	0x00200045
 800c3d0:	002000c5 	.word	0x002000c5
 800c3d4:	fdffe008 	.word	0xfdffe008

0800c3d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c3e0:	4b1f      	ldr	r3, [pc, #124]	; (800c460 <SDMMC_GetCmdResp2+0x88>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a1f      	ldr	r2, [pc, #124]	; (800c464 <SDMMC_GetCmdResp2+0x8c>)
 800c3e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ea:	0a5b      	lsrs	r3, r3, #9
 800c3ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3f0:	fb02 f303 	mul.w	r3, r2, r3
 800c3f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	1e5a      	subs	r2, r3, #1
 800c3fa:	60fa      	str	r2, [r7, #12]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d102      	bne.n	800c406 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c404:	e026      	b.n	800c454 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c40a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c412:	2b00      	cmp	r3, #0
 800c414:	d0ef      	beq.n	800c3f6 <SDMMC_GetCmdResp2+0x1e>
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d1ea      	bne.n	800c3f6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d004      	beq.n	800c436 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2204      	movs	r2, #4
 800c430:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c432:	2304      	movs	r3, #4
 800c434:	e00e      	b.n	800c454 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43a:	f003 0301 	and.w	r3, r3, #1
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d004      	beq.n	800c44c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c448:	2301      	movs	r3, #1
 800c44a:	e003      	b.n	800c454 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a06      	ldr	r2, [pc, #24]	; (800c468 <SDMMC_GetCmdResp2+0x90>)
 800c450:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c452:	2300      	movs	r3, #0
}
 800c454:	4618      	mov	r0, r3
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr
 800c460:	24000000 	.word	0x24000000
 800c464:	10624dd3 	.word	0x10624dd3
 800c468:	002000c5 	.word	0x002000c5

0800c46c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c474:	4b1a      	ldr	r3, [pc, #104]	; (800c4e0 <SDMMC_GetCmdResp3+0x74>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a1a      	ldr	r2, [pc, #104]	; (800c4e4 <SDMMC_GetCmdResp3+0x78>)
 800c47a:	fba2 2303 	umull	r2, r3, r2, r3
 800c47e:	0a5b      	lsrs	r3, r3, #9
 800c480:	f241 3288 	movw	r2, #5000	; 0x1388
 800c484:	fb02 f303 	mul.w	r3, r2, r3
 800c488:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	1e5a      	subs	r2, r3, #1
 800c48e:	60fa      	str	r2, [r7, #12]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d102      	bne.n	800c49a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c494:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c498:	e01b      	b.n	800c4d2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c49e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d0ef      	beq.n	800c48a <SDMMC_GetCmdResp3+0x1e>
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1ea      	bne.n	800c48a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b8:	f003 0304 	and.w	r3, r3, #4
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d004      	beq.n	800c4ca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2204      	movs	r2, #4
 800c4c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4c6:	2304      	movs	r3, #4
 800c4c8:	e003      	b.n	800c4d2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4a06      	ldr	r2, [pc, #24]	; (800c4e8 <SDMMC_GetCmdResp3+0x7c>)
 800c4ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3714      	adds	r7, #20
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	24000000 	.word	0x24000000
 800c4e4:	10624dd3 	.word	0x10624dd3
 800c4e8:	002000c5 	.word	0x002000c5

0800c4ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b088      	sub	sp, #32
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	607a      	str	r2, [r7, #4]
 800c4f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c4fa:	4b35      	ldr	r3, [pc, #212]	; (800c5d0 <SDMMC_GetCmdResp6+0xe4>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a35      	ldr	r2, [pc, #212]	; (800c5d4 <SDMMC_GetCmdResp6+0xe8>)
 800c500:	fba2 2303 	umull	r2, r3, r2, r3
 800c504:	0a5b      	lsrs	r3, r3, #9
 800c506:	f241 3288 	movw	r2, #5000	; 0x1388
 800c50a:	fb02 f303 	mul.w	r3, r2, r3
 800c50e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	1e5a      	subs	r2, r3, #1
 800c514:	61fa      	str	r2, [r7, #28]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d102      	bne.n	800c520 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c51a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c51e:	e052      	b.n	800c5c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c524:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d0ef      	beq.n	800c510 <SDMMC_GetCmdResp6+0x24>
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1ea      	bne.n	800c510 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c53e:	f003 0304 	and.w	r3, r3, #4
 800c542:	2b00      	cmp	r3, #0
 800c544:	d004      	beq.n	800c550 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2204      	movs	r2, #4
 800c54a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c54c:	2304      	movs	r3, #4
 800c54e:	e03a      	b.n	800c5c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c554:	f003 0301 	and.w	r3, r3, #1
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d004      	beq.n	800c566 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2201      	movs	r2, #1
 800c560:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c562:	2301      	movs	r3, #1
 800c564:	e02f      	b.n	800c5c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7ff fb7c 	bl	800bc64 <SDMMC_GetCommandResponse>
 800c56c:	4603      	mov	r3, r0
 800c56e:	461a      	mov	r2, r3
 800c570:	7afb      	ldrb	r3, [r7, #11]
 800c572:	4293      	cmp	r3, r2
 800c574:	d001      	beq.n	800c57a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c576:	2301      	movs	r3, #1
 800c578:	e025      	b.n	800c5c6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	4a16      	ldr	r2, [pc, #88]	; (800c5d8 <SDMMC_GetCmdResp6+0xec>)
 800c57e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c580:	2100      	movs	r1, #0
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f7ff fb7b 	bl	800bc7e <SDMMC_GetResponse>
 800c588:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c590:	2b00      	cmp	r3, #0
 800c592:	d106      	bne.n	800c5a2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	0c1b      	lsrs	r3, r3, #16
 800c598:	b29a      	uxth	r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	e011      	b.n	800c5c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d002      	beq.n	800c5b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c5ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c5b0:	e009      	b.n	800c5c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d002      	beq.n	800c5c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c5bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5c0:	e001      	b.n	800c5c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c5c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3720      	adds	r7, #32
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	24000000 	.word	0x24000000
 800c5d4:	10624dd3 	.word	0x10624dd3
 800c5d8:	002000c5 	.word	0x002000c5

0800c5dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c5e4:	4b22      	ldr	r3, [pc, #136]	; (800c670 <SDMMC_GetCmdResp7+0x94>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a22      	ldr	r2, [pc, #136]	; (800c674 <SDMMC_GetCmdResp7+0x98>)
 800c5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ee:	0a5b      	lsrs	r3, r3, #9
 800c5f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5f4:	fb02 f303 	mul.w	r3, r2, r3
 800c5f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	1e5a      	subs	r2, r3, #1
 800c5fe:	60fa      	str	r2, [r7, #12]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d102      	bne.n	800c60a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c608:	e02c      	b.n	800c664 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c616:	2b00      	cmp	r3, #0
 800c618:	d0ef      	beq.n	800c5fa <SDMMC_GetCmdResp7+0x1e>
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1ea      	bne.n	800c5fa <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c628:	f003 0304 	and.w	r3, r3, #4
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d004      	beq.n	800c63a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2204      	movs	r2, #4
 800c634:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c636:	2304      	movs	r3, #4
 800c638:	e014      	b.n	800c664 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c63e:	f003 0301 	and.w	r3, r3, #1
 800c642:	2b00      	cmp	r3, #0
 800c644:	d004      	beq.n	800c650 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2201      	movs	r2, #1
 800c64a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c64c:	2301      	movs	r3, #1
 800c64e:	e009      	b.n	800c664 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d002      	beq.n	800c662 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2240      	movs	r2, #64	; 0x40
 800c660:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c662:	2300      	movs	r3, #0

}
 800c664:	4618      	mov	r0, r3
 800c666:	3714      	adds	r7, #20
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr
 800c670:	24000000 	.word	0x24000000
 800c674:	10624dd3 	.word	0x10624dd3

0800c678 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c680:	4b11      	ldr	r3, [pc, #68]	; (800c6c8 <SDMMC_GetCmdError+0x50>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a11      	ldr	r2, [pc, #68]	; (800c6cc <SDMMC_GetCmdError+0x54>)
 800c686:	fba2 2303 	umull	r2, r3, r2, r3
 800c68a:	0a5b      	lsrs	r3, r3, #9
 800c68c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c690:	fb02 f303 	mul.w	r3, r2, r3
 800c694:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	1e5a      	subs	r2, r3, #1
 800c69a:	60fa      	str	r2, [r7, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c6a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c6a4:	e009      	b.n	800c6ba <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d0f1      	beq.n	800c696 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a06      	ldr	r2, [pc, #24]	; (800c6d0 <SDMMC_GetCmdError+0x58>)
 800c6b6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3714      	adds	r7, #20
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop
 800c6c8:	24000000 	.word	0x24000000
 800c6cc:	10624dd3 	.word	0x10624dd3
 800c6d0:	002000c5 	.word	0x002000c5

0800c6d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c6d8:	4904      	ldr	r1, [pc, #16]	; (800c6ec <MX_FATFS_Init+0x18>)
 800c6da:	4805      	ldr	r0, [pc, #20]	; (800c6f0 <MX_FATFS_Init+0x1c>)
 800c6dc:	f000 f9f8 	bl	800cad0 <FATFS_LinkDriver>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	4b03      	ldr	r3, [pc, #12]	; (800c6f4 <MX_FATFS_Init+0x20>)
 800c6e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c6e8:	bf00      	nop
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	240010f0 	.word	0x240010f0
 800c6f0:	0800cba0 	.word	0x0800cba0
 800c6f4:	24000039 	.word	0x24000039

0800c6f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c6fe:	2300      	movs	r3, #0
 800c700:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c702:	f000 f88d 	bl	800c820 <BSP_SD_IsDetected>
 800c706:	4603      	mov	r3, r0
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d001      	beq.n	800c710 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c70c:	2302      	movs	r3, #2
 800c70e:	e005      	b.n	800c71c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c710:	4804      	ldr	r0, [pc, #16]	; (800c724 <BSP_SD_Init+0x2c>)
 800c712:	f7fb facd 	bl	8007cb0 <HAL_SD_Init>
 800c716:	4603      	mov	r3, r0
 800c718:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800c71a:	79fb      	ldrb	r3, [r7, #7]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	24004214 	.word	0x24004214

0800c728 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b088      	sub	sp, #32
 800c72c:	af02      	add	r7, sp, #8
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	607a      	str	r2, [r7, #4]
 800c734:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c736:	2300      	movs	r3, #0
 800c738:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	9300      	str	r3, [sp, #0]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	68ba      	ldr	r2, [r7, #8]
 800c742:	68f9      	ldr	r1, [r7, #12]
 800c744:	4806      	ldr	r0, [pc, #24]	; (800c760 <BSP_SD_ReadBlocks+0x38>)
 800c746:	f7fb fbcd 	bl	8007ee4 <HAL_SD_ReadBlocks>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d001      	beq.n	800c754 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c754:	7dfb      	ldrb	r3, [r7, #23]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3718      	adds	r7, #24
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	24004214 	.word	0x24004214

0800c764 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b088      	sub	sp, #32
 800c768:	af02      	add	r7, sp, #8
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c772:	2300      	movs	r3, #0
 800c774:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	68f9      	ldr	r1, [r7, #12]
 800c780:	4806      	ldr	r0, [pc, #24]	; (800c79c <BSP_SD_WriteBlocks+0x38>)
 800c782:	f7fb fd39 	bl	80081f8 <HAL_SD_WriteBlocks>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d001      	beq.n	800c790 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c790:	7dfb      	ldrb	r3, [r7, #23]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3718      	adds	r7, #24
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	24004214 	.word	0x24004214

0800c7a0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c7a4:	4805      	ldr	r0, [pc, #20]	; (800c7bc <BSP_SD_GetCardState+0x1c>)
 800c7a6:	f7fc fc15 	bl	8008fd4 <HAL_SD_GetCardState>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b04      	cmp	r3, #4
 800c7ae:	bf14      	ite	ne
 800c7b0:	2301      	movne	r3, #1
 800c7b2:	2300      	moveq	r3, #0
 800c7b4:	b2db      	uxtb	r3, r3
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	24004214 	.word	0x24004214

0800c7c0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c7c8:	6879      	ldr	r1, [r7, #4]
 800c7ca:	4803      	ldr	r0, [pc, #12]	; (800c7d8 <BSP_SD_GetCardInfo+0x18>)
 800c7cc:	f7fc fac4 	bl	8008d58 <HAL_SD_GetCardInfo>
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	24004214 	.word	0x24004214

0800c7dc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c7e4:	f000 f80e 	bl	800c804 <BSP_SD_WriteCpltCallback>
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c7f8:	f000 f80b 	bl	800c812 <BSP_SD_ReadCpltCallback>
}
 800c7fc:	bf00      	nop
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800c804:	b480      	push	{r7}
 800c806:	af00      	add	r7, sp, #0

}
 800c808:	bf00      	nop
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr

0800c812 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800c812:	b480      	push	{r7}
 800c814:	af00      	add	r7, sp, #0

}
 800c816:	bf00      	nop
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c826:	2301      	movs	r3, #1
 800c828:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c82a:	f000 f80b 	bl	800c844 <BSP_PlatformIsDetected>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d101      	bne.n	800c838 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c834:	2300      	movs	r3, #0
 800c836:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c838:	79fb      	ldrb	r3, [r7, #7]
 800c83a:	b2db      	uxtb	r3, r3
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c84a:	2301      	movs	r3, #1
 800c84c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c84e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c852:	4806      	ldr	r0, [pc, #24]	; (800c86c <BSP_PlatformIsDetected+0x28>)
 800c854:	f7f8 f966 	bl	8004b24 <HAL_GPIO_ReadPin>
 800c858:	4603      	mov	r3, r0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c85e:	2300      	movs	r3, #0
 800c860:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c862:	79fb      	ldrb	r3, [r7, #7]
}
 800c864:	4618      	mov	r0, r3
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	58020800 	.word	0x58020800

0800c870 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	4603      	mov	r3, r0
 800c878:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c87a:	4b0b      	ldr	r3, [pc, #44]	; (800c8a8 <SD_CheckStatus+0x38>)
 800c87c:	2201      	movs	r2, #1
 800c87e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c880:	f7ff ff8e 	bl	800c7a0 <BSP_SD_GetCardState>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d107      	bne.n	800c89a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c88a:	4b07      	ldr	r3, [pc, #28]	; (800c8a8 <SD_CheckStatus+0x38>)
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	f023 0301 	bic.w	r3, r3, #1
 800c894:	b2da      	uxtb	r2, r3
 800c896:	4b04      	ldr	r3, [pc, #16]	; (800c8a8 <SD_CheckStatus+0x38>)
 800c898:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c89a:	4b03      	ldr	r3, [pc, #12]	; (800c8a8 <SD_CheckStatus+0x38>)
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	b2db      	uxtb	r3, r3
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	2400000d 	.word	0x2400000d

0800c8ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c8b6:	4b0b      	ldr	r3, [pc, #44]	; (800c8e4 <SD_initialize+0x38>)
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c8bc:	f7ff ff1c 	bl	800c6f8 <BSP_SD_Init>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d107      	bne.n	800c8d6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c8c6:	79fb      	ldrb	r3, [r7, #7]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7ff ffd1 	bl	800c870 <SD_CheckStatus>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	4b04      	ldr	r3, [pc, #16]	; (800c8e4 <SD_initialize+0x38>)
 800c8d4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c8d6:	4b03      	ldr	r3, [pc, #12]	; (800c8e4 <SD_initialize+0x38>)
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	b2db      	uxtb	r3, r3
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	2400000d 	.word	0x2400000d

0800c8e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c8f2:	79fb      	ldrb	r3, [r7, #7]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7ff ffbb 	bl	800c870 <SD_CheckStatus>
 800c8fa:	4603      	mov	r3, r0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60b9      	str	r1, [r7, #8]
 800c90c:	607a      	str	r2, [r7, #4]
 800c90e:	603b      	str	r3, [r7, #0]
 800c910:	4603      	mov	r3, r0
 800c912:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c914:	2301      	movs	r3, #1
 800c916:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c918:	f04f 33ff 	mov.w	r3, #4294967295
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	68b8      	ldr	r0, [r7, #8]
 800c922:	f7ff ff01 	bl	800c728 <BSP_SD_ReadBlocks>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d107      	bne.n	800c93c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c92c:	bf00      	nop
 800c92e:	f7ff ff37 	bl	800c7a0 <BSP_SD_GetCardState>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1fa      	bne.n	800c92e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c938:	2300      	movs	r3, #0
 800c93a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b086      	sub	sp, #24
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
 800c950:	603b      	str	r3, [r7, #0]
 800c952:	4603      	mov	r3, r0
 800c954:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c95a:	f04f 33ff 	mov.w	r3, #4294967295
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	6879      	ldr	r1, [r7, #4]
 800c962:	68b8      	ldr	r0, [r7, #8]
 800c964:	f7ff fefe 	bl	800c764 <BSP_SD_WriteBlocks>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d107      	bne.n	800c97e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c96e:	bf00      	nop
 800c970:	f7ff ff16 	bl	800c7a0 <BSP_SD_GetCardState>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1fa      	bne.n	800c970 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c97a:	2300      	movs	r3, #0
 800c97c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c980:	4618      	mov	r0, r3
 800c982:	3718      	adds	r7, #24
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b08c      	sub	sp, #48	; 0x30
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	4603      	mov	r3, r0
 800c990:	603a      	str	r2, [r7, #0]
 800c992:	71fb      	strb	r3, [r7, #7]
 800c994:	460b      	mov	r3, r1
 800c996:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c998:	2301      	movs	r3, #1
 800c99a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c99e:	4b25      	ldr	r3, [pc, #148]	; (800ca34 <SD_ioctl+0xac>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	f003 0301 	and.w	r3, r3, #1
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d001      	beq.n	800c9b0 <SD_ioctl+0x28>
 800c9ac:	2303      	movs	r3, #3
 800c9ae:	e03c      	b.n	800ca2a <SD_ioctl+0xa2>

  switch (cmd)
 800c9b0:	79bb      	ldrb	r3, [r7, #6]
 800c9b2:	2b03      	cmp	r3, #3
 800c9b4:	d834      	bhi.n	800ca20 <SD_ioctl+0x98>
 800c9b6:	a201      	add	r2, pc, #4	; (adr r2, 800c9bc <SD_ioctl+0x34>)
 800c9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9bc:	0800c9cd 	.word	0x0800c9cd
 800c9c0:	0800c9d5 	.word	0x0800c9d5
 800c9c4:	0800c9ed 	.word	0x0800c9ed
 800c9c8:	0800ca07 	.word	0x0800ca07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c9d2:	e028      	b.n	800ca26 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c9d4:	f107 0308 	add.w	r3, r7, #8
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7ff fef1 	bl	800c7c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c9de:	6a3a      	ldr	r2, [r7, #32]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c9ea:	e01c      	b.n	800ca26 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c9ec:	f107 0308 	add.w	r3, r7, #8
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7ff fee5 	bl	800c7c0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ca04:	e00f      	b.n	800ca26 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ca06:	f107 0308 	add.w	r3, r7, #8
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7ff fed8 	bl	800c7c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ca10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca12:	0a5a      	lsrs	r2, r3, #9
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ca1e:	e002      	b.n	800ca26 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ca20:	2304      	movs	r3, #4
 800ca22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ca26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3730      	adds	r7, #48	; 0x30
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	2400000d 	.word	0x2400000d

0800ca38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b087      	sub	sp, #28
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	4613      	mov	r3, r2
 800ca44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ca46:	2301      	movs	r3, #1
 800ca48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ca4e:	4b1f      	ldr	r3, [pc, #124]	; (800cacc <FATFS_LinkDriverEx+0x94>)
 800ca50:	7a5b      	ldrb	r3, [r3, #9]
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d131      	bne.n	800cabc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ca58:	4b1c      	ldr	r3, [pc, #112]	; (800cacc <FATFS_LinkDriverEx+0x94>)
 800ca5a:	7a5b      	ldrb	r3, [r3, #9]
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	461a      	mov	r2, r3
 800ca60:	4b1a      	ldr	r3, [pc, #104]	; (800cacc <FATFS_LinkDriverEx+0x94>)
 800ca62:	2100      	movs	r1, #0
 800ca64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ca66:	4b19      	ldr	r3, [pc, #100]	; (800cacc <FATFS_LinkDriverEx+0x94>)
 800ca68:	7a5b      	ldrb	r3, [r3, #9]
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	4a17      	ldr	r2, [pc, #92]	; (800cacc <FATFS_LinkDriverEx+0x94>)
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4413      	add	r3, r2
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ca76:	4b15      	ldr	r3, [pc, #84]	; (800cacc <FATFS_LinkDriverEx+0x94>)
 800ca78:	7a5b      	ldrb	r3, [r3, #9]
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	4b13      	ldr	r3, [pc, #76]	; (800cacc <FATFS_LinkDriverEx+0x94>)
 800ca80:	4413      	add	r3, r2
 800ca82:	79fa      	ldrb	r2, [r7, #7]
 800ca84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ca86:	4b11      	ldr	r3, [pc, #68]	; (800cacc <FATFS_LinkDriverEx+0x94>)
 800ca88:	7a5b      	ldrb	r3, [r3, #9]
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	1c5a      	adds	r2, r3, #1
 800ca8e:	b2d1      	uxtb	r1, r2
 800ca90:	4a0e      	ldr	r2, [pc, #56]	; (800cacc <FATFS_LinkDriverEx+0x94>)
 800ca92:	7251      	strb	r1, [r2, #9]
 800ca94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ca96:	7dbb      	ldrb	r3, [r7, #22]
 800ca98:	3330      	adds	r3, #48	; 0x30
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	3301      	adds	r3, #1
 800caa4:	223a      	movs	r2, #58	; 0x3a
 800caa6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	3302      	adds	r3, #2
 800caac:	222f      	movs	r2, #47	; 0x2f
 800caae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	3303      	adds	r3, #3
 800cab4:	2200      	movs	r2, #0
 800cab6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cab8:	2300      	movs	r3, #0
 800caba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cabc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	371c      	adds	r7, #28
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	2400002c 	.word	0x2400002c

0800cad0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cada:	2200      	movs	r2, #0
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7ff ffaa 	bl	800ca38 <FATFS_LinkDriverEx>
 800cae4:	4603      	mov	r3, r0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3708      	adds	r7, #8
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
	...

0800caf0 <__libc_init_array>:
 800caf0:	b570      	push	{r4, r5, r6, lr}
 800caf2:	4d0d      	ldr	r5, [pc, #52]	; (800cb28 <__libc_init_array+0x38>)
 800caf4:	4c0d      	ldr	r4, [pc, #52]	; (800cb2c <__libc_init_array+0x3c>)
 800caf6:	1b64      	subs	r4, r4, r5
 800caf8:	10a4      	asrs	r4, r4, #2
 800cafa:	2600      	movs	r6, #0
 800cafc:	42a6      	cmp	r6, r4
 800cafe:	d109      	bne.n	800cb14 <__libc_init_array+0x24>
 800cb00:	4d0b      	ldr	r5, [pc, #44]	; (800cb30 <__libc_init_array+0x40>)
 800cb02:	4c0c      	ldr	r4, [pc, #48]	; (800cb34 <__libc_init_array+0x44>)
 800cb04:	f000 f820 	bl	800cb48 <_init>
 800cb08:	1b64      	subs	r4, r4, r5
 800cb0a:	10a4      	asrs	r4, r4, #2
 800cb0c:	2600      	movs	r6, #0
 800cb0e:	42a6      	cmp	r6, r4
 800cb10:	d105      	bne.n	800cb1e <__libc_init_array+0x2e>
 800cb12:	bd70      	pop	{r4, r5, r6, pc}
 800cb14:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb18:	4798      	blx	r3
 800cb1a:	3601      	adds	r6, #1
 800cb1c:	e7ee      	b.n	800cafc <__libc_init_array+0xc>
 800cb1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb22:	4798      	blx	r3
 800cb24:	3601      	adds	r6, #1
 800cb26:	e7f2      	b.n	800cb0e <__libc_init_array+0x1e>
 800cb28:	0800cbbc 	.word	0x0800cbbc
 800cb2c:	0800cbbc 	.word	0x0800cbbc
 800cb30:	0800cbbc 	.word	0x0800cbbc
 800cb34:	0800cbc0 	.word	0x0800cbc0

0800cb38 <memset>:
 800cb38:	4402      	add	r2, r0
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d100      	bne.n	800cb42 <memset+0xa>
 800cb40:	4770      	bx	lr
 800cb42:	f803 1b01 	strb.w	r1, [r3], #1
 800cb46:	e7f9      	b.n	800cb3c <memset+0x4>

0800cb48 <_init>:
 800cb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4a:	bf00      	nop
 800cb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb4e:	bc08      	pop	{r3}
 800cb50:	469e      	mov	lr, r3
 800cb52:	4770      	bx	lr

0800cb54 <_fini>:
 800cb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb56:	bf00      	nop
 800cb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb5a:	bc08      	pop	{r3}
 800cb5c:	469e      	mov	lr, r3
 800cb5e:	4770      	bx	lr
