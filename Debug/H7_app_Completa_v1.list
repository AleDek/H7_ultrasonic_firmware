
H7_app_Completa_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0b0  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800d360  0800d360  0001d360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d7a4  0800d7a4  0001d7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d7ac  0800d7ac  0001d7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d7b0  0800d7b0  0001d7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800d7b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000124e0  240001e0  0800d994  000201e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240126c0  0800d994  000226c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038718  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c3c  00000000  00000000  00058926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001868  00000000  00000000  0005e568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001670  00000000  00000000  0005fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00008249  00000000  00000000  00061440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000238be  00000000  00000000  00069689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f59e  00000000  00000000  0008cf47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ec4e5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007334  00000000  00000000  001ec538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d348 	.word	0x0800d348

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	0800d348 	.word	0x0800d348

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b96e 	b.w	8000694 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468c      	mov	ip, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8083 	bne.w	80004e6 <__udivmoddi4+0x116>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d947      	bls.n	8000476 <__udivmoddi4+0xa6>
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	b142      	cbz	r2, 80003fe <__udivmoddi4+0x2e>
 80003ec:	f1c2 0020 	rsb	r0, r2, #32
 80003f0:	fa24 f000 	lsr.w	r0, r4, r0
 80003f4:	4091      	lsls	r1, r2
 80003f6:	4097      	lsls	r7, r2
 80003f8:	ea40 0c01 	orr.w	ip, r0, r1
 80003fc:	4094      	lsls	r4, r2
 80003fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fbbc f6f8 	udiv	r6, ip, r8
 8000408:	fa1f fe87 	uxth.w	lr, r7
 800040c:	fb08 c116 	mls	r1, r8, r6, ip
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb06 f10e 	mul.w	r1, r6, lr
 8000418:	4299      	cmp	r1, r3
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x60>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000422:	f080 8119 	bcs.w	8000658 <__udivmoddi4+0x288>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 8116 	bls.w	8000658 <__udivmoddi4+0x288>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3310 	mls	r3, r8, r0, r3
 800043c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	45a6      	cmp	lr, r4
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x8c>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f100 33ff 	add.w	r3, r0, #4294967295
 800044e:	f080 8105 	bcs.w	800065c <__udivmoddi4+0x28c>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f240 8102 	bls.w	800065c <__udivmoddi4+0x28c>
 8000458:	3802      	subs	r0, #2
 800045a:	443c      	add	r4, r7
 800045c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	2600      	movs	r6, #0
 8000466:	b11d      	cbz	r5, 8000470 <__udivmoddi4+0xa0>
 8000468:	40d4      	lsrs	r4, r2
 800046a:	2300      	movs	r3, #0
 800046c:	e9c5 4300 	strd	r4, r3, [r5]
 8000470:	4631      	mov	r1, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	b902      	cbnz	r2, 800047a <__udivmoddi4+0xaa>
 8000478:	deff      	udf	#255	; 0xff
 800047a:	fab2 f282 	clz	r2, r2
 800047e:	2a00      	cmp	r2, #0
 8000480:	d150      	bne.n	8000524 <__udivmoddi4+0x154>
 8000482:	1bcb      	subs	r3, r1, r7
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	fa1f f887 	uxth.w	r8, r7
 800048c:	2601      	movs	r6, #1
 800048e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000492:	0c21      	lsrs	r1, r4, #16
 8000494:	fb0e 331c 	mls	r3, lr, ip, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb08 f30c 	mul.w	r3, r8, ip
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0xe4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0xe2>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	f200 80e9 	bhi.w	8000684 <__udivmoddi4+0x2b4>
 80004b2:	4684      	mov	ip, r0
 80004b4:	1ac9      	subs	r1, r1, r3
 80004b6:	b2a3      	uxth	r3, r4
 80004b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004c4:	fb08 f800 	mul.w	r8, r8, r0
 80004c8:	45a0      	cmp	r8, r4
 80004ca:	d907      	bls.n	80004dc <__udivmoddi4+0x10c>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x10a>
 80004d4:	45a0      	cmp	r8, r4
 80004d6:	f200 80d9 	bhi.w	800068c <__udivmoddi4+0x2bc>
 80004da:	4618      	mov	r0, r3
 80004dc:	eba4 0408 	sub.w	r4, r4, r8
 80004e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004e4:	e7bf      	b.n	8000466 <__udivmoddi4+0x96>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d909      	bls.n	80004fe <__udivmoddi4+0x12e>
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	f000 80b1 	beq.w	8000652 <__udivmoddi4+0x282>
 80004f0:	2600      	movs	r6, #0
 80004f2:	e9c5 0100 	strd	r0, r1, [r5]
 80004f6:	4630      	mov	r0, r6
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	fab3 f683 	clz	r6, r3
 8000502:	2e00      	cmp	r6, #0
 8000504:	d14a      	bne.n	800059c <__udivmoddi4+0x1cc>
 8000506:	428b      	cmp	r3, r1
 8000508:	d302      	bcc.n	8000510 <__udivmoddi4+0x140>
 800050a:	4282      	cmp	r2, r0
 800050c:	f200 80b8 	bhi.w	8000680 <__udivmoddi4+0x2b0>
 8000510:	1a84      	subs	r4, r0, r2
 8000512:	eb61 0103 	sbc.w	r1, r1, r3
 8000516:	2001      	movs	r0, #1
 8000518:	468c      	mov	ip, r1
 800051a:	2d00      	cmp	r5, #0
 800051c:	d0a8      	beq.n	8000470 <__udivmoddi4+0xa0>
 800051e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000522:	e7a5      	b.n	8000470 <__udivmoddi4+0xa0>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f603 	lsr.w	r6, r0, r3
 800052c:	4097      	lsls	r7, r2
 800052e:	fa01 f002 	lsl.w	r0, r1, r2
 8000532:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000536:	40d9      	lsrs	r1, r3
 8000538:	4330      	orrs	r0, r6
 800053a:	0c03      	lsrs	r3, r0, #16
 800053c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000540:	fa1f f887 	uxth.w	r8, r7
 8000544:	fb0e 1116 	mls	r1, lr, r6, r1
 8000548:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054c:	fb06 f108 	mul.w	r1, r6, r8
 8000550:	4299      	cmp	r1, r3
 8000552:	fa04 f402 	lsl.w	r4, r4, r2
 8000556:	d909      	bls.n	800056c <__udivmoddi4+0x19c>
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	f106 3cff 	add.w	ip, r6, #4294967295
 800055e:	f080 808d 	bcs.w	800067c <__udivmoddi4+0x2ac>
 8000562:	4299      	cmp	r1, r3
 8000564:	f240 808a 	bls.w	800067c <__udivmoddi4+0x2ac>
 8000568:	3e02      	subs	r6, #2
 800056a:	443b      	add	r3, r7
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b281      	uxth	r1, r0
 8000570:	fbb3 f0fe 	udiv	r0, r3, lr
 8000574:	fb0e 3310 	mls	r3, lr, r0, r3
 8000578:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057c:	fb00 f308 	mul.w	r3, r0, r8
 8000580:	428b      	cmp	r3, r1
 8000582:	d907      	bls.n	8000594 <__udivmoddi4+0x1c4>
 8000584:	1879      	adds	r1, r7, r1
 8000586:	f100 3cff 	add.w	ip, r0, #4294967295
 800058a:	d273      	bcs.n	8000674 <__udivmoddi4+0x2a4>
 800058c:	428b      	cmp	r3, r1
 800058e:	d971      	bls.n	8000674 <__udivmoddi4+0x2a4>
 8000590:	3802      	subs	r0, #2
 8000592:	4439      	add	r1, r7
 8000594:	1acb      	subs	r3, r1, r3
 8000596:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800059a:	e778      	b.n	800048e <__udivmoddi4+0xbe>
 800059c:	f1c6 0c20 	rsb	ip, r6, #32
 80005a0:	fa03 f406 	lsl.w	r4, r3, r6
 80005a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005a8:	431c      	orrs	r4, r3
 80005aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ae:	fa01 f306 	lsl.w	r3, r1, r6
 80005b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ba:	431f      	orrs	r7, r3
 80005bc:	0c3b      	lsrs	r3, r7, #16
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fa1f f884 	uxth.w	r8, r4
 80005c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ce:	fb09 fa08 	mul.w	sl, r9, r8
 80005d2:	458a      	cmp	sl, r1
 80005d4:	fa02 f206 	lsl.w	r2, r2, r6
 80005d8:	fa00 f306 	lsl.w	r3, r0, r6
 80005dc:	d908      	bls.n	80005f0 <__udivmoddi4+0x220>
 80005de:	1861      	adds	r1, r4, r1
 80005e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005e4:	d248      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 80005e6:	458a      	cmp	sl, r1
 80005e8:	d946      	bls.n	8000678 <__udivmoddi4+0x2a8>
 80005ea:	f1a9 0902 	sub.w	r9, r9, #2
 80005ee:	4421      	add	r1, r4
 80005f0:	eba1 010a 	sub.w	r1, r1, sl
 80005f4:	b2bf      	uxth	r7, r7
 80005f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000602:	fb00 f808 	mul.w	r8, r0, r8
 8000606:	45b8      	cmp	r8, r7
 8000608:	d907      	bls.n	800061a <__udivmoddi4+0x24a>
 800060a:	19e7      	adds	r7, r4, r7
 800060c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000610:	d22e      	bcs.n	8000670 <__udivmoddi4+0x2a0>
 8000612:	45b8      	cmp	r8, r7
 8000614:	d92c      	bls.n	8000670 <__udivmoddi4+0x2a0>
 8000616:	3802      	subs	r0, #2
 8000618:	4427      	add	r7, r4
 800061a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800061e:	eba7 0708 	sub.w	r7, r7, r8
 8000622:	fba0 8902 	umull	r8, r9, r0, r2
 8000626:	454f      	cmp	r7, r9
 8000628:	46c6      	mov	lr, r8
 800062a:	4649      	mov	r1, r9
 800062c:	d31a      	bcc.n	8000664 <__udivmoddi4+0x294>
 800062e:	d017      	beq.n	8000660 <__udivmoddi4+0x290>
 8000630:	b15d      	cbz	r5, 800064a <__udivmoddi4+0x27a>
 8000632:	ebb3 020e 	subs.w	r2, r3, lr
 8000636:	eb67 0701 	sbc.w	r7, r7, r1
 800063a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800063e:	40f2      	lsrs	r2, r6
 8000640:	ea4c 0202 	orr.w	r2, ip, r2
 8000644:	40f7      	lsrs	r7, r6
 8000646:	e9c5 2700 	strd	r2, r7, [r5]
 800064a:	2600      	movs	r6, #0
 800064c:	4631      	mov	r1, r6
 800064e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e70b      	b.n	8000470 <__udivmoddi4+0xa0>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e9      	b.n	8000430 <__udivmoddi4+0x60>
 800065c:	4618      	mov	r0, r3
 800065e:	e6fd      	b.n	800045c <__udivmoddi4+0x8c>
 8000660:	4543      	cmp	r3, r8
 8000662:	d2e5      	bcs.n	8000630 <__udivmoddi4+0x260>
 8000664:	ebb8 0e02 	subs.w	lr, r8, r2
 8000668:	eb69 0104 	sbc.w	r1, r9, r4
 800066c:	3801      	subs	r0, #1
 800066e:	e7df      	b.n	8000630 <__udivmoddi4+0x260>
 8000670:	4608      	mov	r0, r1
 8000672:	e7d2      	b.n	800061a <__udivmoddi4+0x24a>
 8000674:	4660      	mov	r0, ip
 8000676:	e78d      	b.n	8000594 <__udivmoddi4+0x1c4>
 8000678:	4681      	mov	r9, r0
 800067a:	e7b9      	b.n	80005f0 <__udivmoddi4+0x220>
 800067c:	4666      	mov	r6, ip
 800067e:	e775      	b.n	800056c <__udivmoddi4+0x19c>
 8000680:	4630      	mov	r0, r6
 8000682:	e74a      	b.n	800051a <__udivmoddi4+0x14a>
 8000684:	f1ac 0c02 	sub.w	ip, ip, #2
 8000688:	4439      	add	r1, r7
 800068a:	e713      	b.n	80004b4 <__udivmoddi4+0xe4>
 800068c:	3802      	subs	r0, #2
 800068e:	443c      	add	r4, r7
 8000690:	e724      	b.n	80004dc <__udivmoddi4+0x10c>
 8000692:	bf00      	nop

08000694 <__aeabi_idiv0>:
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <EnableDacVref>:
double mean;
double calibOffset;
double CorrectMeas[NMEAS] = {0.0};


void EnableDacVref(double VrefDN,double VrefUP){
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
 800069e:	ed87 0b02 	vstr	d0, [r7, #8]
 80006a2:	ed87 1b00 	vstr	d1, [r7]
	uint32_t dacOut = ceil(VrefDN*volt2cod);
 80006a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80006aa:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000730 <EnableDacVref+0x98>
 80006ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006b2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000738 <EnableDacVref+0xa0>
 80006b6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80006ba:	eeb0 0b46 	vmov.f64	d0, d6
 80006be:	f00c fdcb 	bl	800d258 <ceil>
 80006c2:	eeb0 7b40 	vmov.f64	d7, d0
 80006c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006ca:	ee17 3a90 	vmov	r3, s15
 80006ce:	617b      	str	r3, [r7, #20]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R ,  dacOut);
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	481a      	ldr	r0, [pc, #104]	; (8000740 <EnableDacVref+0xa8>)
 80006d8:	f001 fd87 	bl	80021ea <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006dc:	2100      	movs	r1, #0
 80006de:	4818      	ldr	r0, [pc, #96]	; (8000740 <EnableDacVref+0xa8>)
 80006e0:	f001 fd31 	bl	8002146 <HAL_DAC_Start>

	 dacOut = ceil(VrefUP*volt2cod);
 80006e4:	ed97 7b00 	vldr	d7, [r7]
 80006e8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000730 <EnableDacVref+0x98>
 80006ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006f0:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8000738 <EnableDacVref+0xa0>
 80006f4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80006f8:	eeb0 0b46 	vmov.f64	d0, d6
 80006fc:	f00c fdac 	bl	800d258 <ceil>
 8000700:	eeb0 7b40 	vmov.f64	d7, d0
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee17 3a90 	vmov	r3, s15
 800070c:	617b      	str	r3, [r7, #20]
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R ,  dacOut);
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <EnableDacVref+0xac>)
 8000716:	f001 fd68 	bl	80021ea <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 800071a:	2100      	movs	r1, #0
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <EnableDacVref+0xac>)
 800071e:	f001 fd12 	bl	8002146 <HAL_DAC_Start>

}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	f3af 8000 	nop.w
 8000730:	00000000 	.word	0x00000000
 8000734:	40affe00 	.word	0x40affe00
 8000738:	66666666 	.word	0x66666666
 800073c:	400a6666 	.word	0x400a6666
 8000740:	24000328 	.word	0x24000328
 8000744:	24000314 	.word	0x24000314

08000748 <InitPeriodMeasure>:

void InitPeriodMeasure(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	//precompute offset
	//calibOffset = calib;
	/*start DAC for comparator inverting input Vref*/
	EnableDacVref(VoffsetDN,VoffsetUP);
 800074c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80007b8 <InitPeriodMeasure+0x70>
 8000750:	eeb7 0b08 	vmov.f64	d0, #120	; 0x3fc00000  1.5
 8000754:	f7ff ffa0 	bl	8000698 <EnableDacVref>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop

	/** START COMPARATOR (only first time)**/
	__disable_irq();

	compCall =0;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <InitPeriodMeasure+0x78>)
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
	WRITE_REG(EXTI->PR1, COMP_EXTI_LINE_COMP2);
 8000762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000766:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800076a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	__HAL_COMP_CLEAR_C2IFLAG();
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <InitPeriodMeasure+0x7c>)
 8000770:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000774:	605a      	str	r2, [r3, #4]
	if(HAL_COMP_Start_IT(&hcomp2) != HAL_OK) Error_Handler();
 8000776:	4814      	ldr	r0, [pc, #80]	; (80007c8 <InitPeriodMeasure+0x80>)
 8000778:	f001 faee 	bl	8001d58 <HAL_COMP_Start_IT>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <InitPeriodMeasure+0x3e>
 8000782:	f000 fcfd 	bl	8001180 <Error_Handler>

	WRITE_REG(EXTI->PR1, COMP_EXTI_LINE_COMP1);
 8000786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800078a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800078e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	__HAL_COMP_CLEAR_C1IFLAG();
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <InitPeriodMeasure+0x7c>)
 8000794:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000798:	605a      	str	r2, [r3, #4]
	if(HAL_COMP_Start_IT(&hcomp1) != HAL_OK) Error_Handler();
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <InitPeriodMeasure+0x84>)
 800079c:	f001 fadc 	bl	8001d58 <HAL_COMP_Start_IT>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <InitPeriodMeasure+0x62>
 80007a6:	f000 fceb 	bl	8001180 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80007aa:	b662      	cpsie	i
}
 80007ac:	bf00      	nop

	__enable_irq();
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	cccccccd 	.word	0xcccccccd
 80007bc:	3ffccccc 	.word	0x3ffccccc
 80007c0:	240002b8 	.word	0x240002b8
 80007c4:	58003800 	.word	0x58003800
 80007c8:	240002e8 	.word	0x240002e8
 80007cc:	240002bc 	.word	0x240002bc

080007d0 <correctMeas>:
		x = measBuf[i];
		measBuf[i] = C1*x+C0;
	}
}

double correctMeas(double meas){
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	ed87 0b00 	vstr	d0, [r7]
	return  C1*meas + C0;
 80007da:	ed97 7b00 	vldr	d7, [r7]
 80007de:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000800 <correctMeas+0x30>
 80007e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007e6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000808 <correctMeas+0x38>
 80007ea:	ee37 7b46 	vsub.f64	d7, d7, d6
}
 80007ee:	eeb0 0b47 	vmov.f64	d0, d7
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	f3af 8000 	nop.w
 8000800:	67381d7e 	.word	0x67381d7e
 8000804:	3ff06944 	.word	0x3ff06944
 8000808:	23a29c78 	.word	0x23a29c78
 800080c:	40087cb9 	.word	0x40087cb9

08000810 <MeasProcess>:
			sum += measBuf[i];
    meanVal = sum/(double)j;
	return meanVal;
}

double MeasProcess(void){
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	//start measurement
	Ncount = 0;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MeasProcess+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
	Tmeas = 0.00;
 800081a:	4914      	ldr	r1, [pc, #80]	; (800086c <MeasProcess+0x5c>)
 800081c:	f04f 0200 	mov.w	r2, #0
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	e9c1 2300 	strd	r2, r3, [r1]
	measFlag = 0;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MeasProcess+0x60>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
	//htim2.Instance->SR = ~TIM_FLAG_TRIGGER;
	htim2.Instance->CNT =0U;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MeasProcess+0x64>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_TIM_Base_Start(&htim2) != HAL_OK) Error_Handler();
 8000836:	480f      	ldr	r0, [pc, #60]	; (8000874 <MeasProcess+0x64>)
 8000838:	f006 ff1e 	bl	8007678 <HAL_TIM_Base_Start>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MeasProcess+0x36>
 8000842:	f000 fc9d 	bl	8001180 <Error_Handler>
	while(!measFlag){
 8000846:	bf00      	nop
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MeasProcess+0x60>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0fb      	beq.n	8000848 <MeasProcess+0x38>
		//wait for meas
	}
	//stop meas
	HAL_TIM_Base_Stop(&htim2);
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <MeasProcess+0x64>)
 8000852:	f006 ff81 	bl	8007758 <HAL_TIM_Base_Stop>
	//HAL_COMP_Stop_IT(&hcomp2);
	return Tmeas;
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <MeasProcess+0x5c>)
 8000858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800085c:	ec43 2b17 	vmov	d7, r2, r3
}
 8000860:	eeb0 0b47 	vmov.f64	d0, d7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	240002a8 	.word	0x240002a8
 800086c:	240002b0 	.word	0x240002b0
 8000870:	24000290 	.word	0x24000290
 8000874:	240125d0 	.word	0x240125d0

08000878 <HAL_COMP_TriggerCallback>:
	return 0;
}



void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]


}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <TIM2_IRQHandler+0x10>)
 8000892:	f006 ff88 	bl	80077a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	240125d0 	.word	0x240125d0

080008a0 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 global interrupt.
  */
void COMP_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */
	Ncount = htim2.Instance->CNT;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <COMP_IRQHandler+0x78>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <COMP_IRQHandler+0x7c>)
 80008ac:	6013      	str	r3, [r2, #0]
		compCall++;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <COMP_IRQHandler+0x80>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	4a1a      	ldr	r2, [pc, #104]	; (8000920 <COMP_IRQHandler+0x80>)
 80008b6:	6013      	str	r3, [r2, #0]
		if((!measFlag)  && ((htim2.Instance->SR & TIM_FLAG_TRIGGER) == TIM_FLAG_TRIGGER)){
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <COMP_IRQHandler+0x84>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d11e      	bne.n	80008fe <COMP_IRQHandler+0x5e>
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <COMP_IRQHandler+0x78>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ca:	2b40      	cmp	r3, #64	; 0x40
 80008cc:	d117      	bne.n	80008fe <COMP_IRQHandler+0x5e>
			//htim2.Instance->CR1 &= ~TIM_CR1_CEN;
			 htim2.Instance->SR = ~TIM_FLAG_TRIGGER;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <COMP_IRQHandler+0x78>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80008d6:	611a      	str	r2, [r3, #16]
			 Tmeas = Ncount*Tck;
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <COMP_IRQHandler+0x7c>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	ee07 3a90 	vmov	s15, r3
 80008e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008ea:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000910 <COMP_IRQHandler+0x70>
 80008ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <COMP_IRQHandler+0x88>)
 80008f4:	ed83 7b00 	vstr	d7, [r3]
//			 id = id%10;
//             //exp
//			 measFlag = 0;
//			 htim2.Instance->CNT =0U;
//			 HAL_TIM_Base_Start(&htim2);
             measFlag = 1;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <COMP_IRQHandler+0x84>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 80008fe:	480b      	ldr	r0, [pc, #44]	; (800092c <COMP_IRQHandler+0x8c>)
 8000900:	f001 fa7c 	bl	8001dfc <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp1);
 8000904:	480a      	ldr	r0, [pc, #40]	; (8000930 <COMP_IRQHandler+0x90>)
 8000906:	f001 fa79 	bl	8001dfc <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */
  /* USER CODE END COMP_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	e826d695 	.word	0xe826d695
 8000914:	3e112e0b 	.word	0x3e112e0b
 8000918:	240125d0 	.word	0x240125d0
 800091c:	240002a8 	.word	0x240002a8
 8000920:	240002b8 	.word	0x240002b8
 8000924:	24000290 	.word	0x24000290
 8000928:	240002b0 	.word	0x240002b0
 800092c:	240002e8 	.word	0x240002e8
 8000930:	240002bc 	.word	0x240002bc

08000934 <MX_COMP1_Init>:
COMP_HandleTypeDef hcomp1;
COMP_HandleTypeDef hcomp2;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_COMP1_Init+0x54>)
 800093a:	4a14      	ldr	r2, [pc, #80]	; (800098c <MX_COMP1_Init+0x58>)
 800093c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_COMP1_Init+0x54>)
 8000940:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000944:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_DAC2_CH1;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_COMP1_Init+0x54>)
 8000948:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800094c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_COMP1_Init+0x54>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_COMP1_Init+0x54>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_COMP1_Init+0x54>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_COMP1_Init+0x54>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_COMP1_Init+0x54>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_COMP1_Init+0x54>)
 800096e:	2211      	movs	r2, #17
 8000970:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_COMP1_Init+0x54>)
 8000974:	f001 f8c6 	bl	8001b04 <HAL_COMP_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_COMP1_Init+0x4e>
  {
    Error_Handler();
 800097e:	f000 fbff 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	240002bc 	.word	0x240002bc
 800098c:	5800380c 	.word	0x5800380c

08000990 <MX_COMP2_Init>:
/* COMP2 init function */
void MX_COMP2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_COMP2_Init+0x54>)
 8000996:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <MX_COMP2_Init+0x58>)
 8000998:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_COMP2_Init+0x54>)
 800099c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009a0:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_COMP2_Init+0x54>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_COMP2_Init+0x54>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_LOW;
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <MX_COMP2_Init+0x54>)
 80009b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b4:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_COMP2_Init+0x54>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_COMP2_Init+0x54>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_COMP2_Init+0x54>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_COMP2_Init+0x54>)
 80009ca:	2221      	movs	r2, #33	; 0x21
 80009cc:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_COMP2_Init+0x54>)
 80009d0:	f001 f898 	bl	8001b04 <HAL_COMP_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 80009da:	f000 fbd1 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	240002e8 	.word	0x240002e8
 80009e8:	58003810 	.word	0x58003810

080009ec <HAL_COMP_MspInit>:

static uint32_t HAL_RCC_COMP12_CLK_ENABLED=0;

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a52      	ldr	r2, [pc, #328]	; (8000b54 <HAL_COMP_MspInit+0x168>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d14b      	bne.n	8000aa6 <HAL_COMP_MspInit+0xba>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* COMP1 clock enable */
    HAL_RCC_COMP12_CLK_ENABLED++;
 8000a0e:	4b52      	ldr	r3, [pc, #328]	; (8000b58 <HAL_COMP_MspInit+0x16c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	4a50      	ldr	r2, [pc, #320]	; (8000b58 <HAL_COMP_MspInit+0x16c>)
 8000a16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 8000a18:	4b4f      	ldr	r3, [pc, #316]	; (8000b58 <HAL_COMP_MspInit+0x16c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d10e      	bne.n	8000a3e <HAL_COMP_MspInit+0x52>
      __HAL_RCC_COMP12_CLK_ENABLE();
 8000a20:	4b4e      	ldr	r3, [pc, #312]	; (8000b5c <HAL_COMP_MspInit+0x170>)
 8000a22:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a26:	4a4d      	ldr	r2, [pc, #308]	; (8000b5c <HAL_COMP_MspInit+0x170>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a30:	4b4a      	ldr	r3, [pc, #296]	; (8000b5c <HAL_COMP_MspInit+0x170>)
 8000a32:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4b47      	ldr	r3, [pc, #284]	; (8000b5c <HAL_COMP_MspInit+0x170>)
 8000a40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a44:	4a45      	ldr	r2, [pc, #276]	; (8000b5c <HAL_COMP_MspInit+0x170>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a4e:	4b43      	ldr	r3, [pc, #268]	; (8000b5c <HAL_COMP_MspInit+0x170>)
 8000a50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	697b      	ldr	r3, [r7, #20]
    /**COMP1 GPIO Configuration
    PC4     ------> COMP1_INM
    PC5     ------> COMP1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a60:	2303      	movs	r3, #3
 8000a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	483c      	ldr	r0, [pc, #240]	; (8000b60 <HAL_COMP_MspInit+0x174>)
 8000a70:	f001 fd10 	bl	8002494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a74:	2320      	movs	r3, #32
 8000a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_COMP1;
 8000a84:	230d      	movs	r3, #13
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4834      	ldr	r0, [pc, #208]	; (8000b60 <HAL_COMP_MspInit+0x174>)
 8000a90:	f001 fd00 	bl	8002494 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	2089      	movs	r0, #137	; 0x89
 8000a9a:	f001 fafe 	bl	800209a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8000a9e:	2089      	movs	r0, #137	; 0x89
 8000aa0:	f001 fb15 	bl	80020ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 8000aa4:	e051      	b.n	8000b4a <HAL_COMP_MspInit+0x15e>
  else if(compHandle->Instance==COMP2)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a2e      	ldr	r2, [pc, #184]	; (8000b64 <HAL_COMP_MspInit+0x178>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d14c      	bne.n	8000b4a <HAL_COMP_MspInit+0x15e>
    HAL_RCC_COMP12_CLK_ENABLED++;
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <HAL_COMP_MspInit+0x16c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <HAL_COMP_MspInit+0x16c>)
 8000ab8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <HAL_COMP_MspInit+0x16c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d10e      	bne.n	8000ae0 <HAL_COMP_MspInit+0xf4>
      __HAL_RCC_COMP12_CLK_ENABLE();
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <HAL_COMP_MspInit+0x170>)
 8000ac4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ac8:	4a24      	ldr	r2, [pc, #144]	; (8000b5c <HAL_COMP_MspInit+0x170>)
 8000aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ace:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <HAL_COMP_MspInit+0x170>)
 8000ad4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <HAL_COMP_MspInit+0x170>)
 8000ae2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae6:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <HAL_COMP_MspInit+0x170>)
 8000ae8:	f043 0310 	orr.w	r3, r3, #16
 8000aec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_COMP_MspInit+0x170>)
 8000af2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_COMP2;
 8000b10:	230d      	movs	r3, #13
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4813      	ldr	r0, [pc, #76]	; (8000b68 <HAL_COMP_MspInit+0x17c>)
 8000b1c:	f001 fcba 	bl	8002494 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b26:	2303      	movs	r3, #3
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <HAL_COMP_MspInit+0x17c>)
 8000b36:	f001 fcad 	bl	8002494 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2089      	movs	r0, #137	; 0x89
 8000b40:	f001 faab 	bl	800209a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8000b44:	2089      	movs	r0, #137	; 0x89
 8000b46:	f001 fac2 	bl	80020ce <HAL_NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3730      	adds	r7, #48	; 0x30
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	5800380c 	.word	0x5800380c
 8000b58:	240001fc 	.word	0x240001fc
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58003810 	.word	0x58003810
 8000b68:	58021000 	.word	0x58021000

08000b6c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2224      	movs	r2, #36	; 0x24
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f009 fd61 	bl	800a640 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_DAC1_Init+0x5c>)
 8000b80:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_DAC1_Init+0x60>)
 8000b82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b84:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <MX_DAC1_Init+0x5c>)
 8000b86:	f001 fabc 	bl	8002102 <HAL_DAC_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b90:	f000 faf6 	bl	8001180 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <MX_DAC1_Init+0x5c>)
 8000bb0:	f001 fb40 	bl	8002234 <HAL_DAC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bba:	f000 fae1 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	24000328 	.word	0x24000328
 8000bcc:	40007400 	.word	0x40007400

08000bd0 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2224      	movs	r2, #36	; 0x24
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f009 fd2f 	bl	800a640 <memset>
  /* USER CODE BEGIN DAC2_Init 1 */

  /* USER CODE END DAC2_Init 1 */
  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_DAC2_Init+0x5c>)
 8000be4:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <MX_DAC2_Init+0x60>)
 8000be6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000be8:	4810      	ldr	r0, [pc, #64]	; (8000c2c <MX_DAC2_Init+0x5c>)
 8000bea:	f001 fa8a 	bl	8002102 <HAL_DAC_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000bf4:	f000 fac4 	bl	8001180 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000c00:	2302      	movs	r3, #2
 8000c02:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000c04:	2302      	movs	r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_DAC2_Init+0x5c>)
 8000c14:	f001 fb0e 	bl	8002234 <HAL_DAC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_DAC2_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 faaf 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	24000314 	.word	0x24000314
 8000c30:	58003400 	.word	0x58003400

08000c34 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <HAL_DAC_MspInit+0x68>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d10f      	bne.n	8000c66 <HAL_DAC_MspInit+0x32>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <HAL_DAC_MspInit+0x6c>)
 8000c48:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_DAC_MspInit+0x6c>)
 8000c4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c52:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_DAC_MspInit+0x6c>)
 8000c58:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DAC2_CLK_ENABLE();
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000c64:	e013      	b.n	8000c8e <HAL_DAC_MspInit+0x5a>
  else if(dacHandle->Instance==DAC2)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <HAL_DAC_MspInit+0x70>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d10e      	bne.n	8000c8e <HAL_DAC_MspInit+0x5a>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_DAC_MspInit+0x6c>)
 8000c72:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_DAC_MspInit+0x6c>)
 8000c78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c7c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <HAL_DAC_MspInit+0x6c>)
 8000c82:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40007400 	.word	0x40007400
 8000ca0:	58024400 	.word	0x58024400
 8000ca4:	58003400 	.word	0x58003400

08000ca8 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b87      	ldr	r3, [pc, #540]	; (8000edc <MX_GPIO_Init+0x234>)
 8000cc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cc4:	4a85      	ldr	r2, [pc, #532]	; (8000edc <MX_GPIO_Init+0x234>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cce:	4b83      	ldr	r3, [pc, #524]	; (8000edc <MX_GPIO_Init+0x234>)
 8000cd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	623b      	str	r3, [r7, #32]
 8000cda:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cdc:	4b7f      	ldr	r3, [pc, #508]	; (8000edc <MX_GPIO_Init+0x234>)
 8000cde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce2:	4a7e      	ldr	r2, [pc, #504]	; (8000edc <MX_GPIO_Init+0x234>)
 8000ce4:	f043 0320 	orr.w	r3, r3, #32
 8000ce8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cec:	4b7b      	ldr	r3, [pc, #492]	; (8000edc <MX_GPIO_Init+0x234>)
 8000cee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf2:	f003 0320 	and.w	r3, r3, #32
 8000cf6:	61fb      	str	r3, [r7, #28]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfa:	4b78      	ldr	r3, [pc, #480]	; (8000edc <MX_GPIO_Init+0x234>)
 8000cfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d00:	4a76      	ldr	r2, [pc, #472]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d0a:	4b74      	ldr	r3, [pc, #464]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b70      	ldr	r3, [pc, #448]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d1e:	4a6f      	ldr	r2, [pc, #444]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d28:	4b6c      	ldr	r3, [pc, #432]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	4b69      	ldr	r3, [pc, #420]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d3c:	4a67      	ldr	r2, [pc, #412]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d46:	4b65      	ldr	r3, [pc, #404]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d54:	4b61      	ldr	r3, [pc, #388]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d5a:	4a60      	ldr	r2, [pc, #384]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d60:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d64:	4b5d      	ldr	r3, [pc, #372]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b5a      	ldr	r3, [pc, #360]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d78:	4a58      	ldr	r2, [pc, #352]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d82:	4b56      	ldr	r3, [pc, #344]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d90:	4b52      	ldr	r3, [pc, #328]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d96:	4a51      	ldr	r2, [pc, #324]	; (8000edc <MX_GPIO_Init+0x234>)
 8000d98:	f043 0310 	orr.w	r3, r3, #16
 8000d9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000da0:	4b4e      	ldr	r3, [pc, #312]	; (8000edc <MX_GPIO_Init+0x234>)
 8000da2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000db4:	484a      	ldr	r0, [pc, #296]	; (8000ee0 <MX_GPIO_Init+0x238>)
 8000db6:	f001 fd35 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000dc0:	4848      	ldr	r0, [pc, #288]	; (8000ee4 <MX_GPIO_Init+0x23c>)
 8000dc2:	f001 fd2f 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2102      	movs	r1, #2
 8000dca:	4847      	ldr	r0, [pc, #284]	; (8000ee8 <MX_GPIO_Init+0x240>)
 8000dcc:	f001 fd2a 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	4841      	ldr	r0, [pc, #260]	; (8000eec <MX_GPIO_Init+0x244>)
 8000de6:	f001 fb55 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	4837      	ldr	r0, [pc, #220]	; (8000ee0 <MX_GPIO_Init+0x238>)
 8000e04:	f001 fb46 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	482f      	ldr	r0, [pc, #188]	; (8000ee0 <MX_GPIO_Init+0x238>)
 8000e22:	f001 fb37 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e26:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4829      	ldr	r0, [pc, #164]	; (8000ee4 <MX_GPIO_Init+0x23c>)
 8000e40:	f001 fb28 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	4825      	ldr	r0, [pc, #148]	; (8000ef0 <MX_GPIO_Init+0x248>)
 8000e5a:	f001 fb1b 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	4820      	ldr	r0, [pc, #128]	; (8000ef4 <MX_GPIO_Init+0x24c>)
 8000e74:	f001 fb0e 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <MX_GPIO_Init+0x24c>)
 8000e96:	f001 fafd 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000e9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <MX_GPIO_Init+0x24c>)
 8000eb4:	f001 faee 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <MX_GPIO_Init+0x240>)
 8000ed0:	f001 fae0 	bl	8002494 <HAL_GPIO_Init>

}
 8000ed4:	bf00      	nop
 8000ed6:	3738      	adds	r7, #56	; 0x38
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	58021400 	.word	0x58021400
 8000ee4:	58020400 	.word	0x58020400
 8000ee8:	58021000 	.word	0x58021000
 8000eec:	58020800 	.word	0x58020800
 8000ef0:	58021800 	.word	0x58021800
 8000ef4:	58020000 	.word	0x58020000

08000ef8 <HAL_TIM_TriggerCallback>:
  }

}


void HAL_TIM_TriggerCallback(TIM_HandleTypeDef * htim){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	if(PIN_DEBUG_ON) HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <HAL_TIM_TriggerCallback+0x1c>)
 8000f08:	f001 fc8c 	bl	8002824 <HAL_GPIO_WritePin>
  //not called, go to stm32h7xx_it.c
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58021400 	.word	0x58021400

08000f18 <my_toggle>:
    temp = values *3.3 / 65536;

    //printf("ADCxValues = %d, %5.3f\r\n", values, temp);
}

void my_toggle(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  if(toggle_state){
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <my_toggle+0x38>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d009      	beq.n	8000f38 <my_toggle+0x20>
   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2a:	480a      	ldr	r0, [pc, #40]	; (8000f54 <my_toggle+0x3c>)
 8000f2c:	f001 fc7a 	bl	8002824 <HAL_GPIO_WritePin>
   toggle_state=0;
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <my_toggle+0x38>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
    toggle_state=1;
  }


}
 8000f36:	e008      	b.n	8000f4a <my_toggle+0x32>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <my_toggle+0x3c>)
 8000f40:	f001 fc70 	bl	8002824 <HAL_GPIO_WritePin>
    toggle_state=1;
 8000f44:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <my_toggle+0x38>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	24001478 	.word	0x24001478
 8000f54:	58021400 	.word	0x58021400

08000f58 <DMA1_Stream1_IRQHandler>:
 * Formal parameter: None
 * Return value: None
*********************************************************************************************************
*/
void DMA1_Stream1_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    /*  Transfer complete interrupt */
    if((DMA1->LISR & DMA_FLAG_TCIF1_5) != RESET)
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <DMA1_Stream1_IRQHandler+0x70>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <DMA1_Stream1_IRQHandler+0x28>
    {
        my_toggle();
 8000f68:	f7ff ffd6 	bl	8000f18 <my_toggle>
        s_DmaFlag = 2;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <DMA1_Stream1_IRQHandler+0x74>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	601a      	str	r2, [r3, #0]
        newData = 1;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <DMA1_Stream1_IRQHandler+0x78>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
        //stop_acquisition();
        /*  Clear flag */
        DMA1->LIFCR = DMA_FLAG_TCIF1_5;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <DMA1_Stream1_IRQHandler+0x70>)
 8000f7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f7e:	609a      	str	r2, [r3, #8]
    }

    /*  Half transfer completed interrupt */
    if((DMA1->LISR & DMA_FLAG_HTIF1_5) != RESET)
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <DMA1_Stream1_IRQHandler+0x70>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <DMA1_Stream1_IRQHandler+0x42>
    {
        s_DmaFlag = 1;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <DMA1_Stream1_IRQHandler+0x74>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
        /*  Clear flag */
        DMA1->LIFCR = DMA_FLAG_HTIF1_5;
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <DMA1_Stream1_IRQHandler+0x70>)
 8000f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f98:	609a      	str	r2, [r3, #8]
    }

    /*  Transmission error interrupt */
    if((DMA1->LISR & DMA_FLAG_TEIF1_5) != RESET)
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <DMA1_Stream1_IRQHandler+0x70>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <DMA1_Stream1_IRQHandler+0x56>
    {
        /*  Clear flag */
        DMA1->LIFCR = DMA_FLAG_TEIF1_5;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <DMA1_Stream1_IRQHandler+0x70>)
 8000fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fac:	609a      	str	r2, [r3, #8]
    }

    /*  Direct mode error interrupt */
    if((DMA1->LISR & DMA_FLAG_DMEIF1_5) != RESET)
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <DMA1_Stream1_IRQHandler+0x70>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <DMA1_Stream1_IRQHandler+0x6a>
    {
        /*  Clear flag */
        DMA1->LIFCR = DMA_FLAG_DMEIF1_5;
 8000fba:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <DMA1_Stream1_IRQHandler+0x70>)
 8000fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc0:	609a      	str	r2, [r3, #8]
    }
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	24000368 	.word	0x24000368
 8000fd0:	24000340 	.word	0x24000340
 8000fd4:	00000000 	.word	0x00000000

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fde:	f000 fcdb 	bl	8001998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe2:	f000 f853 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f7ff fe5f 	bl	8000ca8 <MX_GPIO_Init>
  MX_COMP2_Init();
 8000fea:	f7ff fcd1 	bl	8000990 <MX_COMP2_Init>
  MX_COMP1_Init();
 8000fee:	f7ff fca1 	bl	8000934 <MX_COMP1_Init>
  MX_USART3_UART_Init();
 8000ff2:	f000 fbed 	bl	80017d0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000ff6:	f000 fb37 	bl	8001668 <MX_TIM2_Init>
  MX_DAC1_Init();
 8000ffa:	f7ff fdb7 	bl	8000b6c <MX_DAC1_Init>
  MX_DAC2_Init();
 8000ffe:	f7ff fde7 	bl	8000bd0 <MX_DAC2_Init>
  MX_USB_OTG_HS_USB_Init();
 8001002:	f000 fc97 	bl	8001934 <MX_USB_OTG_HS_USB_Init>
  MX_SDMMC1_SD_Init();
 8001006:	f000 f8c9 	bl	800119c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800100a:	f009 f8e1 	bl	800a1d0 <MX_FATFS_Init>
  //HAL_TIM_Base_Start_IT(&htim1);
  //HAL_TIM_Base_Start_IT(&htim2);
  //LoggerTask();
  //StartCounter();

  InitPeriodMeasure();
 800100e:	f7ff fb9b 	bl	8000748 <InitPeriodMeasure>

  while(1){
  	rawMeas = MeasProcess()*1E6;
 8001012:	f7ff fbfd 	bl	8000810 <MeasProcess>
 8001016:	eeb0 7b40 	vmov.f64	d7, d0
 800101a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001070 <main+0x98>
 800101e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <main+0xa0>)
 8001024:	ed83 7b00 	vstr	d7, [r3]
  	calMeas = correctMeas(rawMeas);
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <main+0xa0>)
 800102a:	ed93 7b00 	vldr	d7, [r3]
 800102e:	eeb0 0b47 	vmov.f64	d0, d7
 8001032:	f7ff fbcd 	bl	80007d0 <correctMeas>
 8001036:	eeb0 7b40 	vmov.f64	d7, d0
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <main+0xa4>)
 800103c:	ed83 7b00 	vstr	d7, [r3]
  	sprintf(serialBuff, "tof: %lf comp: %lf \n", rawMeas,calMeas);
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <main+0xa0>)
 8001042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <main+0xa4>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	e9cd 2300 	strd	r2, r3, [sp]
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	490a      	ldr	r1, [pc, #40]	; (8001080 <main+0xa8>)
 8001056:	480b      	ldr	r0, [pc, #44]	; (8001084 <main+0xac>)
 8001058:	f009 ff3c 	bl	800aed4 <siprintf>
  	HAL_UART_Transmit(&huart3,serialBuff,sizeof(serialBuff),10);
 800105c:	230a      	movs	r3, #10
 800105e:	2264      	movs	r2, #100	; 0x64
 8001060:	4908      	ldr	r1, [pc, #32]	; (8001084 <main+0xac>)
 8001062:	4809      	ldr	r0, [pc, #36]	; (8001088 <main+0xb0>)
 8001064:	f007 f93e 	bl	80082e4 <HAL_UART_Transmit>
  while(1){
 8001068:	e7d3      	b.n	8001012 <main+0x3a>
 800106a:	bf00      	nop
 800106c:	f3af 8000 	nop.w
 8001070:	00000000 	.word	0x00000000
 8001074:	412e8480 	.word	0x412e8480
 8001078:	24000268 	.word	0x24000268
 800107c:	24000270 	.word	0x24000270
 8001080:	0800d360 	.word	0x0800d360
 8001084:	24000200 	.word	0x24000200
 8001088:	2401261c 	.word	0x2401261c

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b09c      	sub	sp, #112	; 0x70
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	224c      	movs	r2, #76	; 0x4c
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f009 fad0 	bl	800a640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2220      	movs	r2, #32
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f009 faca 	bl	800a640 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80010ac:	2004      	movs	r0, #4
 80010ae:	f001 fbd3 	bl	8002858 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	4b30      	ldr	r3, [pc, #192]	; (8001178 <SystemClock_Config+0xec>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <SystemClock_Config+0xec>)
 80010bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c0:	6193      	str	r3, [r2, #24]
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <SystemClock_Config+0xec>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010ce:	bf00      	nop
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <SystemClock_Config+0xec>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010dc:	d1f8      	bne.n	80010d0 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <SystemClock_Config+0xf0>)
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	f023 0303 	bic.w	r3, r3, #3
 80010e6:	4a25      	ldr	r2, [pc, #148]	; (800117c <SystemClock_Config+0xf0>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010ee:	2321      	movs	r3, #33	; 0x21
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010f2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010f8:	2301      	movs	r3, #1
 80010fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fc:	2302      	movs	r3, #2
 80010fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001100:	2302      	movs	r3, #2
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001108:	2332      	movs	r3, #50	; 0x32
 800110a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800110c:	2302      	movs	r3, #2
 800110e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001110:	2308      	movs	r3, #8
 8001112:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001114:	2302      	movs	r3, #2
 8001116:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001118:	230c      	movs	r3, #12
 800111a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800111c:	2300      	movs	r3, #0
 800111e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fbef 	bl	800290c <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001134:	f000 f824 	bl	8001180 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	233f      	movs	r3, #63	; 0x3f
 800113a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113c:	2303      	movs	r3, #3
 800113e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001148:	2340      	movs	r3, #64	; 0x40
 800114a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800114c:	2340      	movs	r3, #64	; 0x40
 800114e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001154:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001156:	2340      	movs	r3, #64	; 0x40
 8001158:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2104      	movs	r1, #4
 800115e:	4618      	mov	r0, r3
 8001160:	f001 ffd8 	bl	8003114 <HAL_RCC_ClockConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800116a:	f000 f809 	bl	8001180 <Error_Handler>
  }
}
 800116e:	bf00      	nop
 8001170:	3770      	adds	r7, #112	; 0x70
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	58024800 	.word	0x58024800
 800117c:	58024400 	.word	0x58024400

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118e:	4802      	ldr	r0, [pc, #8]	; (8001198 <Error_Handler+0x18>)
 8001190:	f001 fb48 	bl	8002824 <HAL_GPIO_WritePin>
  while (1)
 8001194:	e7fe      	b.n	8001194 <Error_Handler+0x14>
 8001196:	bf00      	nop
 8001198:	58020400 	.word	0x58020400

0800119c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_SDMMC1_SD_Init+0x34>)
 80011a2:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <MX_SDMMC1_SD_Init+0x38>)
 80011a4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_SDMMC1_SD_Init+0x34>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_SDMMC1_SD_Init+0x34>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_SDMMC1_SD_Init+0x34>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <MX_SDMMC1_SD_Init+0x34>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <MX_SDMMC1_SD_Init+0x34>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	24012554 	.word	0x24012554
 80011d4:	52007000 	.word	0x52007000

080011d8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0ba      	sub	sp, #232	; 0xe8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	22b8      	movs	r2, #184	; 0xb8
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f009 fa21 	bl	800a640 <memset>
  if(sdHandle->Instance==SDMMC1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a4e      	ldr	r2, [pc, #312]	; (800133c <HAL_SD_MspInit+0x164>)
 8001204:	4293      	cmp	r3, r2
 8001206:	f040 8094 	bne.w	8001332 <HAL_SD_MspInit+0x15a>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800120a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800120e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001210:	2300      	movs	r3, #0
 8001212:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fb07 	bl	800382c <HAL_RCCEx_PeriphCLKConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001224:	f7ff ffac 	bl	8001180 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001228:	4b45      	ldr	r3, [pc, #276]	; (8001340 <HAL_SD_MspInit+0x168>)
 800122a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800122e:	4a44      	ldr	r2, [pc, #272]	; (8001340 <HAL_SD_MspInit+0x168>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <HAL_SD_MspInit+0x168>)
 800123a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800123e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001242:	61bb      	str	r3, [r7, #24]
 8001244:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <HAL_SD_MspInit+0x168>)
 8001248:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800124c:	4a3c      	ldr	r2, [pc, #240]	; (8001340 <HAL_SD_MspInit+0x168>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001256:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <HAL_SD_MspInit+0x168>)
 8001258:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001264:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_SD_MspInit+0x168>)
 8001266:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800126a:	4a35      	ldr	r2, [pc, #212]	; (8001340 <HAL_SD_MspInit+0x168>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001274:	4b32      	ldr	r3, [pc, #200]	; (8001340 <HAL_SD_MspInit+0x168>)
 8001276:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001282:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <HAL_SD_MspInit+0x168>)
 8001284:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001288:	4a2d      	ldr	r2, [pc, #180]	; (8001340 <HAL_SD_MspInit+0x168>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_SD_MspInit+0x168>)
 8001294:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PB13     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012ba:	230c      	movs	r3, #12
 80012bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012c4:	4619      	mov	r1, r3
 80012c6:	481f      	ldr	r0, [pc, #124]	; (8001344 <HAL_SD_MspInit+0x16c>)
 80012c8:	f001 f8e4 	bl	8002494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012e6:	230c      	movs	r3, #12
 80012e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012f0:	4619      	mov	r1, r3
 80012f2:	4815      	ldr	r0, [pc, #84]	; (8001348 <HAL_SD_MspInit+0x170>)
 80012f4:	f001 f8ce 	bl	8002494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012f8:	2304      	movs	r3, #4
 80012fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001310:	230c      	movs	r3, #12
 8001312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001316:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800131a:	4619      	mov	r1, r3
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <HAL_SD_MspInit+0x174>)
 800131e:	f001 f8b9 	bl	8002494 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2031      	movs	r0, #49	; 0x31
 8001328:	f000 feb7 	bl	800209a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800132c:	2031      	movs	r0, #49	; 0x31
 800132e:	f000 fece 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001332:	bf00      	nop
 8001334:	37e8      	adds	r7, #232	; 0xe8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	52007000 	.word	0x52007000
 8001340:	58024400 	.word	0x58024400
 8001344:	58020400 	.word	0x58020400
 8001348:	58020800 	.word	0x58020800
 800134c:	58020c00 	.word	0x58020c00

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_MspInit+0x30>)
 8001358:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800135c:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_MspInit+0x30>)
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_MspInit+0x30>)
 8001368:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	58024400 	.word	0x58024400

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d0:	f000 fb54 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <SDMMC1_IRQHandler+0x10>)
 80013de:	f004 ff01 	bl	80061e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	24012554 	.word	0x24012554

080013ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	return 1;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_kill>:

int _kill(int pid, int sig)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001406:	f009 f8f1 	bl	800a5ec <__errno>
 800140a:	4603      	mov	r3, r0
 800140c:	2216      	movs	r2, #22
 800140e:	601a      	str	r2, [r3, #0]
	return -1;
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_exit>:

void _exit (int status)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ffe7 	bl	80013fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800142e:	e7fe      	b.n	800142e <_exit+0x12>

08001430 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	e00a      	b.n	8001458 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001442:	f3af 8000 	nop.w
 8001446:	4601      	mov	r1, r0
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	60ba      	str	r2, [r7, #8]
 800144e:	b2ca      	uxtb	r2, r1
 8001450:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3301      	adds	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	429a      	cmp	r2, r3
 800145e:	dbf0      	blt.n	8001442 <_read+0x12>
	}

return len;
 8001460:	687b      	ldr	r3, [r7, #4]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	e009      	b.n	8001490 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	60ba      	str	r2, [r7, #8]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	dbf1      	blt.n	800147c <_write+0x12>
	}
	return len;
 8001498:	687b      	ldr	r3, [r7, #4]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <_close>:

int _close(int file)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
	return -1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ca:	605a      	str	r2, [r3, #4]
	return 0;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_isatty>:

int _isatty(int file)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
	return 1;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f009 f856 	bl	800a5ec <__errno>
 8001540:	4603      	mov	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <_sbrk+0x64>)
 800155c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	24100000 	.word	0x24100000
 800156c:	00000400 	.word	0x00000400
 8001570:	24000278 	.word	0x24000278
 8001574:	240126c0 	.word	0x240126c0

08001578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800157c:	4b32      	ldr	r3, [pc, #200]	; (8001648 <SystemInit+0xd0>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001582:	4a31      	ldr	r2, [pc, #196]	; (8001648 <SystemInit+0xd0>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <SystemInit+0xd4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	2b02      	cmp	r3, #2
 8001596:	d807      	bhi.n	80015a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001598:	4b2c      	ldr	r3, [pc, #176]	; (800164c <SystemInit+0xd4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 030f 	bic.w	r3, r3, #15
 80015a0:	4a2a      	ldr	r2, [pc, #168]	; (800164c <SystemInit+0xd4>)
 80015a2:	f043 0303 	orr.w	r3, r3, #3
 80015a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <SystemInit+0xd8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a28      	ldr	r2, [pc, #160]	; (8001650 <SystemInit+0xd8>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015b4:	4b26      	ldr	r3, [pc, #152]	; (8001650 <SystemInit+0xd8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015ba:	4b25      	ldr	r3, [pc, #148]	; (8001650 <SystemInit+0xd8>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4924      	ldr	r1, [pc, #144]	; (8001650 <SystemInit+0xd8>)
 80015c0:	4b24      	ldr	r3, [pc, #144]	; (8001654 <SystemInit+0xdc>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <SystemInit+0xd4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <SystemInit+0xd4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 030f 	bic.w	r3, r3, #15
 80015da:	4a1c      	ldr	r2, [pc, #112]	; (800164c <SystemInit+0xd4>)
 80015dc:	f043 0303 	orr.w	r3, r3, #3
 80015e0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <SystemInit+0xd8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <SystemInit+0xd8>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <SystemInit+0xd8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <SystemInit+0xd8>)
 80015f6:	4a18      	ldr	r2, [pc, #96]	; (8001658 <SystemInit+0xe0>)
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <SystemInit+0xd8>)
 80015fc:	4a17      	ldr	r2, [pc, #92]	; (800165c <SystemInit+0xe4>)
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <SystemInit+0xd8>)
 8001602:	4a17      	ldr	r2, [pc, #92]	; (8001660 <SystemInit+0xe8>)
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <SystemInit+0xd8>)
 8001608:	2200      	movs	r2, #0
 800160a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <SystemInit+0xd8>)
 800160e:	4a14      	ldr	r2, [pc, #80]	; (8001660 <SystemInit+0xe8>)
 8001610:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <SystemInit+0xd8>)
 8001614:	2200      	movs	r2, #0
 8001616:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <SystemInit+0xd8>)
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <SystemInit+0xe8>)
 800161c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <SystemInit+0xd8>)
 8001620:	2200      	movs	r2, #0
 8001622:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <SystemInit+0xd8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a09      	ldr	r2, [pc, #36]	; (8001650 <SystemInit+0xd8>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <SystemInit+0xd8>)
 8001632:	2200      	movs	r2, #0
 8001634:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <SystemInit+0xec>)
 8001638:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800163c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	52002000 	.word	0x52002000
 8001650:	58024400 	.word	0x58024400
 8001654:	eaf6ed7f 	.word	0xeaf6ed7f
 8001658:	02020200 	.word	0x02020200
 800165c:	01ff0000 	.word	0x01ff0000
 8001660:	01010280 	.word	0x01010280
 8001664:	52004000 	.word	0x52004000

08001668 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	f107 0320 	add.w	r3, r7, #32
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168c:	463b      	mov	r3, r7
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001696:	4b29      	ldr	r3, [pc, #164]	; (800173c <MX_TIM2_Init+0xd4>)
 8001698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800169c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800169e:	4b27      	ldr	r3, [pc, #156]	; (800173c <MX_TIM2_Init+0xd4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <MX_TIM2_Init+0xd4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <MX_TIM2_Init+0xd4>)
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <MX_TIM2_Init+0xd4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b8:	4b20      	ldr	r3, [pc, #128]	; (800173c <MX_TIM2_Init+0xd4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016be:	481f      	ldr	r0, [pc, #124]	; (800173c <MX_TIM2_Init+0xd4>)
 80016c0:	f005 ff82 	bl	80075c8 <HAL_TIM_Base_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80016ca:	f7ff fd59 	bl	8001180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016d4:	f107 0320 	add.w	r3, r7, #32
 80016d8:	4619      	mov	r1, r3
 80016da:	4818      	ldr	r0, [pc, #96]	; (800173c <MX_TIM2_Init+0xd4>)
 80016dc:	f006 f982 	bl	80079e4 <HAL_TIM_ConfigClockSource>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80016e6:	f7ff fd4b 	bl	8001180 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80016ea:	2306      	movs	r3, #6
 80016ec:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80016ee:	2370      	movs	r3, #112	; 0x70
 80016f0:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 80016f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016f6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	4619      	mov	r1, r3
 8001706:	480d      	ldr	r0, [pc, #52]	; (800173c <MX_TIM2_Init+0xd4>)
 8001708:	f006 fa64 	bl	8007bd4 <HAL_TIM_SlaveConfigSynchro>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001712:	f7ff fd35 	bl	8001180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800171e:	463b      	mov	r3, r7
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <MX_TIM2_Init+0xd4>)
 8001724:	f006 fce2 	bl	80080ec <HAL_TIMEx_MasterConfigSynchronization>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800172e:	f7ff fd27 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	3730      	adds	r7, #48	; 0x30
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	240125d0 	.word	0x240125d0

08001740 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001760:	d12d      	bne.n	80017be <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_TIM_Base_MspInit+0x88>)
 8001764:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_TIM_Base_MspInit+0x88>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_TIM_Base_MspInit+0x88>)
 8001774:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_TIM_Base_MspInit+0x88>)
 8001782:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_TIM_Base_MspInit+0x88>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_TIM_Base_MspInit+0x88>)
 8001792:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800179e:	2301      	movs	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ae:	2301      	movs	r3, #1
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <HAL_TIM_Base_MspInit+0x8c>)
 80017ba:	f000 fe6b 	bl	8002494 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	58024400 	.word	0x58024400
 80017cc:	58020000 	.word	0x58020000

080017d0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <MX_USART3_UART_Init+0x90>)
 80017d6:	4a23      	ldr	r2, [pc, #140]	; (8001864 <MX_USART3_UART_Init+0x94>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <MX_USART3_UART_Init+0x90>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <MX_USART3_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MX_USART3_UART_Init+0x90>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MX_USART3_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_USART3_UART_Init+0x90>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <MX_USART3_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_USART3_UART_Init+0x90>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <MX_USART3_UART_Init+0x90>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_USART3_UART_Init+0x90>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <MX_USART3_UART_Init+0x90>)
 8001814:	2200      	movs	r2, #0
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001818:	4811      	ldr	r0, [pc, #68]	; (8001860 <MX_USART3_UART_Init+0x90>)
 800181a:	f006 fd13 	bl	8008244 <HAL_UART_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001824:	f7ff fcac 	bl	8001180 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001828:	2100      	movs	r1, #0
 800182a:	480d      	ldr	r0, [pc, #52]	; (8001860 <MX_USART3_UART_Init+0x90>)
 800182c:	f007 fe3c 	bl	80094a8 <HAL_UARTEx_SetTxFifoThreshold>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001836:	f7ff fca3 	bl	8001180 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183a:	2100      	movs	r1, #0
 800183c:	4808      	ldr	r0, [pc, #32]	; (8001860 <MX_USART3_UART_Init+0x90>)
 800183e:	f007 fe71 	bl	8009524 <HAL_UARTEx_SetRxFifoThreshold>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001848:	f7ff fc9a 	bl	8001180 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_USART3_UART_Init+0x90>)
 800184e:	f007 fdf2 	bl	8009436 <HAL_UARTEx_DisableFifoMode>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001858:	f7ff fc92 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2401261c 	.word	0x2401261c
 8001864:	40004800 	.word	0x40004800

08001868 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0b8      	sub	sp, #224	; 0xe0
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	22b8      	movs	r2, #184	; 0xb8
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f008 fed9 	bl	800a640 <memset>
  if(uartHandle->Instance==USART3)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a25      	ldr	r2, [pc, #148]	; (8001928 <HAL_UART_MspInit+0xc0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d142      	bne.n	800191e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001898:	2302      	movs	r3, #2
 800189a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4618      	mov	r0, r3
 80018a8:	f001 ffc0 	bl	800382c <HAL_RCCEx_PeriphCLKConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018b2:	f7ff fc65 	bl	8001180 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <HAL_UART_MspInit+0xc4>)
 80018b8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018bc:	4a1b      	ldr	r2, [pc, #108]	; (800192c <HAL_UART_MspInit+0xc4>)
 80018be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_UART_MspInit+0xc4>)
 80018c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_UART_MspInit+0xc4>)
 80018d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018da:	4a14      	ldr	r2, [pc, #80]	; (800192c <HAL_UART_MspInit+0xc4>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_UART_MspInit+0xc4>)
 80018e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800190c:	2307      	movs	r3, #7
 800190e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001912:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_UART_MspInit+0xc8>)
 800191a:	f000 fdbb 	bl	8002494 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800191e:	bf00      	nop
 8001920:	37e0      	adds	r7, #224	; 0xe0
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40004800 	.word	0x40004800
 800192c:	58024400 	.word	0x58024400
 8001930:	58020c00 	.word	0x58020c00

08001934 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800197c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001948:	f7ff fe16 	bl	8001578 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194e:	490d      	ldr	r1, [pc, #52]	; (8001984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001950:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001964:	4c0a      	ldr	r4, [pc, #40]	; (8001990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001972:	f008 fe41 	bl	800a5f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff fb2f 	bl	8000fd8 <main>
  bx  lr
 800197a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800197c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001980:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001984:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001988:	0800d7b4 	.word	0x0800d7b4
  ldr r2, =_sbss
 800198c:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001990:	240126c0 	.word	0x240126c0

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>
	...

08001998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199e:	2003      	movs	r0, #3
 80019a0:	f000 fb70 	bl	8002084 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80019a4:	f001 fd6c 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_Init+0x68>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	4913      	ldr	r1, [pc, #76]	; (8001a04 <HAL_Init+0x6c>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
 80019c0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_Init+0x68>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_Init+0x6c>)
 80019cc:	5cd3      	ldrb	r3, [r2, r3]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	fa22 f303 	lsr.w	r3, r2, r3
 80019d8:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <HAL_Init+0x70>)
 80019da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019dc:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <HAL_Init+0x74>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e2:	2000      	movs	r0, #0
 80019e4:	f000 f814 	bl	8001a10 <HAL_InitTick>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e002      	b.n	80019f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019f2:	f7ff fcad 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	58024400 	.word	0x58024400
 8001a04:	0800d378 	.word	0x0800d378
 8001a08:	24000004 	.word	0x24000004
 8001a0c:	24000000 	.word	0x24000000

08001a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_InitTick+0x60>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e021      	b.n	8001a68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <HAL_InitTick+0x64>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_InitTick+0x60>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fb55 	bl	80020ea <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f000 fb1f 	bl	800209a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <HAL_InitTick+0x68>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	2400000c 	.word	0x2400000c
 8001a74:	24000000 	.word	0x24000000
 8001a78:	24000008 	.word	0x24000008

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2400000c 	.word	0x2400000c
 8001aa0:	240126ac 	.word	0x240126ac

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	240126ac 	.word	0x240126ac

08001abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff ffee 	bl	8001aa4 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_Delay+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ffde 	bl	8001aa4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f7      	bhi.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2400000c 	.word	0x2400000c

08001b04 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	77fb      	strb	r3, [r7, #31]
 8001b1e:	e10e      	b.n	8001d3e <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b2e:	d102      	bne.n	8001b36 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	77fb      	strb	r3, [r7, #31]
 8001b34:	e103      	b.n	8001d3e <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7fe ff4b 	bl	80009ec <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8001b6a:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8001b70:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8001b76:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8001b7c:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8001b82:	4313      	orrs	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]
    
    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
#if defined (COMP_CFGRx_INP2SEL)
    MODIFY_REG(hcomp->Instance->CFGR,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <HAL_COMP_Init+0x244>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	6979      	ldr	r1, [r7, #20]
 8001b96:	430b      	orrs	r3, r1
 8001b98:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b10      	cmp	r3, #16
 8001ba0:	d108      	bne.n	8001bb4 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0210 	orr.w	r2, r2, #16
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	e007      	b.n	8001bc4 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0210 	bic.w	r2, r2, #16
 8001bc2:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d016      	beq.n	8001c00 <HAL_COMP_Init+0xfc>
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d013      	beq.n	8001c00 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bd8:	4b5c      	ldr	r3, [pc, #368]	; (8001d4c <HAL_COMP_Init+0x248>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	099b      	lsrs	r3, r3, #6
 8001bde:	4a5c      	ldr	r2, [pc, #368]	; (8001d50 <HAL_COMP_Init+0x24c>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8001bf2:	e002      	b.n	8001bfa <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f9      	bne.n	8001bf4 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a53      	ldr	r2, [pc, #332]	; (8001d54 <HAL_COMP_Init+0x250>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d102      	bne.n	8001c10 <HAL_COMP_Init+0x10c>
 8001c0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c0e:	e001      	b.n	8001c14 <HAL_COMP_Init+0x110>
 8001c10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c14:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d06d      	beq.n	8001cfe <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8001c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
 8001c3e:	e008      	b.n	8001c52 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c4e:	4013      	ands	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d008      	beq.n	8001c70 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
 8001c6e:	e008      	b.n	8001c82 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7e:	4013      	ands	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8001c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00a      	beq.n	8001cae <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8001c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8001cac:	e00a      	b.n	8001cc4 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8001cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00a      	beq.n	8001ce6 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001cd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8001ce4:	e021      	b.n	8001d2a <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8001ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8001cfc:	e015      	b.n	8001d2a <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8001cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d02:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d0e:	4013      	ands	r3, r2
 8001d10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d18:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d24:	4013      	ands	r3, r2
 8001d26:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3720      	adds	r7, #32
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	f0a0cce1 	.word	0xf0a0cce1
 8001d4c:	24000000 	.word	0x24000000
 8001d50:	053e2d63 	.word	0x053e2d63
 8001d54:	5800380c 	.word	0x5800380c

08001d58 <HAL_COMP_Start_IT>:
  * @brief  Enable the interrupt and start the comparator.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{ 
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  
 __IO uint32_t wait_loop_index = 0UL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
 HAL_StatusTypeDef status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <HAL_COMP_Start_IT+0x1c>
  {
    status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
 8001d72:	e038      	b.n	8001de6 <HAL_COMP_Start_IT+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d82:	d102      	bne.n	8001d8a <HAL_COMP_Start_IT+0x32>
  {
    status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e02d      	b.n	8001de6 <HAL_COMP_Start_IT+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
    /* Set HAL COMP handle state */
    if(hcomp->State == HAL_COMP_STATE_READY)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d125      	bne.n	8001de2 <HAL_COMP_Start_IT+0x8a>
    {

    /* Enable the selected comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
    /* Enable the Interrupt comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_ITEN);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001db4:	601a      	str	r2, [r3, #0]

    hcomp->State = HAL_COMP_STATE_BUSY; 
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2202      	movs	r2, #2
 8001dba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */

     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <HAL_COMP_Start_IT+0x9c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	099b      	lsrs	r3, r3, #6
 8001dc4:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <HAL_COMP_Start_IT+0xa0>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	099b      	lsrs	r3, r3, #6
 8001dcc:	3301      	adds	r3, #1
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 8001dd2:	e002      	b.n	8001dda <HAL_COMP_Start_IT+0x82>
     {
       wait_loop_index--;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f9      	bne.n	8001dd4 <HAL_COMP_Start_IT+0x7c>
 8001de0:	e001      	b.n	8001de6 <HAL_COMP_Start_IT+0x8e>
     }

    }
    else
    {
       status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
    }
   }

  return status;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	24000000 	.word	0x24000000
 8001df8:	053e2d63 	.word	0x053e2d63

08001dfc <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a33      	ldr	r2, [pc, #204]	; (8001ed8 <HAL_COMP_IRQHandler+0xdc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d102      	bne.n	8001e14 <HAL_COMP_IRQHandler+0x18>
 8001e0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e12:	e001      	b.n	8001e18 <HAL_COMP_IRQHandler+0x1c>
 8001e14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e18:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 8001e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d014      	beq.n	8001e54 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <HAL_COMP_IRQHandler+0xe0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8001e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001e42:	e004      	b.n	8001e4e <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 8001e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe fd12 	bl	8000878 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	2b40      	cmp	r3, #64	; 0x40
 8001e60:	d136      	bne.n	8001ed0 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <HAL_COMP_IRQHandler+0xe4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6e:	d101      	bne.n	8001e74 <HAL_COMP_IRQHandler+0x78>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_COMP_IRQHandler+0x7a>
 8001e74:	2300      	movs	r3, #0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_COMP_IRQHandler+0xe4>)
 8001e7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e80:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e90:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <HAL_COMP_IRQHandler+0xe4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e9e:	d101      	bne.n	8001ea4 <HAL_COMP_IRQHandler+0xa8>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_COMP_IRQHandler+0xaa>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_COMP_IRQHandler+0xe4>)
 8001eac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eb0:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ec0:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fcd4 	bl	8000878 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	5800380c 	.word	0x5800380c
 8001edc:	58003810 	.word	0x58003810
 8001ee0:	58003800 	.word	0x58003800

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <__NVIC_SetPriorityGrouping+0x40>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f12:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <__NVIC_SetPriorityGrouping+0x40>)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	60d3      	str	r3, [r2, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00
 8001f28:	05fa0000 	.word	0x05fa0000

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4907      	ldr	r1, [pc, #28]	; (8001f80 <__NVIC_EnableIRQ+0x38>)
 8001f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
         );
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002050:	d301      	bcc.n	8002056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002052:	2301      	movs	r3, #1
 8002054:	e00f      	b.n	8002076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <SysTick_Config+0x40>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205e:	210f      	movs	r1, #15
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f7ff ff8e 	bl	8001f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <SysTick_Config+0x40>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <SysTick_Config+0x40>)
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010

08002084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff29 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020a8:	f7ff ff40 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 80020ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f7ff ff90 	bl	8001fd8 <NVIC_EncodePriority>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff5f 	bl	8001f84 <__NVIC_SetPriority>
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff33 	bl	8001f48 <__NVIC_EnableIRQ>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ffa4 	bl	8002040 <SysTick_Config>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e014      	b.n	800213e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	791b      	ldrb	r3, [r3, #4]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7fe fd85 	bl	8000c34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2202      	movs	r2, #2
 800212e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	795b      	ldrb	r3, [r3, #5]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_DAC_Start+0x16>
 8002158:	2302      	movs	r3, #2
 800215a:	e040      	b.n	80021de <HAL_DAC_Start+0x98>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6819      	ldr	r1, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2201      	movs	r2, #1
 8002176:	409a      	lsls	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10f      	bne.n	80021a6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002190:	2b02      	cmp	r3, #2
 8002192:	d11d      	bne.n	80021d0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	e014      	b.n	80021d0 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2102      	movs	r1, #2
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	429a      	cmp	r2, r3
 80021be:	d107      	bne.n	80021d0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0202 	orr.w	r2, r2, #2
 80021ce:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b087      	sub	sp, #28
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	3308      	adds	r3, #8
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	e004      	b.n	800221e <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	3314      	adds	r3, #20
 800221c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	461a      	mov	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	371c      	adds	r7, #28
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	795b      	ldrb	r3, [r3, #5]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_DAC_ConfigChannel+0x18>
 8002248:	2302      	movs	r3, #2
 800224a:	e11d      	b.n	8002488 <HAL_DAC_ConfigChannel+0x254>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2202      	movs	r2, #2
 8002256:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b04      	cmp	r3, #4
 800225e:	d174      	bne.n	800234a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002260:	f7ff fc20 	bl	8001aa4 <HAL_GetTick>
 8002264:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d134      	bne.n	80022d6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800226c:	e011      	b.n	8002292 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800226e:	f7ff fc19 	bl	8001aa4 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d90a      	bls.n	8002292 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	f043 0208 	orr.w	r2, r3, #8
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2203      	movs	r2, #3
 800228c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0fa      	b.n	8002488 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002298:	4b7d      	ldr	r3, [pc, #500]	; (8002490 <HAL_DAC_ConfigChannel+0x25c>)
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e6      	bne.n	800226e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80022a0:	2001      	movs	r0, #1
 80022a2:	f7ff fc0b 	bl	8001abc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	6992      	ldr	r2, [r2, #24]
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40
 80022b0:	e01e      	b.n	80022f0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022b2:	f7ff fbf7 	bl	8001aa4 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d90a      	bls.n	80022d6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f043 0208 	orr.w	r2, r3, #8
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2203      	movs	r2, #3
 80022d0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e0d8      	b.n	8002488 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022dc:	2b00      	cmp	r3, #0
 80022de:	dbe8      	blt.n	80022b2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7ff fbeb 	bl	8001abc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	6992      	ldr	r2, [r2, #24]
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	ea02 0103 	and.w	r1, r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	409a      	lsls	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	21ff      	movs	r1, #255	; 0xff
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	ea02 0103 	and.w	r1, r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	6a1a      	ldr	r2, [r3, #32]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	409a      	lsls	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d11d      	bne.n	800238e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	221f      	movs	r2, #31
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4013      	ands	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002394:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	2207      	movs	r2, #7
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4013      	ands	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d102      	bne.n	80023b8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e00f      	b.n	80023d8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d102      	bne.n	80023c6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80023c0:	2301      	movs	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	e008      	b.n	80023d8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80023ce:	2301      	movs	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e001      	b.n	80023d8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6819      	ldr	r1, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	400a      	ands	r2, r1
 800241e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4013      	ands	r3, r2
 800243c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	22c0      	movs	r2, #192	; 0xc0
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43da      	mvns	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	400a      	ands	r2, r1
 8002478:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3720      	adds	r7, #32
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20008000 	.word	0x20008000

08002494 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024a2:	4b89      	ldr	r3, [pc, #548]	; (80026c8 <HAL_GPIO_Init+0x234>)
 80024a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024a6:	e194      	b.n	80027d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	2101      	movs	r1, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8186 	beq.w	80027cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d005      	beq.n	80024d8 <HAL_GPIO_Init+0x44>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d130      	bne.n	800253a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800250e:	2201      	movs	r2, #1
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 0201 	and.w	r2, r3, #1
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b03      	cmp	r3, #3
 8002544:	d017      	beq.n	8002576 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2203      	movs	r2, #3
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d123      	bne.n	80025ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	220f      	movs	r2, #15
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	69b9      	ldr	r1, [r7, #24]
 80025c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0203 	and.w	r2, r3, #3
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80e0 	beq.w	80027cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260c:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <HAL_GPIO_Init+0x238>)
 800260e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002612:	4a2e      	ldr	r2, [pc, #184]	; (80026cc <HAL_GPIO_Init+0x238>)
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800261c:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_GPIO_Init+0x238>)
 800261e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262a:	4a29      	ldr	r2, [pc, #164]	; (80026d0 <HAL_GPIO_Init+0x23c>)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <HAL_GPIO_Init+0x240>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d052      	beq.n	80026fc <HAL_GPIO_Init+0x268>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a1f      	ldr	r2, [pc, #124]	; (80026d8 <HAL_GPIO_Init+0x244>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d031      	beq.n	80026c2 <HAL_GPIO_Init+0x22e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1e      	ldr	r2, [pc, #120]	; (80026dc <HAL_GPIO_Init+0x248>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d02b      	beq.n	80026be <HAL_GPIO_Init+0x22a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a1d      	ldr	r2, [pc, #116]	; (80026e0 <HAL_GPIO_Init+0x24c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d025      	beq.n	80026ba <HAL_GPIO_Init+0x226>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <HAL_GPIO_Init+0x250>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01f      	beq.n	80026b6 <HAL_GPIO_Init+0x222>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1b      	ldr	r2, [pc, #108]	; (80026e8 <HAL_GPIO_Init+0x254>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d019      	beq.n	80026b2 <HAL_GPIO_Init+0x21e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a1a      	ldr	r2, [pc, #104]	; (80026ec <HAL_GPIO_Init+0x258>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_GPIO_Init+0x21a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a19      	ldr	r2, [pc, #100]	; (80026f0 <HAL_GPIO_Init+0x25c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00d      	beq.n	80026aa <HAL_GPIO_Init+0x216>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a18      	ldr	r2, [pc, #96]	; (80026f4 <HAL_GPIO_Init+0x260>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <HAL_GPIO_Init+0x212>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a17      	ldr	r2, [pc, #92]	; (80026f8 <HAL_GPIO_Init+0x264>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_GPIO_Init+0x20e>
 800269e:	2309      	movs	r3, #9
 80026a0:	e02d      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026a2:	230a      	movs	r3, #10
 80026a4:	e02b      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026a6:	2308      	movs	r3, #8
 80026a8:	e029      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026aa:	2307      	movs	r3, #7
 80026ac:	e027      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026ae:	2306      	movs	r3, #6
 80026b0:	e025      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026b2:	2305      	movs	r3, #5
 80026b4:	e023      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026b6:	2304      	movs	r3, #4
 80026b8:	e021      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026ba:	2303      	movs	r3, #3
 80026bc:	e01f      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026be:	2302      	movs	r3, #2
 80026c0:	e01d      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e01b      	b.n	80026fe <HAL_GPIO_Init+0x26a>
 80026c6:	bf00      	nop
 80026c8:	58000080 	.word	0x58000080
 80026cc:	58024400 	.word	0x58024400
 80026d0:	58000400 	.word	0x58000400
 80026d4:	58020000 	.word	0x58020000
 80026d8:	58020400 	.word	0x58020400
 80026dc:	58020800 	.word	0x58020800
 80026e0:	58020c00 	.word	0x58020c00
 80026e4:	58021000 	.word	0x58021000
 80026e8:	58021400 	.word	0x58021400
 80026ec:	58021800 	.word	0x58021800
 80026f0:	58021c00 	.word	0x58021c00
 80026f4:	58022000 	.word	0x58022000
 80026f8:	58022400 	.word	0x58022400
 80026fc:	2300      	movs	r3, #0
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	f002 0203 	and.w	r2, r2, #3
 8002704:	0092      	lsls	r2, r2, #2
 8002706:	4093      	lsls	r3, r2
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800270e:	4938      	ldr	r1, [pc, #224]	; (80027f0 <HAL_GPIO_Init+0x35c>)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3302      	adds	r3, #2
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800271c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800274a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	3301      	adds	r3, #1
 80027d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f47f ae63 	bne.w	80024a8 <HAL_GPIO_Init+0x14>
  }
}
 80027e2:	bf00      	nop
 80027e4:	bf00      	nop
 80027e6:	3724      	adds	r7, #36	; 0x24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	58000400 	.word	0x58000400

080027f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e001      	b.n	8002816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002816:	7bfb      	ldrb	r3, [r7, #15]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
 8002830:	4613      	mov	r3, r2
 8002832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002834:	787b      	ldrb	r3, [r7, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002840:	e003      	b.n	800284a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	041a      	lsls	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	619a      	str	r2, [r3, #24]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002860:	4b29      	ldr	r3, [pc, #164]	; (8002908 <HAL_PWREx_ConfigSupply+0xb0>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	2b06      	cmp	r3, #6
 800286a:	d00a      	beq.n	8002882 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_PWREx_ConfigSupply+0xb0>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d001      	beq.n	800287e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e040      	b.n	8002900 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e03e      	b.n	8002900 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <HAL_PWREx_ConfigSupply+0xb0>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800288a:	491f      	ldr	r1, [pc, #124]	; (8002908 <HAL_PWREx_ConfigSupply+0xb0>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4313      	orrs	r3, r2
 8002890:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002892:	f7ff f907 	bl	8001aa4 <HAL_GetTick>
 8002896:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002898:	e009      	b.n	80028ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800289a:	f7ff f903 	bl	8001aa4 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028a8:	d901      	bls.n	80028ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e028      	b.n	8002900 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_PWREx_ConfigSupply+0xb0>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ba:	d1ee      	bne.n	800289a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b1e      	cmp	r3, #30
 80028c0:	d008      	beq.n	80028d4 <HAL_PWREx_ConfigSupply+0x7c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b2e      	cmp	r3, #46	; 0x2e
 80028c6:	d005      	beq.n	80028d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b1d      	cmp	r3, #29
 80028cc:	d002      	beq.n	80028d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b2d      	cmp	r3, #45	; 0x2d
 80028d2:	d114      	bne.n	80028fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80028d4:	f7ff f8e6 	bl	8001aa4 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028da:	e009      	b.n	80028f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028dc:	f7ff f8e2 	bl	8001aa4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ea:	d901      	bls.n	80028f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e007      	b.n	8002900 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_PWREx_ConfigSupply+0xb0>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fc:	d1ee      	bne.n	80028dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	58024800 	.word	0x58024800

0800290c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08c      	sub	sp, #48	; 0x30
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e3f3      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80b3 	beq.w	8002a92 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292c:	4b9e      	ldr	r3, [pc, #632]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002936:	4b9c      	ldr	r3, [pc, #624]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293e:	2b10      	cmp	r3, #16
 8002940:	d007      	beq.n	8002952 <HAL_RCC_OscConfig+0x46>
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	2b18      	cmp	r3, #24
 8002946:	d112      	bne.n	800296e <HAL_RCC_OscConfig+0x62>
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d10d      	bne.n	800296e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002952:	4b95      	ldr	r3, [pc, #596]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 8098 	beq.w	8002a90 <HAL_RCC_OscConfig+0x184>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f040 8093 	bne.w	8002a90 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e3cb      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x7a>
 8002978:	4b8b      	ldr	r3, [pc, #556]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a8a      	ldr	r2, [pc, #552]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 800297e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	e058      	b.n	8002a38 <HAL_RCC_OscConfig+0x12c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d112      	bne.n	80029b4 <HAL_RCC_OscConfig+0xa8>
 800298e:	4b86      	ldr	r3, [pc, #536]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a85      	ldr	r2, [pc, #532]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b83      	ldr	r3, [pc, #524]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a82      	ldr	r2, [pc, #520]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 80029a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b80      	ldr	r3, [pc, #512]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a7f      	ldr	r2, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 80029ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e041      	b.n	8002a38 <HAL_RCC_OscConfig+0x12c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029bc:	d112      	bne.n	80029e4 <HAL_RCC_OscConfig+0xd8>
 80029be:	4b7a      	ldr	r3, [pc, #488]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a79      	ldr	r2, [pc, #484]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b77      	ldr	r3, [pc, #476]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a76      	ldr	r2, [pc, #472]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 80029d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b74      	ldr	r3, [pc, #464]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a73      	ldr	r2, [pc, #460]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e029      	b.n	8002a38 <HAL_RCC_OscConfig+0x12c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80029ec:	d112      	bne.n	8002a14 <HAL_RCC_OscConfig+0x108>
 80029ee:	4b6e      	ldr	r3, [pc, #440]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6d      	ldr	r2, [pc, #436]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 80029f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	4b6b      	ldr	r3, [pc, #428]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a6a      	ldr	r2, [pc, #424]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b68      	ldr	r3, [pc, #416]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a67      	ldr	r2, [pc, #412]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e011      	b.n	8002a38 <HAL_RCC_OscConfig+0x12c>
 8002a14:	4b64      	ldr	r3, [pc, #400]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a63      	ldr	r2, [pc, #396]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a60      	ldr	r2, [pc, #384]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b5e      	ldr	r3, [pc, #376]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a5d      	ldr	r2, [pc, #372]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002a32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7ff f830 	bl	8001aa4 <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a48:	f7ff f82c 	bl	8001aa4 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e355      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a5a:	4b53      	ldr	r3, [pc, #332]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x13c>
 8002a66:	e014      	b.n	8002a92 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7ff f81c 	bl	8001aa4 <HAL_GetTick>
 8002a6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a70:	f7ff f818 	bl	8001aa4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e341      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a82:	4b49      	ldr	r3, [pc, #292]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x164>
 8002a8e:	e000      	b.n	8002a92 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 808c 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa0:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aa8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002aaa:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1ba>
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	2b18      	cmp	r3, #24
 8002aba:	d137      	bne.n	8002b2c <HAL_RCC_OscConfig+0x220>
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d132      	bne.n	8002b2c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac6:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x1d2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e313      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ade:	4b32      	ldr	r3, [pc, #200]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 0219 	bic.w	r2, r3, #25
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	492f      	ldr	r1, [pc, #188]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002af0:	f7fe ffd8 	bl	8001aa4 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af8:	f7fe ffd4 	bl	8001aa4 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e2fd      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b0a:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	061b      	lsls	r3, r3, #24
 8002b24:	4920      	ldr	r1, [pc, #128]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b2a:	e045      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d026      	beq.n	8002b82 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f023 0219 	bic.w	r2, r3, #25
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4919      	ldr	r1, [pc, #100]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe ffad 	bl	8001aa4 <HAL_GetTick>
 8002b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fe ffa9 	bl	8001aa4 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e2d2      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	061b      	lsls	r3, r3, #24
 8002b7a:	490b      	ldr	r1, [pc, #44]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
 8002b80:	e01a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <HAL_RCC_OscConfig+0x29c>)
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe ff89 	bl	8001aa4 <HAL_GetTick>
 8002b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b96:	f7fe ff85 	bl	8001aa4 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d903      	bls.n	8002bac <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e2ae      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
 8002ba8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bac:	4b99      	ldr	r3, [pc, #612]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ee      	bne.n	8002b96 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d06a      	beq.n	8002c9a <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc4:	4b93      	ldr	r3, [pc, #588]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bcc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bce:	4b91      	ldr	r3, [pc, #580]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d007      	beq.n	8002bea <HAL_RCC_OscConfig+0x2de>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b18      	cmp	r3, #24
 8002bde:	d11b      	bne.n	8002c18 <HAL_RCC_OscConfig+0x30c>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d116      	bne.n	8002c18 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bea:	4b8a      	ldr	r3, [pc, #552]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_RCC_OscConfig+0x2f6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2b80      	cmp	r3, #128	; 0x80
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e281      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c02:	4b84      	ldr	r3, [pc, #528]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	061b      	lsls	r3, r3, #24
 8002c10:	4980      	ldr	r1, [pc, #512]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c16:	e040      	b.n	8002c9a <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d023      	beq.n	8002c68 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c20:	4b7c      	ldr	r3, [pc, #496]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a7b      	ldr	r2, [pc, #492]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe ff3a 	bl	8001aa4 <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c34:	f7fe ff36 	bl	8001aa4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e25f      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c46:	4b73      	ldr	r3, [pc, #460]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c52:	4b70      	ldr	r3, [pc, #448]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	061b      	lsls	r3, r3, #24
 8002c60:	496c      	ldr	r1, [pc, #432]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60cb      	str	r3, [r1, #12]
 8002c66:	e018      	b.n	8002c9a <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c68:	4b6a      	ldr	r3, [pc, #424]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a69      	ldr	r2, [pc, #420]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe ff16 	bl	8001aa4 <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c7c:	f7fe ff12 	bl	8001aa4 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e23b      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c8e:	4b61      	ldr	r3, [pc, #388]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d036      	beq.n	8002d14 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d019      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cae:	4b59      	ldr	r3, [pc, #356]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb2:	4a58      	ldr	r2, [pc, #352]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cba:	f7fe fef3 	bl	8001aa4 <HAL_GetTick>
 8002cbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc2:	f7fe feef 	bl	8001aa4 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e218      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cd4:	4b4f      	ldr	r3, [pc, #316]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x3b6>
 8002ce0:	e018      	b.n	8002d14 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce2:	4b4c      	ldr	r3, [pc, #304]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce6:	4a4b      	ldr	r2, [pc, #300]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cee:	f7fe fed9 	bl	8001aa4 <HAL_GetTick>
 8002cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fed5 	bl	8001aa4 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e1fe      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d08:	4b42      	ldr	r3, [pc, #264]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d036      	beq.n	8002d8e <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d019      	beq.n	8002d5c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d28:	4b3a      	ldr	r3, [pc, #232]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a39      	ldr	r2, [pc, #228]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002d2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d34:	f7fe feb6 	bl	8001aa4 <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d3c:	f7fe feb2 	bl	8001aa4 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e1db      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d4e:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x430>
 8002d5a:	e018      	b.n	8002d8e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d5c:	4b2d      	ldr	r3, [pc, #180]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a2c      	ldr	r2, [pc, #176]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d68:	f7fe fe9c 	bl	8001aa4 <HAL_GetTick>
 8002d6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d70:	f7fe fe98 	bl	8001aa4 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e1c1      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d82:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80af 	beq.w	8002efa <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <HAL_RCC_OscConfig+0x50c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <HAL_RCC_OscConfig+0x50c>)
 8002da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002da8:	f7fe fe7c 	bl	8001aa4 <HAL_GetTick>
 8002dac:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002db0:	f7fe fe78 	bl	8001aa4 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e1a1      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_RCC_OscConfig+0x50c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4d8>
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6713      	str	r3, [r2, #112]	; 0x70
 8002de2:	e05b      	b.n	8002e9c <HAL_RCC_OscConfig+0x590>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d117      	bne.n	8002e1c <HAL_RCC_OscConfig+0x510>
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	6713      	str	r3, [r2, #112]	; 0x70
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	4a05      	ldr	r2, [pc, #20]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e02:	6713      	str	r3, [r2, #112]	; 0x70
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a02      	ldr	r2, [pc, #8]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002e0a:	f023 0304 	bic.w	r3, r3, #4
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	e044      	b.n	8002e9c <HAL_RCC_OscConfig+0x590>
 8002e12:	bf00      	nop
 8002e14:	58024400 	.word	0x58024400
 8002e18:	58024800 	.word	0x58024800
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	d112      	bne.n	8002e4a <HAL_RCC_OscConfig+0x53e>
 8002e24:	4b95      	ldr	r3, [pc, #596]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	4a94      	ldr	r2, [pc, #592]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e30:	4b92      	ldr	r3, [pc, #584]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	4a91      	ldr	r2, [pc, #580]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3c:	4b8f      	ldr	r3, [pc, #572]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a8e      	ldr	r2, [pc, #568]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
 8002e48:	e028      	b.n	8002e9c <HAL_RCC_OscConfig+0x590>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b85      	cmp	r3, #133	; 0x85
 8002e50:	d112      	bne.n	8002e78 <HAL_RCC_OscConfig+0x56c>
 8002e52:	4b8a      	ldr	r3, [pc, #552]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	4a89      	ldr	r2, [pc, #548]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5e:	4b87      	ldr	r3, [pc, #540]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	4a86      	ldr	r2, [pc, #536]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6a:	4b84      	ldr	r3, [pc, #528]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	4a83      	ldr	r2, [pc, #524]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6713      	str	r3, [r2, #112]	; 0x70
 8002e76:	e011      	b.n	8002e9c <HAL_RCC_OscConfig+0x590>
 8002e78:	4b80      	ldr	r3, [pc, #512]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	4a7f      	ldr	r2, [pc, #508]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	6713      	str	r3, [r2, #112]	; 0x70
 8002e84:	4b7d      	ldr	r3, [pc, #500]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a7c      	ldr	r2, [pc, #496]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e8a:	f023 0304 	bic.w	r3, r3, #4
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e90:	4b7a      	ldr	r3, [pc, #488]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a79      	ldr	r2, [pc, #484]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d015      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fdfe 	bl	8001aa4 <HAL_GetTick>
 8002ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eac:	f7fe fdfa 	bl	8001aa4 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e121      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ec2:	4b6e      	ldr	r3, [pc, #440]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0ee      	beq.n	8002eac <HAL_RCC_OscConfig+0x5a0>
 8002ece:	e014      	b.n	8002efa <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fde8 	bl	8001aa4 <HAL_GetTick>
 8002ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed8:	f7fe fde4 	bl	8001aa4 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e10b      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eee:	4b63      	ldr	r3, [pc, #396]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1ee      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8100 	beq.w	8003104 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f04:	4b5d      	ldr	r3, [pc, #372]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f0c:	2b18      	cmp	r3, #24
 8002f0e:	f000 80bb 	beq.w	8003088 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	f040 8095 	bne.w	8003046 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1c:	4b57      	ldr	r3, [pc, #348]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a56      	ldr	r2, [pc, #344]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fdbc 	bl	8001aa4 <HAL_GetTick>
 8002f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe fdb8 	bl	8001aa4 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e0e1      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f42:	4b4e      	ldr	r3, [pc, #312]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4e:	4b4b      	ldr	r3, [pc, #300]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f52:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <HAL_RCC_OscConfig+0x774>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	430a      	orrs	r2, r1
 8002f62:	4946      	ldr	r1, [pc, #280]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	628b      	str	r3, [r1, #40]	; 0x28
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f76:	3b01      	subs	r3, #1
 8002f78:	025b      	lsls	r3, r3, #9
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	3b01      	subs	r3, #1
 8002f84:	041b      	lsls	r3, r3, #16
 8002f86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	3b01      	subs	r3, #1
 8002f92:	061b      	lsls	r3, r3, #24
 8002f94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f98:	4938      	ldr	r1, [pc, #224]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f9e:	4b37      	ldr	r3, [pc, #220]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	4a36      	ldr	r2, [pc, #216]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002faa:	4b34      	ldr	r3, [pc, #208]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fae:	4b35      	ldr	r3, [pc, #212]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fb6:	00d2      	lsls	r2, r2, #3
 8002fb8:	4930      	ldr	r1, [pc, #192]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	f023 020c 	bic.w	r2, r3, #12
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	492c      	ldr	r1, [pc, #176]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fd0:	4b2a      	ldr	r3, [pc, #168]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	f023 0202 	bic.w	r2, r3, #2
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	4927      	ldr	r1, [pc, #156]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fe2:	4b26      	ldr	r3, [pc, #152]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	4a25      	ldr	r2, [pc, #148]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fee:	4b23      	ldr	r3, [pc, #140]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	4a22      	ldr	r2, [pc, #136]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ffa:	4b20      	ldr	r3, [pc, #128]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003006:	4b1d      	ldr	r3, [pc, #116]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	4a1c      	ldr	r2, [pc, #112]	; (800307c <HAL_RCC_OscConfig+0x770>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003012:	4b1a      	ldr	r3, [pc, #104]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a19      	ldr	r2, [pc, #100]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8003018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe fd41 	bl	8001aa4 <HAL_GetTick>
 8003022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe fd3d 	bl	8001aa4 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e066      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003038:	4b10      	ldr	r3, [pc, #64]	; (800307c <HAL_RCC_OscConfig+0x770>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x71a>
 8003044:	e05e      	b.n	8003104 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <HAL_RCC_OscConfig+0x770>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a0c      	ldr	r2, [pc, #48]	; (800307c <HAL_RCC_OscConfig+0x770>)
 800304c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fe fd27 	bl	8001aa4 <HAL_GetTick>
 8003056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305a:	f7fe fd23 	bl	8001aa4 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e04c      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_RCC_OscConfig+0x770>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f0      	bne.n	800305a <HAL_RCC_OscConfig+0x74e>
 8003078:	e044      	b.n	8003104 <HAL_RCC_OscConfig+0x7f8>
 800307a:	bf00      	nop
 800307c:	58024400 	.word	0x58024400
 8003080:	fffffc0c 	.word	0xfffffc0c
 8003084:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003088:	4b21      	ldr	r3, [pc, #132]	; (8003110 <HAL_RCC_OscConfig+0x804>)
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_RCC_OscConfig+0x804>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2b01      	cmp	r3, #1
 800309a:	d031      	beq.n	8003100 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f003 0203 	and.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d12a      	bne.n	8003100 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d122      	bne.n	8003100 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d11a      	bne.n	8003100 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	0a5b      	lsrs	r3, r3, #9
 80030ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d111      	bne.n	8003100 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	0c1b      	lsrs	r3, r3, #16
 80030e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d108      	bne.n	8003100 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	0e1b      	lsrs	r3, r3, #24
 80030f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3730      	adds	r7, #48	; 0x30
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	58024400 	.word	0x58024400

08003114 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e19c      	b.n	8003462 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003128:	4b8a      	ldr	r3, [pc, #552]	; (8003354 <HAL_RCC_ClockConfig+0x240>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d910      	bls.n	8003158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b87      	ldr	r3, [pc, #540]	; (8003354 <HAL_RCC_ClockConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 020f 	bic.w	r2, r3, #15
 800313e:	4985      	ldr	r1, [pc, #532]	; (8003354 <HAL_RCC_ClockConfig+0x240>)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b83      	ldr	r3, [pc, #524]	; (8003354 <HAL_RCC_ClockConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e184      	b.n	8003462 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d010      	beq.n	8003186 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	4b7b      	ldr	r3, [pc, #492]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003170:	429a      	cmp	r2, r3
 8003172:	d908      	bls.n	8003186 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003174:	4b78      	ldr	r3, [pc, #480]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	4975      	ldr	r1, [pc, #468]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 8003182:	4313      	orrs	r3, r2
 8003184:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d010      	beq.n	80031b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	4b70      	ldr	r3, [pc, #448]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800319e:	429a      	cmp	r2, r3
 80031a0:	d908      	bls.n	80031b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031a2:	4b6d      	ldr	r3, [pc, #436]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	496a      	ldr	r1, [pc, #424]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d010      	beq.n	80031e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	4b64      	ldr	r3, [pc, #400]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d908      	bls.n	80031e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031d0:	4b61      	ldr	r3, [pc, #388]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	495e      	ldr	r1, [pc, #376]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d010      	beq.n	8003210 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	4b59      	ldr	r3, [pc, #356]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d908      	bls.n	8003210 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031fe:	4b56      	ldr	r3, [pc, #344]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	4953      	ldr	r1, [pc, #332]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 800320c:	4313      	orrs	r3, r2
 800320e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	4b4d      	ldr	r3, [pc, #308]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	429a      	cmp	r2, r3
 800322a:	d908      	bls.n	800323e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322c:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f023 020f 	bic.w	r2, r3, #15
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4947      	ldr	r1, [pc, #284]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 800323a:	4313      	orrs	r3, r2
 800323c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d055      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800324a:	4b43      	ldr	r3, [pc, #268]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	4940      	ldr	r1, [pc, #256]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 8003258:	4313      	orrs	r3, r2
 800325a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d107      	bne.n	8003274 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003264:	4b3c      	ldr	r3, [pc, #240]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d121      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0f6      	b.n	8003462 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d107      	bne.n	800328c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800327c:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d115      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0ea      	b.n	8003462 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003294:	4b30      	ldr	r3, [pc, #192]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0de      	b.n	8003462 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032a4:	4b2c      	ldr	r3, [pc, #176]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0d6      	b.n	8003462 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032b4:	4b28      	ldr	r3, [pc, #160]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f023 0207 	bic.w	r2, r3, #7
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4925      	ldr	r1, [pc, #148]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c6:	f7fe fbed 	bl	8001aa4 <HAL_GetTick>
 80032ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032cc:	e00a      	b.n	80032e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ce:	f7fe fbe9 	bl	8001aa4 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e0be      	b.n	8003462 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e4:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d1eb      	bne.n	80032ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d010      	beq.n	8003324 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	429a      	cmp	r2, r3
 8003310:	d208      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f023 020f 	bic.w	r2, r3, #15
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	490e      	ldr	r1, [pc, #56]	; (8003358 <HAL_RCC_ClockConfig+0x244>)
 8003320:	4313      	orrs	r3, r2
 8003322:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_ClockConfig+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d214      	bcs.n	800335c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_RCC_ClockConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 020f 	bic.w	r2, r3, #15
 800333a:	4906      	ldr	r1, [pc, #24]	; (8003354 <HAL_RCC_ClockConfig+0x240>)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <HAL_RCC_ClockConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d005      	beq.n	800335c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e086      	b.n	8003462 <HAL_RCC_ClockConfig+0x34e>
 8003354:	52002000 	.word	0x52002000
 8003358:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d010      	beq.n	800338a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	4b3f      	ldr	r3, [pc, #252]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003374:	429a      	cmp	r2, r3
 8003376:	d208      	bcs.n	800338a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003378:	4b3c      	ldr	r3, [pc, #240]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	4939      	ldr	r1, [pc, #228]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 8003386:	4313      	orrs	r3, r2
 8003388:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d010      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d208      	bcs.n	80033b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033a6:	4b31      	ldr	r3, [pc, #196]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	492e      	ldr	r1, [pc, #184]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d010      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699a      	ldr	r2, [r3, #24]
 80033c8:	4b28      	ldr	r3, [pc, #160]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d208      	bcs.n	80033e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033d4:	4b25      	ldr	r3, [pc, #148]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	4922      	ldr	r1, [pc, #136]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d010      	beq.n	8003414 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69da      	ldr	r2, [r3, #28]
 80033f6:	4b1d      	ldr	r3, [pc, #116]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033fe:	429a      	cmp	r2, r3
 8003400:	d208      	bcs.n	8003414 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003402:	4b1a      	ldr	r3, [pc, #104]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4917      	ldr	r1, [pc, #92]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 8003410:	4313      	orrs	r3, r2
 8003412:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003414:	f000 f834 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	4b14      	ldr	r3, [pc, #80]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	0a1b      	lsrs	r3, r3, #8
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	4912      	ldr	r1, [pc, #72]	; (8003470 <HAL_RCC_ClockConfig+0x35c>)
 8003426:	5ccb      	ldrb	r3, [r1, r3]
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
 8003430:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <HAL_RCC_ClockConfig+0x358>)
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <HAL_RCC_ClockConfig+0x35c>)
 800343c:	5cd3      	ldrb	r3, [r2, r3]
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
 8003448:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <HAL_RCC_ClockConfig+0x360>)
 800344a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800344c:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <HAL_RCC_ClockConfig+0x364>)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <HAL_RCC_ClockConfig+0x368>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fada 	bl	8001a10 <HAL_InitTick>
 800345c:	4603      	mov	r3, r0
 800345e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003460:	7bfb      	ldrb	r3, [r7, #15]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	58024400 	.word	0x58024400
 8003470:	0800d378 	.word	0x0800d378
 8003474:	24000004 	.word	0x24000004
 8003478:	24000000 	.word	0x24000000
 800347c:	24000008 	.word	0x24000008

08003480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003486:	4bb3      	ldr	r3, [pc, #716]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800348e:	2b18      	cmp	r3, #24
 8003490:	f200 8155 	bhi.w	800373e <HAL_RCC_GetSysClockFreq+0x2be>
 8003494:	a201      	add	r2, pc, #4	; (adr r2, 800349c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	08003501 	.word	0x08003501
 80034a0:	0800373f 	.word	0x0800373f
 80034a4:	0800373f 	.word	0x0800373f
 80034a8:	0800373f 	.word	0x0800373f
 80034ac:	0800373f 	.word	0x0800373f
 80034b0:	0800373f 	.word	0x0800373f
 80034b4:	0800373f 	.word	0x0800373f
 80034b8:	0800373f 	.word	0x0800373f
 80034bc:	08003527 	.word	0x08003527
 80034c0:	0800373f 	.word	0x0800373f
 80034c4:	0800373f 	.word	0x0800373f
 80034c8:	0800373f 	.word	0x0800373f
 80034cc:	0800373f 	.word	0x0800373f
 80034d0:	0800373f 	.word	0x0800373f
 80034d4:	0800373f 	.word	0x0800373f
 80034d8:	0800373f 	.word	0x0800373f
 80034dc:	0800352d 	.word	0x0800352d
 80034e0:	0800373f 	.word	0x0800373f
 80034e4:	0800373f 	.word	0x0800373f
 80034e8:	0800373f 	.word	0x0800373f
 80034ec:	0800373f 	.word	0x0800373f
 80034f0:	0800373f 	.word	0x0800373f
 80034f4:	0800373f 	.word	0x0800373f
 80034f8:	0800373f 	.word	0x0800373f
 80034fc:	08003533 	.word	0x08003533
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003500:	4b94      	ldr	r3, [pc, #592]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d009      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800350c:	4b91      	ldr	r3, [pc, #580]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	08db      	lsrs	r3, r3, #3
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	4a90      	ldr	r2, [pc, #576]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
 800351c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800351e:	e111      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003520:	4b8d      	ldr	r3, [pc, #564]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003522:	61bb      	str	r3, [r7, #24]
    break;
 8003524:	e10e      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003526:	4b8d      	ldr	r3, [pc, #564]	; (800375c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003528:	61bb      	str	r3, [r7, #24]
    break;
 800352a:	e10b      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800352c:	4b8c      	ldr	r3, [pc, #560]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800352e:	61bb      	str	r3, [r7, #24]
    break;
 8003530:	e108      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003532:	4b88      	ldr	r3, [pc, #544]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800353c:	4b85      	ldr	r3, [pc, #532]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003546:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003548:	4b82      	ldr	r3, [pc, #520]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003552:	4b80      	ldr	r3, [pc, #512]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	08db      	lsrs	r3, r3, #3
 8003558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80e1 	beq.w	8003738 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b02      	cmp	r3, #2
 800357a:	f000 8083 	beq.w	8003684 <HAL_RCC_GetSysClockFreq+0x204>
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b02      	cmp	r3, #2
 8003582:	f200 80a1 	bhi.w	80036c8 <HAL_RCC_GetSysClockFreq+0x248>
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x114>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d056      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003592:	e099      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003594:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d02d      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035a0:	4b6c      	ldr	r3, [pc, #432]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	08db      	lsrs	r3, r3, #3
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	4a6b      	ldr	r2, [pc, #428]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
 80035b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	ee07 3a90 	vmov	s15, r3
 80035b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ca:	4b62      	ldr	r3, [pc, #392]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035da:	ed97 6a02 	vldr	s12, [r7, #8]
 80035de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003764 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80035fa:	e087      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003768 <HAL_RCC_GetSysClockFreq+0x2e8>
 800360a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360e:	4b51      	ldr	r3, [pc, #324]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003622:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003764 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800362a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800362e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800363e:	e065      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800376c <HAL_RCC_GetSysClockFreq+0x2ec>
 800364e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003652:	4b40      	ldr	r3, [pc, #256]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003662:	ed97 6a02 	vldr	s12, [r7, #8]
 8003666:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003764 <HAL_RCC_GetSysClockFreq+0x2e4>
 800366a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800366e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800367a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003682:	e043      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003696:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003764 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036c6:	e021      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800376c <HAL_RCC_GetSysClockFreq+0x2ec>
 80036d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036da:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003764 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800370a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	0a5b      	lsrs	r3, r3, #9
 8003712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003716:	3301      	adds	r3, #1
 8003718:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	ee07 3a90 	vmov	s15, r3
 8003720:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003724:	edd7 6a07 	vldr	s13, [r7, #28]
 8003728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800372c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003730:	ee17 3a90 	vmov	r3, s15
 8003734:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003736:	e005      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	61bb      	str	r3, [r7, #24]
    break;
 800373c:	e002      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003740:	61bb      	str	r3, [r7, #24]
    break;
 8003742:	bf00      	nop
  }

  return sysclockfreq;
 8003744:	69bb      	ldr	r3, [r7, #24]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3724      	adds	r7, #36	; 0x24
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	58024400 	.word	0x58024400
 8003758:	03d09000 	.word	0x03d09000
 800375c:	003d0900 	.word	0x003d0900
 8003760:	007a1200 	.word	0x007a1200
 8003764:	46000000 	.word	0x46000000
 8003768:	4c742400 	.word	0x4c742400
 800376c:	4a742400 	.word	0x4a742400
 8003770:	4af42400 	.word	0x4af42400

08003774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800377a:	f7ff fe81 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 800377e:	4602      	mov	r2, r0
 8003780:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	490f      	ldr	r1, [pc, #60]	; (80037c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800378c:	5ccb      	ldrb	r3, [r1, r3]
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	fa22 f303 	lsr.w	r3, r2, r3
 8003796:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80037a2:	5cd3      	ldrb	r3, [r2, r3]
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	fa22 f303 	lsr.w	r3, r2, r3
 80037ae:	4a07      	ldr	r2, [pc, #28]	; (80037cc <HAL_RCC_GetHCLKFreq+0x58>)
 80037b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037b2:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <HAL_RCC_GetHCLKFreq+0x58>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	58024400 	.word	0x58024400
 80037c8:	0800d378 	.word	0x0800d378
 80037cc:	24000004 	.word	0x24000004
 80037d0:	24000000 	.word	0x24000000

080037d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80037d8:	f7ff ffcc 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037dc:	4602      	mov	r2, r0
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	091b      	lsrs	r3, r3, #4
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4904      	ldr	r1, [pc, #16]	; (80037fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ea:	5ccb      	ldrb	r3, [r1, r3]
 80037ec:	f003 031f 	and.w	r3, r3, #31
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	58024400 	.word	0x58024400
 80037fc:	0800d378 	.word	0x0800d378

08003800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003804:	f7ff ffb6 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003808:	4602      	mov	r2, r0
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	4904      	ldr	r1, [pc, #16]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003816:	5ccb      	ldrb	r3, [r1, r3]
 8003818:	f003 031f 	and.w	r3, r3, #31
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003820:	4618      	mov	r0, r3
 8003822:	bd80      	pop	{r7, pc}
 8003824:	58024400 	.word	0x58024400
 8003828:	0800d378 	.word	0x0800d378

0800382c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003834:	2300      	movs	r3, #0
 8003836:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003838:	2300      	movs	r3, #0
 800383a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d03f      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800384c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003850:	d02a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003852:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003856:	d824      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003858:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800385c:	d018      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800385e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003862:	d81e      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386c:	d007      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800386e:	e018      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003870:	4ba6      	ldr	r3, [pc, #664]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	4aa5      	ldr	r2, [pc, #660]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800387c:	e015      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	2102      	movs	r1, #2
 8003884:	4618      	mov	r0, r3
 8003886:	f001 ff17 	bl	80056b8 <RCCEx_PLL2_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800388e:	e00c      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3324      	adds	r3, #36	; 0x24
 8003894:	2102      	movs	r1, #2
 8003896:	4618      	mov	r0, r3
 8003898:	f001 ffc0 	bl	800581c <RCCEx_PLL3_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038a0:	e003      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
      break;
 80038a6:	e000      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038b0:	4b96      	ldr	r3, [pc, #600]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038bc:	4993      	ldr	r1, [pc, #588]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	650b      	str	r3, [r1, #80]	; 0x50
 80038c2:	e001      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
 80038c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d03d      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d826      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038dc:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	080038f9 	.word	0x080038f9
 80038e8:	08003907 	.word	0x08003907
 80038ec:	08003919 	.word	0x08003919
 80038f0:	08003931 	.word	0x08003931
 80038f4:	08003931 	.word	0x08003931
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f8:	4b84      	ldr	r3, [pc, #528]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4a83      	ldr	r2, [pc, #524]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003904:	e015      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f001 fed3 	bl	80056b8 <RCCEx_PLL2_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003916:	e00c      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3324      	adds	r3, #36	; 0x24
 800391c:	2100      	movs	r1, #0
 800391e:	4618      	mov	r0, r3
 8003920:	f001 ff7c 	bl	800581c <RCCEx_PLL3_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003928:	e003      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	75fb      	strb	r3, [r7, #23]
      break;
 800392e:	e000      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003930:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003932:	7dfb      	ldrb	r3, [r7, #23]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d109      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003938:	4b74      	ldr	r3, [pc, #464]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800393a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393c:	f023 0207 	bic.w	r2, r3, #7
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	4971      	ldr	r1, [pc, #452]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003946:	4313      	orrs	r3, r2
 8003948:	650b      	str	r3, [r1, #80]	; 0x50
 800394a:	e001      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003958:	2b00      	cmp	r3, #0
 800395a:	d04a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003964:	d031      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003966:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800396a:	d82b      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800396c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003970:	d02d      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003976:	d825      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003978:	2bc0      	cmp	r3, #192	; 0xc0
 800397a:	d02a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800397c:	2bc0      	cmp	r3, #192	; 0xc0
 800397e:	d821      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d016      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003984:	2b80      	cmp	r3, #128	; 0x80
 8003986:	d81d      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800398c:	2b40      	cmp	r3, #64	; 0x40
 800398e:	d007      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003990:	e018      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003992:	4b5e      	ldr	r3, [pc, #376]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	4a5d      	ldr	r2, [pc, #372]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800399e:	e019      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 fe86 	bl	80056b8 <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80039b0:	e010      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3324      	adds	r3, #36	; 0x24
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 ff2f 	bl	800581c <RCCEx_PLL3_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80039c2:	e007      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	75fb      	strb	r3, [r7, #23]
      break;
 80039c8:	e004      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80039ca:	bf00      	nop
 80039cc:	e002      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80039ce:	bf00      	nop
 80039d0:	e000      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80039d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80039da:	4b4c      	ldr	r3, [pc, #304]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	4949      	ldr	r1, [pc, #292]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	650b      	str	r3, [r1, #80]	; 0x50
 80039ec:	e001      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
 80039f0:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d04f      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a06:	d036      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003a08:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a0c:	d830      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a12:	d032      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a18:	d82a      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a1a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a1e:	d02e      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003a20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a24:	d824      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2a:	d018      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a30:	d81e      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3a:	d007      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003a3c:	e018      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a3e:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	4a32      	ldr	r2, [pc, #200]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003a4a:	e019      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 fe30 	bl	80056b8 <RCCEx_PLL2_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003a5c:	e010      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3324      	adds	r3, #36	; 0x24
 8003a62:	2100      	movs	r1, #0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 fed9 	bl	800581c <RCCEx_PLL3_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003a6e:	e007      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	75fb      	strb	r3, [r7, #23]
      break;
 8003a74:	e004      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003a86:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8a:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	491e      	ldr	r1, [pc, #120]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	650b      	str	r3, [r1, #80]	; 0x50
 8003a98:	e001      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
 8003a9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d034      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aae:	2b30      	cmp	r3, #48	; 0x30
 8003ab0:	d01c      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003ab2:	2b30      	cmp	r3, #48	; 0x30
 8003ab4:	d817      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d00c      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d813      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d016      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d10f      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003ad2:	e00e      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	2102      	movs	r1, #2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f001 fdec 	bl	80056b8 <RCCEx_PLL2_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003ae4:	e005      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8003aea:	e002      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003aec:	bf00      	nop
 8003aee:	e000      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003af0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b04:	4901      	ldr	r1, [pc, #4]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b0a:	e003      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003b0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d047      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b28:	d030      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b2e:	d82a      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b34:	d02c      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003b36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b3a:	d824      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b40:	d018      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b46:	d81e      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b50:	d007      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003b52:	e018      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b54:	4bb0      	ldr	r3, [pc, #704]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	4aaf      	ldr	r2, [pc, #700]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b60:	e017      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fda5 	bl	80056b8 <RCCEx_PLL2_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b72:	e00e      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3324      	adds	r3, #36	; 0x24
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f001 fe4e 	bl	800581c <RCCEx_PLL3_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b84:	e005      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
      break;
 8003b8a:	e002      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003b8c:	bf00      	nop
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b98:	4b9f      	ldr	r3, [pc, #636]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba4:	499c      	ldr	r1, [pc, #624]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	650b      	str	r3, [r1, #80]	; 0x50
 8003baa:	e001      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d049      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bc4:	d02e      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003bc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bca:	d828      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003bcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bd0:	d02a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003bd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bd6:	d822      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003bd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bdc:	d026      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003bde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003be2:	d81c      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003be8:	d010      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bee:	d816      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01d      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d111      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	2101      	movs	r1, #1
 8003c00:	4618      	mov	r0, r3
 8003c02:	f001 fd59 	bl	80056b8 <RCCEx_PLL2_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c0a:	e012      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3324      	adds	r3, #36	; 0x24
 8003c10:	2101      	movs	r1, #1
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 fe02 	bl	800581c <RCCEx_PLL3_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c1c:	e009      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
      break;
 8003c22:	e006      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c24:	bf00      	nop
 8003c26:	e004      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c28:	bf00      	nop
 8003c2a:	e002      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c2c:	bf00      	nop
 8003c2e:	e000      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c38:	4b77      	ldr	r3, [pc, #476]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c44:	4974      	ldr	r1, [pc, #464]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	650b      	str	r3, [r1, #80]	; 0x50
 8003c4a:	e001      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d053      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c62:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003c66:	d034      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003c68:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003c6c:	d82e      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c72:	d030      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c78:	d828      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7e:	d02c      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c84:	d822      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003c86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c8a:	d028      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003c8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c90:	d81c      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c96:	d010      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c9c:	d816      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01f      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca6:	d111      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	2101      	movs	r1, #1
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f001 fd02 	bl	80056b8 <RCCEx_PLL2_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cb8:	e014      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3324      	adds	r3, #36	; 0x24
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 fdab 	bl	800581c <RCCEx_PLL3_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cca:	e00b      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003cd2:	bf00      	nop
 8003cd4:	e006      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003cd6:	bf00      	nop
 8003cd8:	e004      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003cea:	4b4b      	ldr	r3, [pc, #300]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cf8:	4947      	ldr	r1, [pc, #284]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	658b      	str	r3, [r1, #88]	; 0x58
 8003cfe:	e001      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
 8003d02:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d02f      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d18:	d00e      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d1e:	d814      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d015      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003d24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d28:	d10f      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d2a:	4b3b      	ldr	r3, [pc, #236]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	4a3a      	ldr	r2, [pc, #232]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d36:	e00c      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 fcba 	bl	80056b8 <RCCEx_PLL2_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d48:	e003      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4e:	e000      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d58:	4b2f      	ldr	r3, [pc, #188]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d64:	492c      	ldr	r1, [pc, #176]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	650b      	str	r3, [r1, #80]	; 0x50
 8003d6a:	e001      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d032      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d81b      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x590>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dc3 	.word	0x08003dc3
 8003d90:	08003d9d 	.word	0x08003d9d
 8003d94:	08003dab 	.word	0x08003dab
 8003d98:	08003dc3 	.word	0x08003dc3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	4a1d      	ldr	r2, [pc, #116]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003da8:	e00c      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2102      	movs	r1, #2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 fc81 	bl	80056b8 <RCCEx_PLL2_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dba:	e003      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8003dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003dca:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	f023 0203 	bic.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	4910      	ldr	r1, [pc, #64]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ddc:	e001      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 808a 	beq.w	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dfc:	f7fd fe52 	bl	8001aa4 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e02:	e00d      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e04:	f7fd fe4e 	bl	8001aa4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d906      	bls.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	75fb      	strb	r3, [r7, #23]
        break;
 8003e16:	e009      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003e18:	58024400 	.word	0x58024400
 8003e1c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e20:	4bba      	ldr	r3, [pc, #744]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0eb      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d166      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e32:	4bb7      	ldr	r3, [pc, #732]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e3c:	4053      	eors	r3, r2
 8003e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d013      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e46:	4bb2      	ldr	r3, [pc, #712]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e50:	4baf      	ldr	r3, [pc, #700]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4aae      	ldr	r2, [pc, #696]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5c:	4bac      	ldr	r3, [pc, #688]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	4aab      	ldr	r2, [pc, #684]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e66:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e68:	4aa9      	ldr	r2, [pc, #676]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e78:	d115      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fd fe13 	bl	8001aa4 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e80:	e00b      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fd fe0f 	bl	8001aa4 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d902      	bls.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	75fb      	strb	r3, [r7, #23]
            break;
 8003e98:	e005      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e9a:	4b9d      	ldr	r3, [pc, #628]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0ed      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d126      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eba:	d10d      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003ebc:	4b94      	ldr	r3, [pc, #592]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eca:	0919      	lsrs	r1, r3, #4
 8003ecc:	4b91      	ldr	r3, [pc, #580]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003ece:	400b      	ands	r3, r1
 8003ed0:	498f      	ldr	r1, [pc, #572]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	610b      	str	r3, [r1, #16]
 8003ed6:	e005      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003ed8:	4b8d      	ldr	r3, [pc, #564]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	4a8c      	ldr	r2, [pc, #560]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ede:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ee2:	6113      	str	r3, [r2, #16]
 8003ee4:	4b8a      	ldr	r3, [pc, #552]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ee6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef2:	4987      	ldr	r1, [pc, #540]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	670b      	str	r3, [r1, #112]	; 0x70
 8003ef8:	e004      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
 8003efc:	75bb      	strb	r3, [r7, #22]
 8003efe:	e001      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d07f      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f16:	2b28      	cmp	r3, #40	; 0x28
 8003f18:	d866      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003f1a:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f20:	08003fef 	.word	0x08003fef
 8003f24:	08003fe9 	.word	0x08003fe9
 8003f28:	08003fe9 	.word	0x08003fe9
 8003f2c:	08003fe9 	.word	0x08003fe9
 8003f30:	08003fe9 	.word	0x08003fe9
 8003f34:	08003fe9 	.word	0x08003fe9
 8003f38:	08003fe9 	.word	0x08003fe9
 8003f3c:	08003fe9 	.word	0x08003fe9
 8003f40:	08003fc5 	.word	0x08003fc5
 8003f44:	08003fe9 	.word	0x08003fe9
 8003f48:	08003fe9 	.word	0x08003fe9
 8003f4c:	08003fe9 	.word	0x08003fe9
 8003f50:	08003fe9 	.word	0x08003fe9
 8003f54:	08003fe9 	.word	0x08003fe9
 8003f58:	08003fe9 	.word	0x08003fe9
 8003f5c:	08003fe9 	.word	0x08003fe9
 8003f60:	08003fd7 	.word	0x08003fd7
 8003f64:	08003fe9 	.word	0x08003fe9
 8003f68:	08003fe9 	.word	0x08003fe9
 8003f6c:	08003fe9 	.word	0x08003fe9
 8003f70:	08003fe9 	.word	0x08003fe9
 8003f74:	08003fe9 	.word	0x08003fe9
 8003f78:	08003fe9 	.word	0x08003fe9
 8003f7c:	08003fe9 	.word	0x08003fe9
 8003f80:	08003fef 	.word	0x08003fef
 8003f84:	08003fe9 	.word	0x08003fe9
 8003f88:	08003fe9 	.word	0x08003fe9
 8003f8c:	08003fe9 	.word	0x08003fe9
 8003f90:	08003fe9 	.word	0x08003fe9
 8003f94:	08003fe9 	.word	0x08003fe9
 8003f98:	08003fe9 	.word	0x08003fe9
 8003f9c:	08003fe9 	.word	0x08003fe9
 8003fa0:	08003fef 	.word	0x08003fef
 8003fa4:	08003fe9 	.word	0x08003fe9
 8003fa8:	08003fe9 	.word	0x08003fe9
 8003fac:	08003fe9 	.word	0x08003fe9
 8003fb0:	08003fe9 	.word	0x08003fe9
 8003fb4:	08003fe9 	.word	0x08003fe9
 8003fb8:	08003fe9 	.word	0x08003fe9
 8003fbc:	08003fe9 	.word	0x08003fe9
 8003fc0:	08003fef 	.word	0x08003fef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 fb74 	bl	80056b8 <RCCEx_PLL2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fd4:	e00c      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3324      	adds	r3, #36	; 0x24
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f001 fc1d 	bl	800581c <RCCEx_PLL3_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fe6:	e003      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
      break;
 8003fec:	e000      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ff6:	4b46      	ldr	r3, [pc, #280]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004004:	4942      	ldr	r1, [pc, #264]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	654b      	str	r3, [r1, #84]	; 0x54
 800400a:	e001      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d038      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004020:	2b05      	cmp	r3, #5
 8004022:	d821      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004024:	a201      	add	r2, pc, #4	; (adr r2, 800402c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	0800406f 	.word	0x0800406f
 8004030:	08004045 	.word	0x08004045
 8004034:	08004057 	.word	0x08004057
 8004038:	0800406f 	.word	0x0800406f
 800403c:	0800406f 	.word	0x0800406f
 8004040:	0800406f 	.word	0x0800406f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	2101      	movs	r1, #1
 800404a:	4618      	mov	r0, r3
 800404c:	f001 fb34 	bl	80056b8 <RCCEx_PLL2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004054:	e00c      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3324      	adds	r3, #36	; 0x24
 800405a:	2101      	movs	r1, #1
 800405c:	4618      	mov	r0, r3
 800405e:	f001 fbdd 	bl	800581c <RCCEx_PLL3_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004066:	e003      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	75fb      	strb	r3, [r7, #23]
      break;
 800406c:	e000      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800406e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004076:	4b26      	ldr	r3, [pc, #152]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	f023 0207 	bic.w	r2, r3, #7
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004082:	4923      	ldr	r1, [pc, #140]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004084:	4313      	orrs	r3, r2
 8004086:	654b      	str	r3, [r1, #84]	; 0x54
 8004088:	e001      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408a:	7dfb      	ldrb	r3, [r7, #23]
 800408c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d040      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040a0:	2b05      	cmp	r3, #5
 80040a2:	d821      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80040a4:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040ef 	.word	0x080040ef
 80040b0:	080040c5 	.word	0x080040c5
 80040b4:	080040d7 	.word	0x080040d7
 80040b8:	080040ef 	.word	0x080040ef
 80040bc:	080040ef 	.word	0x080040ef
 80040c0:	080040ef 	.word	0x080040ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 faf4 	bl	80056b8 <RCCEx_PLL2_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040d4:	e00c      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3324      	adds	r3, #36	; 0x24
 80040da:	2101      	movs	r1, #1
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 fb9d 	bl	800581c <RCCEx_PLL3_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040e6:	e003      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	75fb      	strb	r3, [r7, #23]
      break;
 80040ec:	e000      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80040ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d110      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040f6:	4b06      	ldr	r3, [pc, #24]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	f023 0207 	bic.w	r2, r3, #7
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004104:	4902      	ldr	r1, [pc, #8]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004106:	4313      	orrs	r3, r2
 8004108:	658b      	str	r3, [r1, #88]	; 0x58
 800410a:	e007      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800410c:	58024800 	.word	0x58024800
 8004110:	58024400 	.word	0x58024400
 8004114:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d04b      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004132:	d02e      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004138:	d828      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413e:	d02a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004144:	d822      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800414a:	d026      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800414c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004150:	d81c      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004156:	d010      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800415c:	d816      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d01d      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004166:	d111      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f001 faa2 	bl	80056b8 <RCCEx_PLL2_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004178:	e012      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3324      	adds	r3, #36	; 0x24
 800417e:	2102      	movs	r1, #2
 8004180:	4618      	mov	r0, r3
 8004182:	f001 fb4b 	bl	800581c <RCCEx_PLL3_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800418a:	e009      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	75fb      	strb	r3, [r7, #23]
      break;
 8004190:	e006      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004192:	bf00      	nop
 8004194:	e004      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800419e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041a6:	4bb3      	ldr	r3, [pc, #716]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b4:	49af      	ldr	r1, [pc, #700]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	654b      	str	r3, [r1, #84]	; 0x54
 80041ba:	e001      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d04b      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041d6:	d02e      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80041d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041dc:	d828      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e2:	d02a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e8:	d822      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80041ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041ee:	d026      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80041f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041f4:	d81c      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80041f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041fa:	d010      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80041fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004200:	d816      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d01d      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420a:	d111      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f001 fa50 	bl	80056b8 <RCCEx_PLL2_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800421c:	e012      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3324      	adds	r3, #36	; 0x24
 8004222:	2102      	movs	r1, #2
 8004224:	4618      	mov	r0, r3
 8004226:	f001 faf9 	bl	800581c <RCCEx_PLL3_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800422e:	e009      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	75fb      	strb	r3, [r7, #23]
      break;
 8004234:	e006      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004236:	bf00      	nop
 8004238:	e004      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800423a:	bf00      	nop
 800423c:	e002      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800423e:	bf00      	nop
 8004240:	e000      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004244:	7dfb      	ldrb	r3, [r7, #23]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800424a:	4b8a      	ldr	r3, [pc, #552]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004258:	4986      	ldr	r1, [pc, #536]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800425a:	4313      	orrs	r3, r2
 800425c:	658b      	str	r3, [r1, #88]	; 0x58
 800425e:	e001      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d04b      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004276:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800427a:	d02e      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800427c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004280:	d828      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004286:	d02a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428c:	d822      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800428e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004292:	d026      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004294:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004298:	d81c      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800429a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800429e:	d010      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80042a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a4:	d816      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d01d      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80042aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ae:	d111      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	2100      	movs	r1, #0
 80042b6:	4618      	mov	r0, r3
 80042b8:	f001 f9fe 	bl	80056b8 <RCCEx_PLL2_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042c0:	e012      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3324      	adds	r3, #36	; 0x24
 80042c6:	2102      	movs	r1, #2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 faa7 	bl	800581c <RCCEx_PLL3_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042d2:	e009      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	75fb      	strb	r3, [r7, #23]
      break;
 80042d8:	e006      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80042da:	bf00      	nop
 80042dc:	e004      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80042de:	bf00      	nop
 80042e0:	e002      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80042e2:	bf00      	nop
 80042e4:	e000      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80042e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042ee:	4b61      	ldr	r3, [pc, #388]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80042f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042fc:	495d      	ldr	r1, [pc, #372]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	658b      	str	r3, [r1, #88]	; 0x58
 8004302:	e001      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004304:	7dfb      	ldrb	r3, [r7, #23]
 8004306:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01a      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431e:	d10a      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3324      	adds	r3, #36	; 0x24
 8004324:	2102      	movs	r1, #2
 8004326:	4618      	mov	r0, r3
 8004328:	f001 fa78 	bl	800581c <RCCEx_PLL3_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004336:	4b4f      	ldr	r3, [pc, #316]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	494b      	ldr	r1, [pc, #300]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004346:	4313      	orrs	r3, r2
 8004348:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800435c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004360:	d10a      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3324      	adds	r3, #36	; 0x24
 8004366:	2102      	movs	r1, #2
 8004368:	4618      	mov	r0, r3
 800436a:	f001 fa57 	bl	800581c <RCCEx_PLL3_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004378:	4b3e      	ldr	r3, [pc, #248]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004386:	493b      	ldr	r1, [pc, #236]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004388:	4313      	orrs	r3, r2
 800438a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d034      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800439e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043a2:	d01d      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80043a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043a8:	d817      	bhi.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80043ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b2:	d009      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80043b4:	e011      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3304      	adds	r3, #4
 80043ba:	2100      	movs	r1, #0
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 f97b 	bl	80056b8 <RCCEx_PLL2_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043c6:	e00c      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3324      	adds	r3, #36	; 0x24
 80043cc:	2102      	movs	r1, #2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 fa24 	bl	800581c <RCCEx_PLL3_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043d8:	e003      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	75fb      	strb	r3, [r7, #23]
      break;
 80043de:	e000      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80043e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043e8:	4b22      	ldr	r3, [pc, #136]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043f6:	491f      	ldr	r1, [pc, #124]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	658b      	str	r3, [r1, #88]	; 0x58
 80043fc:	e001      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d036      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004414:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004418:	d01c      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800441a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800441e:	d816      	bhi.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004424:	d003      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800442a:	d007      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800442c:	e00f      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442e:	4b11      	ldr	r3, [pc, #68]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	4a10      	ldr	r2, [pc, #64]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004438:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800443a:	e00c      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3324      	adds	r3, #36	; 0x24
 8004440:	2101      	movs	r1, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f001 f9ea 	bl	800581c <RCCEx_PLL3_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800444c:	e003      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	75fb      	strb	r3, [r7, #23]
      break;
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004456:	7dfb      	ldrb	r3, [r7, #23]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10d      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800446a:	4902      	ldr	r1, [pc, #8]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800446c:	4313      	orrs	r3, r2
 800446e:	654b      	str	r3, [r1, #84]	; 0x54
 8004470:	e004      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004472:	bf00      	nop
 8004474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d029      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004494:	d007      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004496:	e00f      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004498:	4b69      	ldr	r3, [pc, #420]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	4a68      	ldr	r2, [pc, #416]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800449e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044a4:	e00b      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3304      	adds	r3, #4
 80044aa:	2102      	movs	r1, #2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 f903 	bl	80056b8 <RCCEx_PLL2_Config>
 80044b2:	4603      	mov	r3, r0
 80044b4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044b6:	e002      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75fb      	strb	r3, [r7, #23]
      break;
 80044bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044be:	7dfb      	ldrb	r3, [r7, #23]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d109      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044c4:	4b5e      	ldr	r3, [pc, #376]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d0:	495b      	ldr	r1, [pc, #364]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044d6:	e001      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3324      	adds	r3, #36	; 0x24
 80044ec:	2102      	movs	r1, #2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f994 	bl	800581c <RCCEx_PLL3_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d032      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004514:	d017      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800451a:	d811      	bhi.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800451c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004520:	d013      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8004522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004526:	d80b      	bhi.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d010      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800452c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004530:	d106      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004532:	4b43      	ldr	r3, [pc, #268]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004536:	4a42      	ldr	r2, [pc, #264]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800453c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800453e:	e007      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	75fb      	strb	r3, [r7, #23]
      break;
 8004544:	e004      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004546:	bf00      	nop
 8004548:	e002      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800454e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004556:	4b3a      	ldr	r3, [pc, #232]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004564:	4936      	ldr	r1, [pc, #216]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004566:	4313      	orrs	r3, r2
 8004568:	654b      	str	r3, [r1, #84]	; 0x54
 800456a:	e001      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800457c:	4b30      	ldr	r3, [pc, #192]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800457e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004580:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004588:	492d      	ldr	r1, [pc, #180]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800458a:	4313      	orrs	r3, r2
 800458c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800459a:	4b29      	ldr	r3, [pc, #164]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800459c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a6:	4926      	ldr	r1, [pc, #152]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80045b8:	4b21      	ldr	r3, [pc, #132]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	491e      	ldr	r1, [pc, #120]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045d6:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	4a19      	ldr	r2, [pc, #100]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045e0:	6113      	str	r3, [r2, #16]
 80045e2:	4b17      	ldr	r3, [pc, #92]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045ec:	4914      	ldr	r1, [pc, #80]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	da08      	bge.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045fa:	4b11      	ldr	r3, [pc, #68]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004606:	490e      	ldr	r1, [pc, #56]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004608:	4313      	orrs	r3, r2
 800460a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	4906      	ldr	r1, [pc, #24]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004628:	4313      	orrs	r3, r2
 800462a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800462c:	7dbb      	ldrb	r3, [r7, #22]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e000      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	58024400 	.word	0x58024400

08004644 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b090      	sub	sp, #64	; 0x40
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004652:	f040 8089 	bne.w	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004656:	4ba8      	ldr	r3, [pc, #672]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	633b      	str	r3, [r7, #48]	; 0x30
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	2b04      	cmp	r3, #4
 8004664:	d87d      	bhi.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004666:	a201      	add	r2, pc, #4	; (adr r2, 800466c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466c:	08004681 	.word	0x08004681
 8004670:	080046a5 	.word	0x080046a5
 8004674:	080046c9 	.word	0x080046c9
 8004678:	0800475d 	.word	0x0800475d
 800467c:	080046ed 	.word	0x080046ed

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004680:	4b9d      	ldr	r3, [pc, #628]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800468c:	d107      	bne.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800468e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004692:	4618      	mov	r0, r3
 8004694:	f000 febe 	bl	8005414 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800469c:	e3f5      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046a2:	e3f2      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80046a4:	4b94      	ldr	r3, [pc, #592]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046b0:	d107      	bne.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046b2:	f107 0318 	add.w	r3, r7, #24
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fc04 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046c0:	e3e3      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046c6:	e3e0      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046c8:	4b8b      	ldr	r3, [pc, #556]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046d4:	d107      	bne.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046d6:	f107 030c 	add.w	r3, r7, #12
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fd46 	bl	800516c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046e4:	e3d1      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046ea:	e3ce      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80046ec:	4b82      	ldr	r3, [pc, #520]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046f4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80046f6:	4b80      	ldr	r3, [pc, #512]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d10c      	bne.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	2b00      	cmp	r3, #0
 8004706:	d109      	bne.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004708:	4b7b      	ldr	r3, [pc, #492]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	08db      	lsrs	r3, r3, #3
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	4a7a      	ldr	r2, [pc, #488]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
 8004718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800471a:	e01e      	b.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800471c:	4b76      	ldr	r3, [pc, #472]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004728:	d106      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800472a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004730:	d102      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004732:	4b73      	ldr	r3, [pc, #460]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004736:	e010      	b.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004738:	4b6f      	ldr	r3, [pc, #444]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004744:	d106      	bne.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800474c:	d102      	bne.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800474e:	4b6d      	ldr	r3, [pc, #436]	; (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004752:	e002      	b.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004758:	e397      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800475a:	e396      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800475c:	4b6a      	ldr	r3, [pc, #424]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800475e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004760:	e393      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004766:	e390      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800476e:	f040 8095 	bne.w	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8004772:	4b61      	ldr	r3, [pc, #388]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800477a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004782:	d04d      	beq.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478a:	f200 8084 	bhi.w	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	2bc0      	cmp	r3, #192	; 0xc0
 8004792:	d07d      	beq.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	2bc0      	cmp	r3, #192	; 0xc0
 8004798:	d87d      	bhi.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	2b80      	cmp	r3, #128	; 0x80
 800479e:	d02d      	beq.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	2b80      	cmp	r3, #128	; 0x80
 80047a4:	d877      	bhi.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d012      	beq.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80047b2:	e070      	b.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047b4:	4b50      	ldr	r3, [pc, #320]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047c0:	d107      	bne.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fe24 	bl	8005414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047d0:	e35b      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047d6:	e358      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047d8:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e4:	d107      	bne.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047e6:	f107 0318 	add.w	r3, r7, #24
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fb6a 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047f4:	e349      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047fa:	e346      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047fc:	4b3e      	ldr	r3, [pc, #248]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004808:	d107      	bne.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800480a:	f107 030c 	add.w	r3, r7, #12
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fcac 	bl	800516c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004818:	e337      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800481e:	e334      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004820:	4b35      	ldr	r3, [pc, #212]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004824:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004828:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800482a:	4b33      	ldr	r3, [pc, #204]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b04      	cmp	r3, #4
 8004834:	d10c      	bne.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8004836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004838:	2b00      	cmp	r3, #0
 800483a:	d109      	bne.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800483c:	4b2e      	ldr	r3, [pc, #184]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	08db      	lsrs	r3, r3, #3
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	4a2d      	ldr	r2, [pc, #180]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
 800484c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484e:	e01e      	b.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004850:	4b29      	ldr	r3, [pc, #164]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485c:	d106      	bne.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 800485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004864:	d102      	bne.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004866:	4b26      	ldr	r3, [pc, #152]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486a:	e010      	b.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800486c:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004878:	d106      	bne.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004880:	d102      	bne.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004882:	4b20      	ldr	r3, [pc, #128]	; (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004886:	e002      	b.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800488c:	e2fd      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800488e:	e2fc      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004890:	4b1d      	ldr	r3, [pc, #116]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004892:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004894:	e2f9      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800489a:	e2f6      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a2:	f040 80a7 	bne.w	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80048a6:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80048a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048aa:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80048ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b6:	d05f      	beq.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048be:	f200 8096 	bhi.w	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048c8:	f000 808e 	beq.w	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048d2:	f200 808c 	bhi.w	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048dc:	d03a      	beq.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e4:	f200 8083 	bhi.w	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00e      	beq.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f4:	d01c      	beq.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 80048f6:	e07a      	b.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80048f8:	58024400 	.word	0x58024400
 80048fc:	03d09000 	.word	0x03d09000
 8004900:	003d0900 	.word	0x003d0900
 8004904:	007a1200 	.word	0x007a1200
 8004908:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800490c:	4ba8      	ldr	r3, [pc, #672]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004918:	d107      	bne.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800491a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fd78 	bl	8005414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004928:	e2af      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800492e:	e2ac      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004930:	4b9f      	ldr	r3, [pc, #636]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800493c:	d107      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800493e:	f107 0318 	add.w	r3, r7, #24
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fabe 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800494c:	e29d      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004952:	e29a      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004954:	4b96      	ldr	r3, [pc, #600]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800495c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004960:	d107      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004962:	f107 030c 	add.w	r3, r7, #12
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fc00 	bl	800516c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004970:	e28b      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004976:	e288      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004978:	4b8d      	ldr	r3, [pc, #564]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800497a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004980:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004982:	4b8b      	ldr	r3, [pc, #556]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b04      	cmp	r3, #4
 800498c:	d10c      	bne.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800498e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004990:	2b00      	cmp	r3, #0
 8004992:	d109      	bne.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004994:	4b86      	ldr	r3, [pc, #536]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	08db      	lsrs	r3, r3, #3
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	4a85      	ldr	r2, [pc, #532]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
 80049a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a6:	e01e      	b.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049a8:	4b81      	ldr	r3, [pc, #516]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b4:	d106      	bne.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 80049b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049bc:	d102      	bne.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80049be:	4b7e      	ldr	r3, [pc, #504]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c2:	e010      	b.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049c4:	4b7a      	ldr	r3, [pc, #488]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049d0:	d106      	bne.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80049d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d8:	d102      	bne.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80049da:	4b78      	ldr	r3, [pc, #480]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80049dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049de:	e002      	b.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 80049e4:	e251      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80049e6:	e250      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80049e8:	4b75      	ldr	r3, [pc, #468]	; (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049ec:	e24d      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049f2:	e24a      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fa:	f040 809c 	bne.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80049fe:	4b6c      	ldr	r3, [pc, #432]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a02:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a0e:	d054      	beq.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a16:	f200 808b 	bhi.w	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a20:	f000 8083 	beq.w	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a2a:	f200 8081 	bhi.w	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a34:	d02f      	beq.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a3c:	d878      	bhi.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d004      	beq.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4a:	d012      	beq.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8004a4c:	e070      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a4e:	4b58      	ldr	r3, [pc, #352]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a5a:	d107      	bne.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fcd7 	bl	8005414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a6a:	e20e      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a70:	e20b      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a72:	4b4f      	ldr	r3, [pc, #316]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a80:	f107 0318 	add.w	r3, r7, #24
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fa1d 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a8e:	e1fc      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a94:	e1f9      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a96:	4b46      	ldr	r3, [pc, #280]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa2:	d107      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004aa4:	f107 030c 	add.w	r3, r7, #12
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fb5f 	bl	800516c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ab2:	e1ea      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ab8:	e1e7      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004aba:	4b3d      	ldr	r3, [pc, #244]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ac2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ac4:	4b3a      	ldr	r3, [pc, #232]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d10c      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ad6:	4b36      	ldr	r3, [pc, #216]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	08db      	lsrs	r3, r3, #3
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	4a34      	ldr	r2, [pc, #208]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae8:	e01e      	b.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004aea:	4b31      	ldr	r3, [pc, #196]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af6:	d106      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8004af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004afe:	d102      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b00:	4b2d      	ldr	r3, [pc, #180]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b04:	e010      	b.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b06:	4b2a      	ldr	r3, [pc, #168]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b12:	d106      	bne.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b1a:	d102      	bne.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b1c:	4b27      	ldr	r3, [pc, #156]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b20:	e002      	b.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b26:	e1b0      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004b28:	e1af      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b2a:	4b25      	ldr	r3, [pc, #148]	; (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b2e:	e1ac      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b34:	e1a9      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b3c:	d17d      	bne.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004b3e:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b4e:	d039      	beq.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8004b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b56:	d86d      	bhi.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d004      	beq.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b64:	d012      	beq.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004b66:	e065      	b.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b68:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b74:	d107      	bne.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b76:	f107 0318 	add.w	r3, r7, #24
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f9a2 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b84:	e181      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b8a:	e17e      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b8c:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b98:	d107      	bne.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b9a:	f107 030c 	add.w	r3, r7, #12
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fae4 	bl	800516c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ba8:	e16f      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bae:	e16c      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004bb0:	58024400 	.word	0x58024400
 8004bb4:	03d09000 	.word	0x03d09000
 8004bb8:	003d0900 	.word	0x003d0900
 8004bbc:	007a1200 	.word	0x007a1200
 8004bc0:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004bc4:	4ba0      	ldr	r3, [pc, #640]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bcc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bce:	4b9e      	ldr	r3, [pc, #632]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8004bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d109      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004be0:	4b99      	ldr	r3, [pc, #612]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	08db      	lsrs	r3, r3, #3
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	4a98      	ldr	r2, [pc, #608]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf2:	e01e      	b.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bf4:	4b94      	ldr	r3, [pc, #592]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c00:	d106      	bne.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c08:	d102      	bne.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c0a:	4b91      	ldr	r3, [pc, #580]	; (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c0e:	e010      	b.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c10:	4b8d      	ldr	r3, [pc, #564]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c1c:	d106      	bne.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c24:	d102      	bne.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c26:	4b8b      	ldr	r3, [pc, #556]	; (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c2a:	e002      	b.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c30:	e12b      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004c32:	e12a      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c38:	e127      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c40:	d133      	bne.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004c42:	4b81      	ldr	r3, [pc, #516]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d004      	beq.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c58:	d012      	beq.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8004c5a:	e023      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c5c:	4b7a      	ldr	r3, [pc, #488]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c68:	d107      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fbd0 	bl	8005414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c78:	e107      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c7e:	e104      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c80:	4b71      	ldr	r3, [pc, #452]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c8c:	d107      	bne.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c8e:	f107 0318 	add.w	r3, r7, #24
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 f916 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c9c:	e0f5      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ca2:	e0f2      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ca8:	e0ef      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cb0:	f040 8091 	bne.w	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004cb4:	4b64      	ldr	r3, [pc, #400]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004cbc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004cc4:	f000 8081 	beq.w	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004cce:	d87f      	bhi.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cd6:	d06b      	beq.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cde:	d877      	bhi.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d056      	beq.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cee:	d86f      	bhi.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cf6:	d03b      	beq.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cfe:	d867      	bhi.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d06:	d021      	beq.n	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8004d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d0e:	d85f      	bhi.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d004      	beq.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d1c:	d004      	beq.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8004d1e:	e057      	b.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004d20:	f000 f8ba 	bl	8004e98 <HAL_RCCEx_GetD3PCLK1Freq>
 8004d24:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004d26:	e0b0      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d28:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d34:	d107      	bne.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d36:	f107 0318 	add.w	r3, r7, #24
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f8c2 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d44:	e0a1      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d4a:	e09e      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d4c:	4b3e      	ldr	r3, [pc, #248]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d58:	d107      	bne.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d5a:	f107 030c 	add.w	r3, r7, #12
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fa04 	bl	800516c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d68:	e08f      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d6e:	e08c      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d70:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d109      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d7c:	4b32      	ldr	r3, [pc, #200]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	08db      	lsrs	r3, r3, #3
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	4a31      	ldr	r2, [pc, #196]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d8e:	e07c      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d94:	e079      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004d96:	4b2c      	ldr	r3, [pc, #176]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da2:	d102      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8004da4:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004da8:	e06f      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dae:	e06c      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004db0:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dbc:	d102      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 8004dbe:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dc2:	e062      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dc8:	e05f      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dca:	4b23      	ldr	r3, [pc, #140]	; (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dce:	e05c      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dd4:	e059      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ddc:	d153      	bne.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004dde:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004de6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dee:	d035      	beq.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004df6:	d843      	bhi.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e04:	d00d      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8004e06:	e03b      	b.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e08:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e14:	d102      	bne.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8004e16:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004e18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e1a:	e036      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e20:	e033      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e2e:	d107      	bne.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 faed 	bl	8005414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e3e:	e024      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e44:	e021      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004e46:	bf00      	nop
 8004e48:	58024400 	.word	0x58024400
 8004e4c:	03d09000 	.word	0x03d09000
 8004e50:	003d0900 	.word	0x003d0900
 8004e54:	007a1200 	.word	0x007a1200
 8004e58:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e68:	d107      	bne.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e6a:	f107 0318 	add.w	r3, r7, #24
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f828 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e78:	e007      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e7e:	e004      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e84:	e001      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3740      	adds	r7, #64	; 0x40
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	58024400 	.word	0x58024400

08004e98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004e9c:	f7fe fc6a 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	4904      	ldr	r1, [pc, #16]	; (8004ec0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004eae:	5ccb      	ldrb	r3, [r1, r3]
 8004eb0:	f003 031f 	and.w	r3, r3, #31
 8004eb4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	0800d378 	.word	0x0800d378

08004ec4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b089      	sub	sp, #36	; 0x24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ecc:	4ba1      	ldr	r3, [pc, #644]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004ed6:	4b9f      	ldr	r3, [pc, #636]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eda:	0b1b      	lsrs	r3, r3, #12
 8004edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ee0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ee2:	4b9c      	ldr	r3, [pc, #624]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004eee:	4b99      	ldr	r3, [pc, #612]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	08db      	lsrs	r3, r3, #3
 8004ef4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8111 	beq.w	8005134 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	f000 8083 	beq.w	8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	f200 80a1 	bhi.w	8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d056      	beq.n	8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f2e:	e099      	b.n	8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f30:	4b88      	ldr	r3, [pc, #544]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d02d      	beq.n	8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f3c:	4b85      	ldr	r3, [pc, #532]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	08db      	lsrs	r3, r3, #3
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	4a84      	ldr	r2, [pc, #528]	; (8005158 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f48:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f66:	4b7b      	ldr	r3, [pc, #492]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800515c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f96:	e087      	b.n	80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004faa:	4b6a      	ldr	r3, [pc, #424]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800515c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fda:	e065      	b.n	80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fee:	4b59      	ldr	r3, [pc, #356]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005002:	eddf 5a56 	vldr	s11, [pc, #344]	; 800515c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800501e:	e043      	b.n	80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800502e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005032:	4b48      	ldr	r3, [pc, #288]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005042:	ed97 6a03 	vldr	s12, [r7, #12]
 8005046:	eddf 5a45 	vldr	s11, [pc, #276]	; 800515c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800504a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800505a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005062:	e021      	b.n	80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005076:	4b37      	ldr	r3, [pc, #220]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005086:	ed97 6a03 	vldr	s12, [r7, #12]
 800508a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800515c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800508e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800509a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800509e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80050a8:	4b2a      	ldr	r3, [pc, #168]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	0a5b      	lsrs	r3, r3, #9
 80050ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ce:	ee17 2a90 	vmov	r2, s15
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80050d6:	4b1f      	ldr	r3, [pc, #124]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	0c1b      	lsrs	r3, r3, #16
 80050dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e0:	ee07 3a90 	vmov	s15, r3
 80050e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80050f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050fc:	ee17 2a90 	vmov	r2, s15
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005104:	4b13      	ldr	r3, [pc, #76]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	0e1b      	lsrs	r3, r3, #24
 800510a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800511a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800511e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800512a:	ee17 2a90 	vmov	r2, s15
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005132:	e008      	b.n	8005146 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	609a      	str	r2, [r3, #8]
}
 8005146:	bf00      	nop
 8005148:	3724      	adds	r7, #36	; 0x24
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	58024400 	.word	0x58024400
 8005158:	03d09000 	.word	0x03d09000
 800515c:	46000000 	.word	0x46000000
 8005160:	4c742400 	.word	0x4c742400
 8005164:	4a742400 	.word	0x4a742400
 8005168:	4af42400 	.word	0x4af42400

0800516c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800516c:	b480      	push	{r7}
 800516e:	b089      	sub	sp, #36	; 0x24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005174:	4ba1      	ldr	r3, [pc, #644]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800517e:	4b9f      	ldr	r3, [pc, #636]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	0d1b      	lsrs	r3, r3, #20
 8005184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005188:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800518a:	4b9c      	ldr	r3, [pc, #624]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	0a1b      	lsrs	r3, r3, #8
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005196:	4b99      	ldr	r3, [pc, #612]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	08db      	lsrs	r3, r3, #3
 800519c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8111 	beq.w	80053dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	f000 8083 	beq.w	80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	f200 80a1 	bhi.w	800530c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d056      	beq.n	8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051d6:	e099      	b.n	800530c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051d8:	4b88      	ldr	r3, [pc, #544]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d02d      	beq.n	8005240 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051e4:	4b85      	ldr	r3, [pc, #532]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	08db      	lsrs	r3, r3, #3
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	4a84      	ldr	r2, [pc, #528]	; (8005400 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
 80051f4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	ee07 3a90 	vmov	s15, r3
 80051fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800520e:	4b7b      	ldr	r3, [pc, #492]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005222:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800522a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800523e:	e087      	b.n	8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005408 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800524e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005252:	4b6a      	ldr	r3, [pc, #424]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005262:	ed97 6a03 	vldr	s12, [r7, #12]
 8005266:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800526a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800527a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005282:	e065      	b.n	8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800540c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005296:	4b59      	ldr	r3, [pc, #356]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052c6:	e043      	b.n	8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005410 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052da:	4b48      	ldr	r3, [pc, #288]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800530a:	e021      	b.n	8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005316:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800540c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800531a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800531e:	4b37      	ldr	r3, [pc, #220]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005332:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800533a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800533e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800534a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800534e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005350:	4b2a      	ldr	r3, [pc, #168]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	0a5b      	lsrs	r3, r3, #9
 8005356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800536a:	edd7 6a07 	vldr	s13, [r7, #28]
 800536e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005376:	ee17 2a90 	vmov	r2, s15
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800537e:	4b1f      	ldr	r3, [pc, #124]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	0c1b      	lsrs	r3, r3, #16
 8005384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005388:	ee07 3a90 	vmov	s15, r3
 800538c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005394:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005398:	edd7 6a07 	vldr	s13, [r7, #28]
 800539c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053a4:	ee17 2a90 	vmov	r2, s15
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80053ac:	4b13      	ldr	r3, [pc, #76]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	0e1b      	lsrs	r3, r3, #24
 80053b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053d2:	ee17 2a90 	vmov	r2, s15
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053da:	e008      	b.n	80053ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	609a      	str	r2, [r3, #8]
}
 80053ee:	bf00      	nop
 80053f0:	3724      	adds	r7, #36	; 0x24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	58024400 	.word	0x58024400
 8005400:	03d09000 	.word	0x03d09000
 8005404:	46000000 	.word	0x46000000
 8005408:	4c742400 	.word	0x4c742400
 800540c:	4a742400 	.word	0x4a742400
 8005410:	4af42400 	.word	0x4af42400

08005414 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005414:	b480      	push	{r7}
 8005416:	b089      	sub	sp, #36	; 0x24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800541c:	4ba0      	ldr	r3, [pc, #640]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005426:	4b9e      	ldr	r3, [pc, #632]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	091b      	lsrs	r3, r3, #4
 800542c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005430:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005432:	4b9b      	ldr	r3, [pc, #620]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800543c:	4b98      	ldr	r3, [pc, #608]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800543e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005440:	08db      	lsrs	r3, r3, #3
 8005442:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	fb02 f303 	mul.w	r3, r2, r3
 800544c:	ee07 3a90 	vmov	s15, r3
 8005450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005454:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8111 	beq.w	8005682 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b02      	cmp	r3, #2
 8005464:	f000 8083 	beq.w	800556e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b02      	cmp	r3, #2
 800546c:	f200 80a1 	bhi.w	80055b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d056      	beq.n	800552a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800547c:	e099      	b.n	80055b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800547e:	4b88      	ldr	r3, [pc, #544]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d02d      	beq.n	80054e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800548a:	4b85      	ldr	r3, [pc, #532]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	08db      	lsrs	r3, r3, #3
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	4a83      	ldr	r2, [pc, #524]	; (80056a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005496:	fa22 f303 	lsr.w	r3, r2, r3
 800549a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	ee07 3a90 	vmov	s15, r3
 80054ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054b4:	4b7a      	ldr	r3, [pc, #488]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054bc:	ee07 3a90 	vmov	s15, r3
 80054c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80054c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80054cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80054e4:	e087      	b.n	80055f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	ee07 3a90 	vmov	s15, r3
 80054ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80056ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80054f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f8:	4b69      	ldr	r3, [pc, #420]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005500:	ee07 3a90 	vmov	s15, r3
 8005504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005508:	ed97 6a03 	vldr	s12, [r7, #12]
 800550c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800551c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005524:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005528:	e065      	b.n	80055f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005534:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800553c:	4b58      	ldr	r3, [pc, #352]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005544:	ee07 3a90 	vmov	s15, r3
 8005548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800554c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005550:	eddf 5a55 	vldr	s11, [pc, #340]	; 80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800555c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005568:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800556c:	e043      	b.n	80055f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	ee07 3a90 	vmov	s15, r3
 8005574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005578:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80056b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800557c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005580:	4b47      	ldr	r3, [pc, #284]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005588:	ee07 3a90 	vmov	s15, r3
 800558c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005590:	ed97 6a03 	vldr	s12, [r7, #12]
 8005594:	eddf 5a44 	vldr	s11, [pc, #272]	; 80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800559c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055b0:	e021      	b.n	80055f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	ee07 3a90 	vmov	s15, r3
 80055b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80056ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80055c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055c4:	4b36      	ldr	r3, [pc, #216]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055cc:	ee07 3a90 	vmov	s15, r3
 80055d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80055d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80055dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80055f6:	4b2a      	ldr	r3, [pc, #168]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	0a5b      	lsrs	r3, r3, #9
 80055fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800560c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005610:	edd7 6a07 	vldr	s13, [r7, #28]
 8005614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800561c:	ee17 2a90 	vmov	r2, s15
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005624:	4b1e      	ldr	r3, [pc, #120]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	0c1b      	lsrs	r3, r3, #16
 800562a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800563a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800563e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800564a:	ee17 2a90 	vmov	r2, s15
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005652:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	0e1b      	lsrs	r3, r3, #24
 8005658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565c:	ee07 3a90 	vmov	s15, r3
 8005660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005664:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005668:	ee37 7a87 	vadd.f32	s14, s15, s14
 800566c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005678:	ee17 2a90 	vmov	r2, s15
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005680:	e008      	b.n	8005694 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	609a      	str	r2, [r3, #8]
}
 8005694:	bf00      	nop
 8005696:	3724      	adds	r7, #36	; 0x24
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	58024400 	.word	0x58024400
 80056a4:	03d09000 	.word	0x03d09000
 80056a8:	46000000 	.word	0x46000000
 80056ac:	4c742400 	.word	0x4c742400
 80056b0:	4a742400 	.word	0x4a742400
 80056b4:	4af42400 	.word	0x4af42400

080056b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056c6:	4b53      	ldr	r3, [pc, #332]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d101      	bne.n	80056d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e099      	b.n	800580a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056d6:	4b4f      	ldr	r3, [pc, #316]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a4e      	ldr	r2, [pc, #312]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 80056dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e2:	f7fc f9df 	bl	8001aa4 <HAL_GetTick>
 80056e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056e8:	e008      	b.n	80056fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80056ea:	f7fc f9db 	bl	8001aa4 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e086      	b.n	800580a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056fc:	4b45      	ldr	r3, [pc, #276]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f0      	bne.n	80056ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005708:	4b42      	ldr	r3, [pc, #264]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	031b      	lsls	r3, r3, #12
 8005716:	493f      	ldr	r1, [pc, #252]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 8005718:	4313      	orrs	r3, r2
 800571a:	628b      	str	r3, [r1, #40]	; 0x28
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	3b01      	subs	r3, #1
 8005722:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	3b01      	subs	r3, #1
 800572c:	025b      	lsls	r3, r3, #9
 800572e:	b29b      	uxth	r3, r3
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	3b01      	subs	r3, #1
 8005738:	041b      	lsls	r3, r3, #16
 800573a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	3b01      	subs	r3, #1
 8005746:	061b      	lsls	r3, r3, #24
 8005748:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800574c:	4931      	ldr	r1, [pc, #196]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 800574e:	4313      	orrs	r3, r2
 8005750:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005752:	4b30      	ldr	r3, [pc, #192]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	492d      	ldr	r1, [pc, #180]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 8005760:	4313      	orrs	r3, r2
 8005762:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005764:	4b2b      	ldr	r3, [pc, #172]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	f023 0220 	bic.w	r2, r3, #32
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	4928      	ldr	r1, [pc, #160]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005776:	4b27      	ldr	r3, [pc, #156]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	4a26      	ldr	r2, [pc, #152]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 800577c:	f023 0310 	bic.w	r3, r3, #16
 8005780:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005782:	4b24      	ldr	r3, [pc, #144]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 8005784:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005786:	4b24      	ldr	r3, [pc, #144]	; (8005818 <RCCEx_PLL2_Config+0x160>)
 8005788:	4013      	ands	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	69d2      	ldr	r2, [r2, #28]
 800578e:	00d2      	lsls	r2, r2, #3
 8005790:	4920      	ldr	r1, [pc, #128]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 8005792:	4313      	orrs	r3, r2
 8005794:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005796:	4b1f      	ldr	r3, [pc, #124]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	4a1e      	ldr	r2, [pc, #120]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 800579c:	f043 0310 	orr.w	r3, r3, #16
 80057a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057a8:	4b1a      	ldr	r3, [pc, #104]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	4a19      	ldr	r2, [pc, #100]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 80057ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057b4:	e00f      	b.n	80057d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d106      	bne.n	80057ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057bc:	4b15      	ldr	r3, [pc, #84]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	4a14      	ldr	r2, [pc, #80]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 80057c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057c8:	e005      	b.n	80057d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057ca:	4b12      	ldr	r3, [pc, #72]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	4a11      	ldr	r2, [pc, #68]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 80057d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057d6:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a0e      	ldr	r2, [pc, #56]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 80057dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e2:	f7fc f95f 	bl	8001aa4 <HAL_GetTick>
 80057e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057e8:	e008      	b.n	80057fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80057ea:	f7fc f95b 	bl	8001aa4 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e006      	b.n	800580a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057fc:	4b05      	ldr	r3, [pc, #20]	; (8005814 <RCCEx_PLL2_Config+0x15c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0f0      	beq.n	80057ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	58024400 	.word	0x58024400
 8005818:	ffff0007 	.word	0xffff0007

0800581c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800582a:	4b53      	ldr	r3, [pc, #332]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 800582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	2b03      	cmp	r3, #3
 8005834:	d101      	bne.n	800583a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e099      	b.n	800596e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800583a:	4b4f      	ldr	r3, [pc, #316]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a4e      	ldr	r2, [pc, #312]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 8005840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005846:	f7fc f92d 	bl	8001aa4 <HAL_GetTick>
 800584a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800584c:	e008      	b.n	8005860 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800584e:	f7fc f929 	bl	8001aa4 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e086      	b.n	800596e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005860:	4b45      	ldr	r3, [pc, #276]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f0      	bne.n	800584e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800586c:	4b42      	ldr	r3, [pc, #264]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	051b      	lsls	r3, r3, #20
 800587a:	493f      	ldr	r1, [pc, #252]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 800587c:	4313      	orrs	r3, r2
 800587e:	628b      	str	r3, [r1, #40]	; 0x28
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	3b01      	subs	r3, #1
 8005886:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	3b01      	subs	r3, #1
 8005890:	025b      	lsls	r3, r3, #9
 8005892:	b29b      	uxth	r3, r3
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	3b01      	subs	r3, #1
 800589c:	041b      	lsls	r3, r3, #16
 800589e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	061b      	lsls	r3, r3, #24
 80058ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058b0:	4931      	ldr	r1, [pc, #196]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058b6:	4b30      	ldr	r3, [pc, #192]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	492d      	ldr	r1, [pc, #180]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058c8:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	4928      	ldr	r1, [pc, #160]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058da:	4b27      	ldr	r3, [pc, #156]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	4a26      	ldr	r2, [pc, #152]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 80058e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058e6:	4b24      	ldr	r3, [pc, #144]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 80058e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ea:	4b24      	ldr	r3, [pc, #144]	; (800597c <RCCEx_PLL3_Config+0x160>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	69d2      	ldr	r2, [r2, #28]
 80058f2:	00d2      	lsls	r2, r2, #3
 80058f4:	4920      	ldr	r1, [pc, #128]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80058fa:	4b1f      	ldr	r3, [pc, #124]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	4a1e      	ldr	r2, [pc, #120]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 8005900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005904:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d106      	bne.n	800591a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800590c:	4b1a      	ldr	r3, [pc, #104]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	4a19      	ldr	r2, [pc, #100]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 8005912:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005916:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005918:	e00f      	b.n	800593a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d106      	bne.n	800592e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005920:	4b15      	ldr	r3, [pc, #84]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4a14      	ldr	r2, [pc, #80]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 8005926:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800592a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800592c:	e005      	b.n	800593a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800592e:	4b12      	ldr	r3, [pc, #72]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	4a11      	ldr	r2, [pc, #68]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 8005934:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005938:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800593a:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a0e      	ldr	r2, [pc, #56]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 8005940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005946:	f7fc f8ad 	bl	8001aa4 <HAL_GetTick>
 800594a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800594c:	e008      	b.n	8005960 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800594e:	f7fc f8a9 	bl	8001aa4 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e006      	b.n	800596e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005960:	4b05      	ldr	r3, [pc, #20]	; (8005978 <RCCEx_PLL3_Config+0x15c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0f0      	beq.n	800594e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	58024400 	.word	0x58024400
 800597c:	ffff0007 	.word	0xffff0007

08005980 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	; 0x28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e075      	b.n	8005a7e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d105      	bne.n	80059aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7fb fc17 	bl	80011d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2204      	movs	r2, #4
 80059ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f868 	bl	8005a88 <HAL_SD_InitCard>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e05d      	b.n	8005a7e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80059c2:	f107 0308 	add.w	r3, r7, #8
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 ff6f 	bl	80068ac <HAL_SD_GetCardStatus>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e052      	b.n	8005a7e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80059d8:	7e3b      	ldrb	r3, [r7, #24]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80059de:	7e7b      	ldrb	r3, [r7, #25]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d10a      	bne.n	8005a02 <HAL_SD_Init+0x82>
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <HAL_SD_Init+0x78>
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d004      	beq.n	8005a02 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fe:	659a      	str	r2, [r3, #88]	; 0x58
 8005a00:	e00b      	b.n	8005a1a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d104      	bne.n	8005a14 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a10:	659a      	str	r2, [r3, #88]	; 0x58
 8005a12:	e002      	b.n	8005a1a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 f82d 	bl	8006a80 <HAL_SD_ConfigWideBusOperation>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e026      	b.n	8005a7e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005a30:	f7fc f838 	bl	8001aa4 <HAL_GetTick>
 8005a34:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005a36:	e011      	b.n	8005a5c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005a38:	f7fc f834 	bl	8001aa4 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d109      	bne.n	8005a5c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a4e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e010      	b.n	8005a7e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f001 f921 	bl	8006ca4 <HAL_SD_GetCardState>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d1e7      	bne.n	8005a38 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3728      	adds	r7, #40	; 0x28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b08d      	sub	sp, #52	; 0x34
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005aa4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005aa8:	f7fe fdcc 	bl	8004644 <HAL_RCCEx_GetPeriphCLKFreq>
 8005aac:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d109      	bne.n	8005ac8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ac2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e06a      	b.n	8005b9e <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	0a1b      	lsrs	r3, r3, #8
 8005acc:	4a36      	ldr	r2, [pc, #216]	; (8005ba8 <HAL_SD_InitCard+0x120>)
 8005ace:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad2:	091b      	lsrs	r3, r3, #4
 8005ad4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681c      	ldr	r4, [r3, #0]
 8005ada:	466a      	mov	r2, sp
 8005adc:	f107 0318 	add.w	r3, r7, #24
 8005ae0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ae4:	e882 0003 	stmia.w	r2, {r0, r1}
 8005ae8:	f107 030c 	add.w	r3, r7, #12
 8005aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005aee:	4620      	mov	r0, r4
 8005af0:	f003 fda4 	bl	800963c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f003 fde7 	bl	80096cc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005b0a:	4a28      	ldr	r2, [pc, #160]	; (8005bac <HAL_SD_InitCard+0x124>)
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	3301      	adds	r3, #1
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fb ffd1 	bl	8001abc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f001 f9b0 	bl	8006e80 <SD_PowerON>
 8005b20:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e02e      	b.n	8005b9e <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f001 f8cf 	bl	8006ce4 <SD_InitCard>
 8005b46:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e01b      	b.n	8005b9e <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f003 fe42 	bl	80097f8 <SDMMC_CmdBlockLength>
 8005b74:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00f      	beq.n	8005b9c <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0b      	ldr	r2, [pc, #44]	; (8005bb0 <HAL_SD_InitCard+0x128>)
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	372c      	adds	r7, #44	; 0x2c
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd90      	pop	{r4, r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	014f8b59 	.word	0x014f8b59
 8005bac:	00012110 	.word	0x00012110
 8005bb0:	1fe00fff 	.word	0x1fe00fff

08005bb4 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b092      	sub	sp, #72	; 0x48
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005bc2:	f7fb ff6f 	bl	8001aa4 <HAL_GetTick>
 8005bc6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d107      	bne.n	8005be6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e167      	b.n	8005eb6 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	f040 815a 	bne.w	8005ea8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	441a      	add	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d907      	bls.n	8005c18 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e14e      	b.n	8005eb6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2203      	movs	r2, #3
 8005c1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2200      	movs	r2, #0
 8005c26:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d002      	beq.n	8005c36 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	025b      	lsls	r3, r3, #9
 8005c34:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c36:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	025b      	lsls	r3, r3, #9
 8005c40:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005c42:	2390      	movs	r3, #144	; 0x90
 8005c44:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005c46:	2302      	movs	r3, #2
 8005c48:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f107 0214 	add.w	r2, r7, #20
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f003 fd9f 	bl	80097a0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c70:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d90a      	bls.n	8005c8e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c84:	4618      	mov	r0, r3
 8005c86:	f003 fdfd 	bl	8009884 <SDMMC_CmdReadMultiBlock>
 8005c8a:	6478      	str	r0, [r7, #68]	; 0x44
 8005c8c:	e009      	b.n	8005ca2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f003 fdcf 	bl	800983e <SDMMC_CmdReadSingleBlock>
 8005ca0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d012      	beq.n	8005cce <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a84      	ldr	r2, [pc, #528]	; (8005ec0 <HAL_SD_ReadBlocks+0x30c>)
 8005cae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e0f3      	b.n	8005eb6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005cd2:	e058      	b.n	8005d86 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d033      	beq.n	8005d4a <HAL_SD_ReadBlocks+0x196>
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce4:	2b1f      	cmp	r3, #31
 8005ce6:	d930      	bls.n	8005d4a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	643b      	str	r3, [r7, #64]	; 0x40
 8005cec:	e027      	b.n	8005d3e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f003 fccc 	bl	8009690 <SDMMC_ReadFIFO>
 8005cf8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d00:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d04:	3301      	adds	r3, #1
 8005d06:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	0a1b      	lsrs	r3, r3, #8
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d14:	3301      	adds	r3, #1
 8005d16:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	0c1b      	lsrs	r3, r3, #16
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d20:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d24:	3301      	adds	r3, #1
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2a:	0e1b      	lsrs	r3, r3, #24
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d30:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d34:	3301      	adds	r3, #1
 8005d36:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d40:	2b07      	cmp	r3, #7
 8005d42:	d9d4      	bls.n	8005cee <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d46:	3b20      	subs	r3, #32
 8005d48:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005d4a:	f7fb feab 	bl	8001aa4 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d902      	bls.n	8005d60 <HAL_SD_ReadBlocks+0x1ac>
 8005d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d112      	bne.n	8005d86 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a56      	ldr	r2, [pc, #344]	; (8005ec0 <HAL_SD_ReadBlocks+0x30c>)
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e097      	b.n	8005eb6 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d09f      	beq.n	8005cd4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d022      	beq.n	8005df8 <HAL_SD_ReadBlocks+0x244>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d91f      	bls.n	8005df8 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d01b      	beq.n	8005df8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f003 fdc7 	bl	8009958 <SDMMC_CmdStopTransfer>
 8005dca:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d012      	beq.n	8005df8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a3a      	ldr	r2, [pc, #232]	; (8005ec0 <HAL_SD_ReadBlocks+0x30c>)
 8005dd8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de0:	431a      	orrs	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e05e      	b.n	8005eb6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d012      	beq.n	8005e2c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a2d      	ldr	r2, [pc, #180]	; (8005ec0 <HAL_SD_ReadBlocks+0x30c>)
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e12:	f043 0208 	orr.w	r2, r3, #8
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e044      	b.n	8005eb6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d012      	beq.n	8005e60 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a20      	ldr	r2, [pc, #128]	; (8005ec0 <HAL_SD_ReadBlocks+0x30c>)
 8005e40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e46:	f043 0202 	orr.w	r2, r3, #2
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e02a      	b.n	8005eb6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d012      	beq.n	8005e94 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a13      	ldr	r2, [pc, #76]	; (8005ec0 <HAL_SD_ReadBlocks+0x30c>)
 8005e74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7a:	f043 0220 	orr.w	r2, r3, #32
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e010      	b.n	8005eb6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a0a      	ldr	r2, [pc, #40]	; (8005ec4 <HAL_SD_ReadBlocks+0x310>)
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	e006      	b.n	8005eb6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
  }
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3748      	adds	r7, #72	; 0x48
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	1fe00fff 	.word	0x1fe00fff
 8005ec4:	18000f3a 	.word	0x18000f3a

08005ec8 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b092      	sub	sp, #72	; 0x48
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005ed6:	f7fb fde5 	bl	8001aa4 <HAL_GetTick>
 8005eda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d107      	bne.n	8005efa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e16b      	b.n	80061d2 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	f040 815e 	bne.w	80061c4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	441a      	add	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d907      	bls.n	8005f2c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f20:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e152      	b.n	80061d2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2203      	movs	r2, #3
 8005f30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d002      	beq.n	8005f4a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	025b      	lsls	r3, r3, #9
 8005f48:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	025b      	lsls	r3, r3, #9
 8005f54:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005f56:	2390      	movs	r3, #144	; 0x90
 8005f58:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005f62:	2300      	movs	r3, #0
 8005f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f107 0218 	add.w	r2, r7, #24
 8005f6e:	4611      	mov	r1, r2
 8005f70:	4618      	mov	r0, r3
 8005f72:	f003 fc15 	bl	80097a0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f84:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d90a      	bls.n	8005fa2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f003 fcb9 	bl	8009910 <SDMMC_CmdWriteMultiBlock>
 8005f9e:	6478      	str	r0, [r7, #68]	; 0x44
 8005fa0:	e009      	b.n	8005fb6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2210      	movs	r2, #16
 8005fa6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f003 fc8b 	bl	80098ca <SDMMC_CmdWriteSingleBlock>
 8005fb4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d012      	beq.n	8005fe2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a86      	ldr	r2, [pc, #536]	; (80061dc <HAL_SD_WriteBlocks+0x314>)
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e0f7      	b.n	80061d2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005fe6:	e05c      	b.n	80060a2 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d037      	beq.n	8006066 <HAL_SD_WriteBlocks+0x19e>
 8005ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff8:	2b1f      	cmp	r3, #31
 8005ffa:	d934      	bls.n	8006066 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8006000:	e02b      	b.n	800605a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8006002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600a:	3301      	adds	r3, #1
 800600c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800600e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	021a      	lsls	r2, r3, #8
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	3301      	adds	r3, #1
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	041a      	lsls	r2, r3, #16
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800602c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602e:	3301      	adds	r3, #1
 8006030:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	061a      	lsls	r2, r3, #24
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800603e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006040:	3301      	adds	r3, #1
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f107 0214 	add.w	r2, r7, #20
 800604c:	4611      	mov	r1, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f003 fb2b 	bl	80096aa <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8006054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006056:	3301      	adds	r3, #1
 8006058:	643b      	str	r3, [r7, #64]	; 0x40
 800605a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800605c:	2b07      	cmp	r3, #7
 800605e:	d9d0      	bls.n	8006002 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006062:	3b20      	subs	r3, #32
 8006064:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006066:	f7fb fd1d 	bl	8001aa4 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006072:	429a      	cmp	r2, r3
 8006074:	d902      	bls.n	800607c <HAL_SD_WriteBlocks+0x1b4>
 8006076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006078:	2b00      	cmp	r3, #0
 800607a:	d112      	bne.n	80060a2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a56      	ldr	r2, [pc, #344]	; (80061dc <HAL_SD_WriteBlocks+0x314>)
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608a:	431a      	orrs	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e097      	b.n	80061d2 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d09b      	beq.n	8005fe8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060be:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d022      	beq.n	8006114 <HAL_SD_WriteBlocks+0x24c>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d91f      	bls.n	8006114 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d01b      	beq.n	8006114 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f003 fc39 	bl	8009958 <SDMMC_CmdStopTransfer>
 80060e6:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80060e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d012      	beq.n	8006114 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a3a      	ldr	r2, [pc, #232]	; (80061dc <HAL_SD_WriteBlocks+0x314>)
 80060f4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060fc:	431a      	orrs	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e05e      	b.n	80061d2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d012      	beq.n	8006148 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a2d      	ldr	r2, [pc, #180]	; (80061dc <HAL_SD_WriteBlocks+0x314>)
 8006128:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612e:	f043 0208 	orr.w	r2, r3, #8
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e044      	b.n	80061d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d012      	beq.n	800617c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a20      	ldr	r2, [pc, #128]	; (80061dc <HAL_SD_WriteBlocks+0x314>)
 800615c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006162:	f043 0202 	orr.w	r2, r3, #2
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e02a      	b.n	80061d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006182:	f003 0310 	and.w	r3, r3, #16
 8006186:	2b00      	cmp	r3, #0
 8006188:	d012      	beq.n	80061b0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a13      	ldr	r2, [pc, #76]	; (80061dc <HAL_SD_WriteBlocks+0x314>)
 8006190:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006196:	f043 0210 	orr.w	r2, r3, #16
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e010      	b.n	80061d2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a0a      	ldr	r2, [pc, #40]	; (80061e0 <HAL_SD_WriteBlocks+0x318>)
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	e006      	b.n	80061d2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
  }
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3748      	adds	r7, #72	; 0x48
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	1fe00fff 	.word	0x1fe00fff
 80061e0:	18000f3a 	.word	0x18000f3a

080061e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <HAL_SD_IRQHandler+0x2e>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 f924 	bl	8007458 <SD_Read_IT>
 8006210:	e19a      	b.n	8006548 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80ac 	beq.w	800637a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800622a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	4b9d      	ldr	r3, [pc, #628]	; (80064ac <HAL_SD_IRQHandler+0x2c8>)
 8006238:	400b      	ands	r3, r1
 800623a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800624a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800625a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b00      	cmp	r3, #0
 8006264:	d038      	beq.n	80062d8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d104      	bne.n	800627a <HAL_SD_IRQHandler+0x96>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d011      	beq.n	800629e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f003 fb6a 	bl	8009958 <SDMMC_CmdStopTransfer>
 8006284:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f959 	bl	8006550 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a83      	ldr	r2, [pc, #524]	; (80064b0 <HAL_SD_IRQHandler+0x2cc>)
 80062a4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d104      	bne.n	80062c8 <HAL_SD_IRQHandler+0xe4>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f004 f80f 	bl	800a2ec <HAL_SD_RxCpltCallback>
 80062ce:	e13b      	b.n	8006548 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f004 f801 	bl	800a2d8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80062d6:	e137      	b.n	8006548 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 8132 	beq.w	8006548 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2200      	movs	r2, #0
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2200      	movs	r2, #0
 80062f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2200      	movs	r2, #0
 80062fa:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d104      	bne.n	8006310 <HAL_SD_IRQHandler+0x12c>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b00      	cmp	r3, #0
 800630e:	d011      	beq.n	8006334 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4618      	mov	r0, r3
 8006316:	f003 fb1f 	bl	8009958 <SDMMC_CmdStopTransfer>
 800631a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d008      	beq.n	8006334 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f90e 	bl	8006550 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f003 0310 	and.w	r3, r3, #16
 8006348:	2b00      	cmp	r3, #0
 800634a:	d104      	bne.n	8006356 <HAL_SD_IRQHandler+0x172>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f003 ffbe 	bl	800a2d8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d105      	bne.n	8006372 <HAL_SD_IRQHandler+0x18e>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80eb 	beq.w	8006548 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f003 ffba 	bl	800a2ec <HAL_SD_RxCpltCallback>
}
 8006378:	e0e6      	b.n	8006548 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <HAL_SD_IRQHandler+0x1b6>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 f8a6 	bl	80074e4 <SD_Write_IT>
 8006398:	e0d6      	b.n	8006548 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a0:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80a2 	beq.w	80064ee <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	f043 0202 	orr.w	r2, r3, #2
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d005      	beq.n	80063de <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d6:	f043 0208 	orr.w	r2, r3, #8
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f0:	f043 0220 	orr.w	r2, r3, #32
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640a:	f043 0210 	orr.w	r2, r3, #16
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a26      	ldr	r2, [pc, #152]	; (80064b0 <HAL_SD_IRQHandler+0x2cc>)
 8006418:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006428:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006438:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006448:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006458:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f003 fa7a 	bl	8009958 <SDMMC_CmdStopTransfer>
 8006464:	4602      	mov	r2, r0
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800647e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006488:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00f      	beq.n	80064b4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f854 	bl	8006550 <HAL_SD_ErrorCallback>
}
 80064a8:	e04e      	b.n	8006548 <HAL_SD_IRQHandler+0x364>
 80064aa:	bf00      	nop
 80064ac:	ffff3ec5 	.word	0xffff3ec5
 80064b0:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d044      	beq.n	8006548 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d040      	beq.n	8006548 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80064d4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2200      	movs	r2, #0
 80064dc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f832 	bl	8006550 <HAL_SD_ErrorCallback>
}
 80064ec:	e02c      	b.n	8006548 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d025      	beq.n	8006548 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10c      	bne.n	800652e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 f848 	bl	80075b4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006524:	e010      	b.n	8006548 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 f830 	bl	800758c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800652c:	e00c      	b.n	8006548 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 f831 	bl	80075a0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800653e:	e003      	b.n	8006548 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 f819 	bl	8007578 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006546:	e7ff      	b.n	8006548 <HAL_SD_IRQHandler+0x364>
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006572:	0f9b      	lsrs	r3, r3, #30
 8006574:	b2da      	uxtb	r2, r3
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657e:	0e9b      	lsrs	r3, r3, #26
 8006580:	b2db      	uxtb	r3, r3
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	b2da      	uxtb	r2, r3
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006590:	0e1b      	lsrs	r3, r3, #24
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	b2da      	uxtb	r2, r3
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a2:	0c1b      	lsrs	r3, r3, #16
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ae:	0a1b      	lsrs	r3, r3, #8
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c4:	0d1b      	lsrs	r3, r3, #20
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d0:	0c1b      	lsrs	r3, r3, #16
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f003 030f 	and.w	r3, r3, #15
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e2:	0bdb      	lsrs	r3, r3, #15
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f4:	0b9b      	lsrs	r3, r3, #14
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006606:	0b5b      	lsrs	r3, r3, #13
 8006608:	b2db      	uxtb	r3, r3
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	b2da      	uxtb	r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006618:	0b1b      	lsrs	r3, r3, #12
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	b2da      	uxtb	r2, r3
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2200      	movs	r2, #0
 800662a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	2b00      	cmp	r3, #0
 8006632:	d163      	bne.n	80066fc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006638:	009a      	lsls	r2, r3, #2
 800663a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800663e:	4013      	ands	r3, r2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006644:	0f92      	lsrs	r2, r2, #30
 8006646:	431a      	orrs	r2, r3
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006650:	0edb      	lsrs	r3, r3, #27
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	b2da      	uxtb	r2, r3
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006662:	0e1b      	lsrs	r3, r3, #24
 8006664:	b2db      	uxtb	r3, r3
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	b2da      	uxtb	r2, r3
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006674:	0d5b      	lsrs	r3, r3, #21
 8006676:	b2db      	uxtb	r3, r3
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	b2da      	uxtb	r2, r3
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006686:	0c9b      	lsrs	r3, r3, #18
 8006688:	b2db      	uxtb	r3, r3
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	b2da      	uxtb	r2, r3
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006698:	0bdb      	lsrs	r3, r3, #15
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	7e1b      	ldrb	r3, [r3, #24]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	3302      	adds	r3, #2
 80066bc:	2201      	movs	r2, #1
 80066be:	fa02 f303 	lsl.w	r3, r2, r3
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80066c6:	fb02 f203 	mul.w	r2, r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	7a1b      	ldrb	r3, [r3, #8]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	2201      	movs	r2, #1
 80066da:	409a      	lsls	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80066e8:	0a52      	lsrs	r2, r2, #9
 80066ea:	fb02 f203 	mul.w	r2, r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066f8:	655a      	str	r2, [r3, #84]	; 0x54
 80066fa:	e031      	b.n	8006760 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	2b01      	cmp	r3, #1
 8006702:	d11d      	bne.n	8006740 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006708:	041b      	lsls	r3, r3, #16
 800670a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006712:	0c1b      	lsrs	r3, r3, #16
 8006714:	431a      	orrs	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	3301      	adds	r3, #1
 8006720:	029a      	lsls	r2, r3, #10
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006734:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	655a      	str	r2, [r3, #84]	; 0x54
 800673e:	e00f      	b.n	8006760 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a58      	ldr	r2, [pc, #352]	; (80068a8 <HAL_SD_GetCardCSD+0x344>)
 8006746:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e09d      	b.n	800689c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006764:	0b9b      	lsrs	r3, r3, #14
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	b2da      	uxtb	r2, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006776:	09db      	lsrs	r3, r3, #7
 8006778:	b2db      	uxtb	r3, r3
 800677a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800677e:	b2da      	uxtb	r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800678e:	b2da      	uxtb	r2, r3
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006798:	0fdb      	lsrs	r3, r3, #31
 800679a:	b2da      	uxtb	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067a4:	0f5b      	lsrs	r3, r3, #29
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	f003 0303 	and.w	r3, r3, #3
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067b6:	0e9b      	lsrs	r3, r3, #26
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067c8:	0d9b      	lsrs	r3, r3, #22
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067da:	0d5b      	lsrs	r3, r3, #21
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067f6:	0c1b      	lsrs	r3, r3, #16
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800680a:	0bdb      	lsrs	r3, r3, #15
 800680c:	b2db      	uxtb	r3, r3
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	b2da      	uxtb	r2, r3
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800681e:	0b9b      	lsrs	r3, r3, #14
 8006820:	b2db      	uxtb	r3, r3
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	b2da      	uxtb	r2, r3
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006832:	0b5b      	lsrs	r3, r3, #13
 8006834:	b2db      	uxtb	r3, r3
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	b2da      	uxtb	r2, r3
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006846:	0b1b      	lsrs	r3, r3, #12
 8006848:	b2db      	uxtb	r3, r3
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	b2da      	uxtb	r2, r3
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800685a:	0a9b      	lsrs	r3, r3, #10
 800685c:	b2db      	uxtb	r3, r3
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	b2da      	uxtb	r2, r3
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800686e:	0a1b      	lsrs	r3, r3, #8
 8006870:	b2db      	uxtb	r3, r3
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	b2da      	uxtb	r2, r3
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	b2db      	uxtb	r3, r3
 8006886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800688a:	b2da      	uxtb	r2, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	1fe00fff 	.word	0x1fe00fff

080068ac <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b094      	sub	sp, #80	; 0x50
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d101      	bne.n	80068cc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0a7      	b.n	8006a1c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80068cc:	f107 0308 	add.w	r3, r7, #8
 80068d0:	4619      	mov	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fb62 	bl	8006f9c <SD_SendSDStatus>
 80068d8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80068da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d011      	beq.n	8006904 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a4f      	ldr	r2, [pc, #316]	; (8006a24 <HAL_SD_GetCardStatus+0x178>)
 80068e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006902:	e070      	b.n	80069e6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	099b      	lsrs	r3, r3, #6
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	b2da      	uxtb	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	b2db      	uxtb	r3, r3
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	b2da      	uxtb	r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	0a1b      	lsrs	r3, r3, #8
 8006928:	b29b      	uxth	r3, r3
 800692a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800692e:	b29a      	uxth	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	0e1b      	lsrs	r3, r3, #24
 8006934:	b29b      	uxth	r3, r3
 8006936:	4313      	orrs	r3, r2
 8006938:	b29a      	uxth	r2, r3
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	061a      	lsls	r2, r3, #24
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800694a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	0a1b      	lsrs	r3, r3, #8
 8006950:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006954:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	0e1b      	lsrs	r3, r3, #24
 800695a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	b2da      	uxtb	r2, r3
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	0a1b      	lsrs	r3, r3, #8
 800696c:	b2da      	uxtb	r2, r3
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	0d1b      	lsrs	r3, r3, #20
 8006976:	b2db      	uxtb	r3, r3
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	b2da      	uxtb	r2, r3
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	0c1b      	lsrs	r3, r3, #16
 8006986:	b29b      	uxth	r3, r3
 8006988:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800698c:	b29a      	uxth	r2, r3
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	b29b      	uxth	r3, r3
 8006992:	b2db      	uxtb	r3, r3
 8006994:	b29b      	uxth	r3, r3
 8006996:	4313      	orrs	r3, r2
 8006998:	b29a      	uxth	r2, r3
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	0a9b      	lsrs	r3, r3, #10
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	0a1b      	lsrs	r3, r3, #8
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f003 0303 	and.w	r3, r3, #3
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	091b      	lsrs	r3, r3, #4
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	0e1b      	lsrs	r3, r3, #24
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069ee:	4618      	mov	r0, r3
 80069f0:	f002 ff02 	bl	80097f8 <SDMMC_CmdBlockLength>
 80069f4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80069f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00d      	beq.n	8006a18 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a08      	ldr	r2, [pc, #32]	; (8006a24 <HAL_SD_GetCardStatus+0x178>)
 8006a02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a08:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006a18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3750      	adds	r7, #80	; 0x50
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	1fe00fff 	.word	0x1fe00fff

08006a28 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006a80:	b590      	push	{r4, r7, lr}
 8006a82:	b08d      	sub	sp, #52	; 0x34
 8006a84:	af02      	add	r7, sp, #8
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2203      	movs	r2, #3
 8006a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d02e      	beq.n	8006b02 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aaa:	d106      	bne.n	8006aba <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	635a      	str	r2, [r3, #52]	; 0x34
 8006ab8:	e029      	b.n	8006b0e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ac0:	d10a      	bne.n	8006ad8 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fb62 	bl	800718c <SD_WideBus_Enable>
 8006ac8:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8006ad6:	e01a      	b.n	8006b0e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10a      	bne.n	8006af4 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fb9f 	bl	8007222 <SD_WideBus_Disable>
 8006ae4:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	635a      	str	r2, [r3, #52]	; 0x34
 8006af2:	e00c      	b.n	8006b0e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	635a      	str	r2, [r3, #52]	; 0x34
 8006b00:	e005      	b.n	8006b0e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a5e      	ldr	r2, [pc, #376]	; (8006c94 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006b1c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b24:	e094      	b.n	8006c50 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006b26:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006b2a:	f7fd fd8b 	bl	8004644 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b2e:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 8083 	beq.w	8006c3e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	695a      	ldr	r2, [r3, #20]
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	4950      	ldr	r1, [pc, #320]	; (8006c98 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006b56:	fba1 1303 	umull	r1, r3, r1, r3
 8006b5a:	0e1b      	lsrs	r3, r3, #24
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d303      	bcc.n	8006b68 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	61bb      	str	r3, [r7, #24]
 8006b66:	e05a      	b.n	8006c1e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b70:	d103      	bne.n	8006b7a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	e051      	b.n	8006c1e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b82:	d126      	bne.n	8006bd2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10e      	bne.n	8006baa <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	4a43      	ldr	r2, [pc, #268]	; (8006c9c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d906      	bls.n	8006ba2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	4a40      	ldr	r2, [pc, #256]	; (8006c98 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006b98:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9c:	0e5b      	lsrs	r3, r3, #25
 8006b9e:	61bb      	str	r3, [r7, #24]
 8006ba0:	e03d      	b.n	8006c1e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	61bb      	str	r3, [r7, #24]
 8006ba8:	e039      	b.n	8006c1e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	6a3a      	ldr	r2, [r7, #32]
 8006bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb6:	4a39      	ldr	r2, [pc, #228]	; (8006c9c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d906      	bls.n	8006bca <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	4a36      	ldr	r2, [pc, #216]	; (8006c98 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	0e5b      	lsrs	r3, r3, #25
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	e029      	b.n	8006c1e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	61bb      	str	r3, [r7, #24]
 8006bd0:	e025      	b.n	8006c1e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10e      	bne.n	8006bf8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	4a30      	ldr	r2, [pc, #192]	; (8006ca0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d906      	bls.n	8006bf0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	4a2c      	ldr	r2, [pc, #176]	; (8006c98 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006be6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bea:	0e1b      	lsrs	r3, r3, #24
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	e016      	b.n	8006c1e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	e012      	b.n	8006c1e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	6a3a      	ldr	r2, [r7, #32]
 8006c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c04:	4a26      	ldr	r2, [pc, #152]	; (8006ca0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d906      	bls.n	8006c18 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	4a22      	ldr	r2, [pc, #136]	; (8006c98 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c12:	0e1b      	lsrs	r3, r3, #24
 8006c14:	61bb      	str	r3, [r7, #24]
 8006c16:	e002      	b.n	8006c1e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681c      	ldr	r4, [r3, #0]
 8006c22:	466a      	mov	r2, sp
 8006c24:	f107 0314 	add.w	r3, r7, #20
 8006c28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006c2c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006c30:	f107 0308 	add.w	r3, r7, #8
 8006c34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c36:	4620      	mov	r0, r4
 8006c38:	f002 fd00 	bl	800963c <SDMMC_Init>
 8006c3c:	e008      	b.n	8006c50 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f002 fdcd 	bl	80097f8 <SDMMC_CmdBlockLength>
 8006c5e:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00c      	beq.n	8006c80 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a0a      	ldr	r2, [pc, #40]	; (8006c94 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006c6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	372c      	adds	r7, #44	; 0x2c
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd90      	pop	{r4, r7, pc}
 8006c94:	1fe00fff 	.word	0x1fe00fff
 8006c98:	55e63b89 	.word	0x55e63b89
 8006c9c:	02faf080 	.word	0x02faf080
 8006ca0:	017d7840 	.word	0x017d7840

08006ca4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006cb0:	f107 030c 	add.w	r3, r7, #12
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fa40 	bl	800713c <SD_SendStatus>
 8006cbc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	0a5b      	lsrs	r3, r3, #9
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006cda:	693b      	ldr	r3, [r7, #16]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b090      	sub	sp, #64	; 0x40
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006cf0:	f7fa fed8 	bl	8001aa4 <HAL_GetTick>
 8006cf4:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f002 fcf7 	bl	80096ee <SDMMC_GetPowerState>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d102      	bne.n	8006d0c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006d0a:	e0b5      	b.n	8006e78 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d02e      	beq.n	8006d72 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f002 ff42 	bl	8009ba2 <SDMMC_CmdSendCID>
 8006d1e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <SD_InitCard+0x46>
    {
      return errorstate;
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	e0a6      	b.n	8006e78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2100      	movs	r1, #0
 8006d30:	4618      	mov	r0, r3
 8006d32:	f002 fd22 	bl	800977a <SDMMC_GetResponse>
 8006d36:	4602      	mov	r2, r0
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2104      	movs	r1, #4
 8006d42:	4618      	mov	r0, r3
 8006d44:	f002 fd19 	bl	800977a <SDMMC_GetResponse>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2108      	movs	r1, #8
 8006d54:	4618      	mov	r0, r3
 8006d56:	f002 fd10 	bl	800977a <SDMMC_GetResponse>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	210c      	movs	r1, #12
 8006d66:	4618      	mov	r0, r3
 8006d68:	f002 fd07 	bl	800977a <SDMMC_GetResponse>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d01d      	beq.n	8006db6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006d7a:	e019      	b.n	8006db0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f107 020a 	add.w	r2, r7, #10
 8006d84:	4611      	mov	r1, r2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f002 ff4a 	bl	8009c20 <SDMMC_CmdSetRelAdd>
 8006d8c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	e06f      	b.n	8006e78 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006d98:	f7fa fe84 	bl	8001aa4 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	f241 3287 	movw	r2, #4999	; 0x1387
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d902      	bls.n	8006db0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006daa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006dae:	e063      	b.n	8006e78 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006db0:	897b      	ldrh	r3, [r7, #10]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0e2      	beq.n	8006d7c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d036      	beq.n	8006e2c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006dbe:	897b      	ldrh	r3, [r7, #10]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dce:	041b      	lsls	r3, r3, #16
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	f002 ff04 	bl	8009be0 <SDMMC_CmdSendCSD>
 8006dd8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <SD_InitCard+0x100>
    {
      return errorstate;
 8006de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de2:	e049      	b.n	8006e78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2100      	movs	r1, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	f002 fcc5 	bl	800977a <SDMMC_GetResponse>
 8006df0:	4602      	mov	r2, r0
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2104      	movs	r1, #4
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f002 fcbc 	bl	800977a <SDMMC_GetResponse>
 8006e02:	4602      	mov	r2, r0
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2108      	movs	r1, #8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f002 fcb3 	bl	800977a <SDMMC_GetResponse>
 8006e14:	4602      	mov	r2, r0
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	210c      	movs	r1, #12
 8006e20:	4618      	mov	r0, r3
 8006e22:	f002 fcaa 	bl	800977a <SDMMC_GetResponse>
 8006e26:	4602      	mov	r2, r0
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2104      	movs	r1, #4
 8006e32:	4618      	mov	r0, r3
 8006e34:	f002 fca1 	bl	800977a <SDMMC_GetResponse>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	0d1a      	lsrs	r2, r3, #20
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006e40:	f107 030c 	add.w	r3, r7, #12
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7ff fb8c 	bl	8006564 <HAL_SD_GetCardCSD>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e56:	e00f      	b.n	8006e78 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e60:	041b      	lsls	r3, r3, #16
 8006e62:	4619      	mov	r1, r3
 8006e64:	4610      	mov	r0, r2
 8006e66:	f002 fdb3 	bl	80099d0 <SDMMC_CmdSelDesel>
 8006e6a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <SD_InitCard+0x192>
  {
    return errorstate;
 8006e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e74:	e000      	b.n	8006e78 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3740      	adds	r7, #64	; 0x40
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f002 fdbc 	bl	8009a16 <SDMMC_CmdGoIdleState>
 8006e9e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <SD_PowerON+0x2a>
  {
    return errorstate;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	e072      	b.n	8006f90 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f002 fdcf 	bl	8009a52 <SDMMC_CmdOperCond>
 8006eb4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ebc:	d10d      	bne.n	8006eda <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f002 fda4 	bl	8009a16 <SDMMC_CmdGoIdleState>
 8006ece:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <SD_PowerON+0x60>
    {
      return errorstate;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	e05a      	b.n	8006f90 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d137      	bne.n	8006f58 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2100      	movs	r1, #0
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f002 fdcf 	bl	8009a92 <SDMMC_CmdAppCommand>
 8006ef4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d02d      	beq.n	8006f58 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f00:	e046      	b.n	8006f90 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2100      	movs	r1, #0
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f002 fdc2 	bl	8009a92 <SDMMC_CmdAppCommand>
 8006f0e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <SD_PowerON+0x9a>
    {
      return errorstate;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	e03a      	b.n	8006f90 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	491e      	ldr	r1, [pc, #120]	; (8006f98 <SD_PowerON+0x118>)
 8006f20:	4618      	mov	r0, r3
 8006f22:	f002 fdd9 	bl	8009ad8 <SDMMC_CmdAppOperCommand>
 8006f26:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f32:	e02d      	b.n	8006f90 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f002 fc1d 	bl	800977a <SDMMC_GetResponse>
 8006f40:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	0fdb      	lsrs	r3, r3, #31
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <SD_PowerON+0xce>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <SD_PowerON+0xd0>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	613b      	str	r3, [r7, #16]

    count++;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	3301      	adds	r3, #1
 8006f56:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d802      	bhi.n	8006f68 <SD_PowerON+0xe8>
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0cc      	beq.n	8006f02 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d902      	bls.n	8006f78 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f76:	e00b      	b.n	8006f90 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	c1100000 	.word	0xc1100000

08006f9c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08c      	sub	sp, #48	; 0x30
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006fa6:	f7fa fd7d 	bl	8001aa4 <HAL_GetTick>
 8006faa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f002 fbdf 	bl	800977a <SDMMC_GetResponse>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fc6:	d102      	bne.n	8006fce <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006fc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fcc:	e0b0      	b.n	8007130 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2140      	movs	r1, #64	; 0x40
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f002 fc0f 	bl	80097f8 <SDMMC_CmdBlockLength>
 8006fda:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	e0a0      	b.n	8007130 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff6:	041b      	lsls	r3, r3, #16
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	f002 fd49 	bl	8009a92 <SDMMC_CmdAppCommand>
 8007000:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d005      	beq.n	8007014 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	e08d      	b.n	8007130 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007014:	f04f 33ff 	mov.w	r3, #4294967295
 8007018:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800701a:	2340      	movs	r3, #64	; 0x40
 800701c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800701e:	2360      	movs	r3, #96	; 0x60
 8007020:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007022:	2302      	movs	r3, #2
 8007024:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007026:	2300      	movs	r3, #0
 8007028:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800702a:	2301      	movs	r3, #1
 800702c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f107 0208 	add.w	r2, r7, #8
 8007036:	4611      	mov	r1, r2
 8007038:	4618      	mov	r0, r3
 800703a:	f002 fbb1 	bl	80097a0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f002 fe31 	bl	8009caa <SDMMC_CmdStatusRegister>
 8007048:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d02b      	beq.n	80070a8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	e069      	b.n	8007130 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d013      	beq.n	8007092 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800706a:	2300      	movs	r3, #0
 800706c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800706e:	e00d      	b.n	800708c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f002 fb0b 	bl	8009690 <SDMMC_ReadFIFO>
 800707a:	4602      	mov	r2, r0
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	601a      	str	r2, [r3, #0]
        pData++;
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	3304      	adds	r3, #4
 8007084:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007088:	3301      	adds	r3, #1
 800708a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800708c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708e:	2b07      	cmp	r3, #7
 8007090:	d9ee      	bls.n	8007070 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007092:	f7fa fd07 	bl	8001aa4 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d102      	bne.n	80070a8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80070a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070a6:	e043      	b.n	8007130 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ae:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0d2      	beq.n	800705c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070bc:	f003 0308 	and.w	r3, r3, #8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80070c4:	2308      	movs	r3, #8
 80070c6:	e033      	b.n	8007130 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80070d6:	2302      	movs	r3, #2
 80070d8:	e02a      	b.n	8007130 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e0:	f003 0320 	and.w	r3, r3, #32
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d017      	beq.n	8007118 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80070e8:	2320      	movs	r3, #32
 80070ea:	e021      	b.n	8007130 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f002 facd 	bl	8009690 <SDMMC_ReadFIFO>
 80070f6:	4602      	mov	r2, r0
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	601a      	str	r2, [r3, #0]
    pData++;
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	3304      	adds	r3, #4
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007102:	f7fa fccf 	bl	8001aa4 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d102      	bne.n	8007118 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007112:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007116:	e00b      	b.n	8007130 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e2      	bne.n	80070ec <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a03      	ldr	r2, [pc, #12]	; (8007138 <SD_SendSDStatus+0x19c>)
 800712c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3730      	adds	r7, #48	; 0x30
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	18000f3a 	.word	0x18000f3a

0800713c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d102      	bne.n	8007152 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800714c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007150:	e018      	b.n	8007184 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715a:	041b      	lsls	r3, r3, #16
 800715c:	4619      	mov	r1, r3
 800715e:	4610      	mov	r0, r2
 8007160:	f002 fd80 	bl	8009c64 <SDMMC_CmdSendStatus>
 8007164:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <SD_SendStatus+0x34>
  {
    return errorstate;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	e009      	b.n	8007184 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2100      	movs	r1, #0
 8007176:	4618      	mov	r0, r3
 8007178:	f002 faff 	bl	800977a <SDMMC_GetResponse>
 800717c:	4602      	mov	r2, r0
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007194:	2300      	movs	r3, #0
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	2300      	movs	r3, #0
 800719a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2100      	movs	r1, #0
 80071a2:	4618      	mov	r0, r3
 80071a4:	f002 fae9 	bl	800977a <SDMMC_GetResponse>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071b2:	d102      	bne.n	80071ba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80071b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071b8:	e02f      	b.n	800721a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80071ba:	f107 030c 	add.w	r3, r7, #12
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f879 	bl	80072b8 <SD_FindSCR>
 80071c6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	e023      	b.n	800721a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d01c      	beq.n	8007216 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e4:	041b      	lsls	r3, r3, #16
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f002 fc52 	bl	8009a92 <SDMMC_CmdAppCommand>
 80071ee:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	e00f      	b.n	800721a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2102      	movs	r1, #2
 8007200:	4618      	mov	r0, r3
 8007202:	f002 fc89 	bl	8009b18 <SDMMC_CmdBusWidth>
 8007206:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	e003      	b.n	800721a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007212:	2300      	movs	r3, #0
 8007214:	e001      	b.n	800721a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007216:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b086      	sub	sp, #24
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	2300      	movs	r3, #0
 8007230:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2100      	movs	r1, #0
 8007238:	4618      	mov	r0, r3
 800723a:	f002 fa9e 	bl	800977a <SDMMC_GetResponse>
 800723e:	4603      	mov	r3, r0
 8007240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007248:	d102      	bne.n	8007250 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800724a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800724e:	e02f      	b.n	80072b0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007250:	f107 030c 	add.w	r3, r7, #12
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f82e 	bl	80072b8 <SD_FindSCR>
 800725c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	e023      	b.n	80072b0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d01c      	beq.n	80072ac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727a:	041b      	lsls	r3, r3, #16
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f002 fc07 	bl	8009a92 <SDMMC_CmdAppCommand>
 8007284:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	e00f      	b.n	80072b0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2100      	movs	r1, #0
 8007296:	4618      	mov	r0, r3
 8007298:	f002 fc3e 	bl	8009b18 <SDMMC_CmdBusWidth>
 800729c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	e003      	b.n	80072b0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80072a8:	2300      	movs	r3, #0
 80072aa:	e001      	b.n	80072b0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08e      	sub	sp, #56	; 0x38
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80072c2:	f7fa fbef 	bl	8001aa4 <HAL_GetTick>
 80072c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80072cc:	2300      	movs	r3, #0
 80072ce:	60bb      	str	r3, [r7, #8]
 80072d0:	2300      	movs	r3, #0
 80072d2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2108      	movs	r1, #8
 80072de:	4618      	mov	r0, r3
 80072e0:	f002 fa8a 	bl	80097f8 <SDMMC_CmdBlockLength>
 80072e4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80072ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ee:	e0ad      	b.n	800744c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f8:	041b      	lsls	r3, r3, #16
 80072fa:	4619      	mov	r1, r3
 80072fc:	4610      	mov	r0, r2
 80072fe:	f002 fbc8 	bl	8009a92 <SDMMC_CmdAppCommand>
 8007302:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <SD_FindSCR+0x56>
  {
    return errorstate;
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	e09e      	b.n	800744c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800730e:	f04f 33ff 	mov.w	r3, #4294967295
 8007312:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007314:	2308      	movs	r3, #8
 8007316:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007318:	2330      	movs	r3, #48	; 0x30
 800731a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800731c:	2302      	movs	r3, #2
 800731e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007320:	2300      	movs	r3, #0
 8007322:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007324:	2301      	movs	r3, #1
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f107 0210 	add.w	r2, r7, #16
 8007330:	4611      	mov	r1, r2
 8007332:	4618      	mov	r0, r3
 8007334:	f002 fa34 	bl	80097a0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4618      	mov	r0, r3
 800733e:	f002 fc0e 	bl	8009b5e <SDMMC_CmdSendSCR>
 8007342:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	2b00      	cmp	r3, #0
 8007348:	d027      	beq.n	800739a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	e07e      	b.n	800744c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d113      	bne.n	8007384 <SD_FindSCR+0xcc>
 800735c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735e:	2b00      	cmp	r3, #0
 8007360:	d110      	bne.n	8007384 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f002 f992 	bl	8009690 <SDMMC_ReadFIFO>
 800736c:	4603      	mov	r3, r0
 800736e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4618      	mov	r0, r3
 8007376:	f002 f98b 	bl	8009690 <SDMMC_ReadFIFO>
 800737a:	4603      	mov	r3, r0
 800737c:	60fb      	str	r3, [r7, #12]
      index++;
 800737e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007380:	3301      	adds	r3, #1
 8007382:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007384:	f7fa fb8e 	bl	8001aa4 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007392:	d102      	bne.n	800739a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007394:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007398:	e058      	b.n	800744c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073a0:	f240 532a 	movw	r3, #1322	; 0x52a
 80073a4:	4013      	ands	r3, r2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0d1      	beq.n	800734e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d005      	beq.n	80073c4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2208      	movs	r2, #8
 80073be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80073c0:	2308      	movs	r3, #8
 80073c2:	e043      	b.n	800744c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2202      	movs	r2, #2
 80073d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80073da:	2302      	movs	r3, #2
 80073dc:	e036      	b.n	800744c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2220      	movs	r2, #32
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80073f4:	2320      	movs	r3, #32
 80073f6:	e029      	b.n	800744c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a15      	ldr	r2, [pc, #84]	; (8007454 <SD_FindSCR+0x19c>)
 80073fe:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	061a      	lsls	r2, r3, #24
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800740c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	0a1b      	lsrs	r3, r3, #8
 8007412:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007416:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	0e1b      	lsrs	r3, r3, #24
 800741c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	601a      	str	r2, [r3, #0]
    scr++;
 8007422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007424:	3304      	adds	r3, #4
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	061a      	lsls	r2, r3, #24
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	021b      	lsls	r3, r3, #8
 8007430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007434:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	0a1b      	lsrs	r3, r3, #8
 800743a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800743e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	0e1b      	lsrs	r3, r3, #24
 8007444:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3738      	adds	r7, #56	; 0x38
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	18000f3a 	.word	0x18000f3a

08007458 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746a:	2b1f      	cmp	r3, #31
 800746c:	d936      	bls.n	80074dc <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	e027      	b.n	80074c4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4618      	mov	r0, r3
 800747a:	f002 f909 	bl	8009690 <SDMMC_ReadFIFO>
 800747e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	b2da      	uxtb	r2, r3
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	3301      	adds	r3, #1
 800748c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	0a1b      	lsrs	r3, r3, #8
 8007492:	b2da      	uxtb	r2, r3
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	3301      	adds	r3, #1
 800749c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	0c1b      	lsrs	r3, r3, #16
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	3301      	adds	r3, #1
 80074ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	0e1b      	lsrs	r3, r3, #24
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	3301      	adds	r3, #1
 80074bc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	3301      	adds	r3, #1
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2b07      	cmp	r3, #7
 80074c8:	d9d4      	bls.n	8007474 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d4:	f1a3 0220 	sub.w	r2, r3, #32
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80074dc:	bf00      	nop
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	2b1f      	cmp	r3, #31
 80074f8:	d93a      	bls.n	8007570 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80074fa:	2300      	movs	r3, #0
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	e02b      	b.n	8007558 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	3301      	adds	r3, #1
 800750a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	021a      	lsls	r2, r3, #8
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	3301      	adds	r3, #1
 800751c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	041a      	lsls	r2, r3, #16
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]
      tmp++;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	3301      	adds	r3, #1
 800752e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	061a      	lsls	r2, r3, #24
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	3301      	adds	r3, #1
 8007540:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f107 020c 	add.w	r2, r7, #12
 800754a:	4611      	mov	r1, r2
 800754c:	4618      	mov	r0, r3
 800754e:	f002 f8ac 	bl	80096aa <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	3301      	adds	r3, #1
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	2b07      	cmp	r3, #7
 800755c:	d9d0      	bls.n	8007500 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	f1a3 0220 	sub.w	r2, r3, #32
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	621a      	str	r2, [r3, #32]
  }
}
 8007570:	bf00      	nop
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e049      	b.n	800766e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fa f8a6 	bl	8001740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3304      	adds	r3, #4
 8007604:	4619      	mov	r1, r3
 8007606:	4610      	mov	r0, r2
 8007608:	f000 fb4e 	bl	8007ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b01      	cmp	r3, #1
 800768a:	d001      	beq.n	8007690 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e04c      	b.n	800772a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a26      	ldr	r2, [pc, #152]	; (8007738 <HAL_TIM_Base_Start+0xc0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d022      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076aa:	d01d      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a22      	ldr	r2, [pc, #136]	; (800773c <HAL_TIM_Base_Start+0xc4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d018      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a21      	ldr	r2, [pc, #132]	; (8007740 <HAL_TIM_Base_Start+0xc8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d013      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1f      	ldr	r2, [pc, #124]	; (8007744 <HAL_TIM_Base_Start+0xcc>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00e      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a1e      	ldr	r2, [pc, #120]	; (8007748 <HAL_TIM_Base_Start+0xd0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d009      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a1c      	ldr	r2, [pc, #112]	; (800774c <HAL_TIM_Base_Start+0xd4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a1b      	ldr	r2, [pc, #108]	; (8007750 <HAL_TIM_Base_Start+0xd8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d115      	bne.n	8007714 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	4b19      	ldr	r3, [pc, #100]	; (8007754 <HAL_TIM_Base_Start+0xdc>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b06      	cmp	r3, #6
 80076f8:	d015      	beq.n	8007726 <HAL_TIM_Base_Start+0xae>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007700:	d011      	beq.n	8007726 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f042 0201 	orr.w	r2, r2, #1
 8007710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007712:	e008      	b.n	8007726 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0201 	orr.w	r2, r2, #1
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	e000      	b.n	8007728 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007726:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40010000 	.word	0x40010000
 800773c:	40000400 	.word	0x40000400
 8007740:	40000800 	.word	0x40000800
 8007744:	40000c00 	.word	0x40000c00
 8007748:	40010400 	.word	0x40010400
 800774c:	40001800 	.word	0x40001800
 8007750:	40014000 	.word	0x40014000
 8007754:	00010007 	.word	0x00010007

08007758 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6a1a      	ldr	r2, [r3, #32]
 8007766:	f241 1311 	movw	r3, #4369	; 0x1111
 800776a:	4013      	ands	r3, r2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10f      	bne.n	8007790 <HAL_TIM_Base_Stop+0x38>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6a1a      	ldr	r2, [r3, #32]
 8007776:	f240 4344 	movw	r3, #1092	; 0x444
 800777a:	4013      	ands	r3, r2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d107      	bne.n	8007790 <HAL_TIM_Base_Stop+0x38>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0201 	bic.w	r2, r2, #1
 800778e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b082      	sub	sp, #8
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d122      	bne.n	8007802 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d11b      	bne.n	8007802 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f06f 0202 	mvn.w	r2, #2
 80077d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	f003 0303 	and.w	r3, r3, #3
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fa49 	bl	8007c80 <HAL_TIM_IC_CaptureCallback>
 80077ee:	e005      	b.n	80077fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fa3b 	bl	8007c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fa4c 	bl	8007c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b04      	cmp	r3, #4
 800780e:	d122      	bne.n	8007856 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f003 0304 	and.w	r3, r3, #4
 800781a:	2b04      	cmp	r3, #4
 800781c:	d11b      	bne.n	8007856 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f06f 0204 	mvn.w	r2, #4
 8007826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fa1f 	bl	8007c80 <HAL_TIM_IC_CaptureCallback>
 8007842:	e005      	b.n	8007850 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fa11 	bl	8007c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fa22 	bl	8007c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b08      	cmp	r3, #8
 8007862:	d122      	bne.n	80078aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	2b08      	cmp	r3, #8
 8007870:	d11b      	bne.n	80078aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f06f 0208 	mvn.w	r2, #8
 800787a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2204      	movs	r2, #4
 8007880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f9f5 	bl	8007c80 <HAL_TIM_IC_CaptureCallback>
 8007896:	e005      	b.n	80078a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f9e7 	bl	8007c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f9f8 	bl	8007c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	f003 0310 	and.w	r3, r3, #16
 80078b4:	2b10      	cmp	r3, #16
 80078b6:	d122      	bne.n	80078fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f003 0310 	and.w	r3, r3, #16
 80078c2:	2b10      	cmp	r3, #16
 80078c4:	d11b      	bne.n	80078fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f06f 0210 	mvn.w	r2, #16
 80078ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2208      	movs	r2, #8
 80078d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f9cb 	bl	8007c80 <HAL_TIM_IC_CaptureCallback>
 80078ea:	e005      	b.n	80078f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f9bd 	bl	8007c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f9ce 	bl	8007c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b01      	cmp	r3, #1
 800790a:	d10e      	bne.n	800792a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b01      	cmp	r3, #1
 8007918:	d107      	bne.n	800792a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f06f 0201 	mvn.w	r2, #1
 8007922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f997 	bl	8007c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007934:	2b80      	cmp	r3, #128	; 0x80
 8007936:	d10e      	bne.n	8007956 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007942:	2b80      	cmp	r3, #128	; 0x80
 8007944:	d107      	bne.n	8007956 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800794e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fc63 	bl	800821c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007964:	d10e      	bne.n	8007984 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007970:	2b80      	cmp	r3, #128	; 0x80
 8007972:	d107      	bne.n	8007984 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800797c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fc56 	bl	8008230 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798e:	2b40      	cmp	r3, #64	; 0x40
 8007990:	d10e      	bne.n	80079b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799c:	2b40      	cmp	r3, #64	; 0x40
 800799e:	d107      	bne.n	80079b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7f9 faa4 	bl	8000ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	f003 0320 	and.w	r3, r3, #32
 80079ba:	2b20      	cmp	r3, #32
 80079bc:	d10e      	bne.n	80079dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d107      	bne.n	80079dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f06f 0220 	mvn.w	r2, #32
 80079d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fc16 	bl	8008208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d101      	bne.n	8007a00 <HAL_TIM_ConfigClockSource+0x1c>
 80079fc:	2302      	movs	r3, #2
 80079fe:	e0dc      	b.n	8007bba <HAL_TIM_ConfigClockSource+0x1d6>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	4b6a      	ldr	r3, [pc, #424]	; (8007bc4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a64      	ldr	r2, [pc, #400]	; (8007bc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	f000 80a9 	beq.w	8007b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8007a3c:	4a62      	ldr	r2, [pc, #392]	; (8007bc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	f200 80ae 	bhi.w	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a44:	4a61      	ldr	r2, [pc, #388]	; (8007bcc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	f000 80a1 	beq.w	8007b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8007a4c:	4a5f      	ldr	r2, [pc, #380]	; (8007bcc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	f200 80a6 	bhi.w	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a54:	4a5e      	ldr	r2, [pc, #376]	; (8007bd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	f000 8099 	beq.w	8007b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8007a5c:	4a5c      	ldr	r2, [pc, #368]	; (8007bd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	f200 809e 	bhi.w	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007a68:	f000 8091 	beq.w	8007b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8007a6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007a70:	f200 8096 	bhi.w	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a78:	f000 8089 	beq.w	8007b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8007a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a80:	f200 808e 	bhi.w	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a88:	d03e      	beq.n	8007b08 <HAL_TIM_ConfigClockSource+0x124>
 8007a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a8e:	f200 8087 	bhi.w	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a96:	f000 8086 	beq.w	8007ba6 <HAL_TIM_ConfigClockSource+0x1c2>
 8007a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a9e:	d87f      	bhi.n	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007aa0:	2b70      	cmp	r3, #112	; 0x70
 8007aa2:	d01a      	beq.n	8007ada <HAL_TIM_ConfigClockSource+0xf6>
 8007aa4:	2b70      	cmp	r3, #112	; 0x70
 8007aa6:	d87b      	bhi.n	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007aa8:	2b60      	cmp	r3, #96	; 0x60
 8007aaa:	d050      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0x16a>
 8007aac:	2b60      	cmp	r3, #96	; 0x60
 8007aae:	d877      	bhi.n	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ab0:	2b50      	cmp	r3, #80	; 0x50
 8007ab2:	d03c      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0x14a>
 8007ab4:	2b50      	cmp	r3, #80	; 0x50
 8007ab6:	d873      	bhi.n	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ab8:	2b40      	cmp	r3, #64	; 0x40
 8007aba:	d058      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0x18a>
 8007abc:	2b40      	cmp	r3, #64	; 0x40
 8007abe:	d86f      	bhi.n	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ac0:	2b30      	cmp	r3, #48	; 0x30
 8007ac2:	d064      	beq.n	8007b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8007ac4:	2b30      	cmp	r3, #48	; 0x30
 8007ac6:	d86b      	bhi.n	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d060      	beq.n	8007b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	d867      	bhi.n	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d05c      	beq.n	8007b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8007ad4:	2b10      	cmp	r3, #16
 8007ad6:	d05a      	beq.n	8007b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8007ad8:	e062      	b.n	8007ba0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	6899      	ldr	r1, [r3, #8]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f000 fadf 	bl	80080ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	609a      	str	r2, [r3, #8]
      break;
 8007b06:	e04f      	b.n	8007ba8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6818      	ldr	r0, [r3, #0]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	6899      	ldr	r1, [r3, #8]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f000 fac8 	bl	80080ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b2a:	609a      	str	r2, [r3, #8]
      break;
 8007b2c:	e03c      	b.n	8007ba8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	6859      	ldr	r1, [r3, #4]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f000 fa38 	bl	8007fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2150      	movs	r1, #80	; 0x50
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fa92 	bl	8008070 <TIM_ITRx_SetConfig>
      break;
 8007b4c:	e02c      	b.n	8007ba8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	6859      	ldr	r1, [r3, #4]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f000 fa57 	bl	800800e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2160      	movs	r1, #96	; 0x60
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 fa82 	bl	8008070 <TIM_ITRx_SetConfig>
      break;
 8007b6c:	e01c      	b.n	8007ba8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6818      	ldr	r0, [r3, #0]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	6859      	ldr	r1, [r3, #4]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f000 fa18 	bl	8007fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2140      	movs	r1, #64	; 0x40
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 fa72 	bl	8008070 <TIM_ITRx_SetConfig>
      break;
 8007b8c:	e00c      	b.n	8007ba8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4619      	mov	r1, r3
 8007b98:	4610      	mov	r0, r2
 8007b9a:	f000 fa69 	bl	8008070 <TIM_ITRx_SetConfig>
      break;
 8007b9e:	e003      	b.n	8007ba8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba4:	e000      	b.n	8007ba8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	ffceff88 	.word	0xffceff88
 8007bc8:	00100040 	.word	0x00100040
 8007bcc:	00100030 	.word	0x00100030
 8007bd0:	00100020 	.word	0x00100020

08007bd4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d101      	bne.n	8007bec <HAL_TIM_SlaveConfigSynchro+0x18>
 8007be8:	2302      	movs	r3, #2
 8007bea:	e031      	b.n	8007c50 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f8ec 	bl	8007ddc <TIM_SlaveTimer_SetConfig>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d009      	beq.n	8007c1e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e018      	b.n	8007c50 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68da      	ldr	r2, [r3, #12]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c2c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68da      	ldr	r2, [r3, #12]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c3c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a40      	ldr	r2, [pc, #256]	; (8007dbc <TIM_Base_SetConfig+0x114>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d013      	beq.n	8007ce8 <TIM_Base_SetConfig+0x40>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc6:	d00f      	beq.n	8007ce8 <TIM_Base_SetConfig+0x40>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a3d      	ldr	r2, [pc, #244]	; (8007dc0 <TIM_Base_SetConfig+0x118>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00b      	beq.n	8007ce8 <TIM_Base_SetConfig+0x40>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a3c      	ldr	r2, [pc, #240]	; (8007dc4 <TIM_Base_SetConfig+0x11c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d007      	beq.n	8007ce8 <TIM_Base_SetConfig+0x40>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a3b      	ldr	r2, [pc, #236]	; (8007dc8 <TIM_Base_SetConfig+0x120>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d003      	beq.n	8007ce8 <TIM_Base_SetConfig+0x40>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a3a      	ldr	r2, [pc, #232]	; (8007dcc <TIM_Base_SetConfig+0x124>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d108      	bne.n	8007cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a2f      	ldr	r2, [pc, #188]	; (8007dbc <TIM_Base_SetConfig+0x114>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d01f      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d08:	d01b      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a2c      	ldr	r2, [pc, #176]	; (8007dc0 <TIM_Base_SetConfig+0x118>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d017      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a2b      	ldr	r2, [pc, #172]	; (8007dc4 <TIM_Base_SetConfig+0x11c>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d013      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a2a      	ldr	r2, [pc, #168]	; (8007dc8 <TIM_Base_SetConfig+0x120>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d00f      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a29      	ldr	r2, [pc, #164]	; (8007dcc <TIM_Base_SetConfig+0x124>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00b      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a28      	ldr	r2, [pc, #160]	; (8007dd0 <TIM_Base_SetConfig+0x128>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d007      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a27      	ldr	r2, [pc, #156]	; (8007dd4 <TIM_Base_SetConfig+0x12c>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d003      	beq.n	8007d42 <TIM_Base_SetConfig+0x9a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a26      	ldr	r2, [pc, #152]	; (8007dd8 <TIM_Base_SetConfig+0x130>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d108      	bne.n	8007d54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a10      	ldr	r2, [pc, #64]	; (8007dbc <TIM_Base_SetConfig+0x114>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00f      	beq.n	8007da0 <TIM_Base_SetConfig+0xf8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a12      	ldr	r2, [pc, #72]	; (8007dcc <TIM_Base_SetConfig+0x124>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d00b      	beq.n	8007da0 <TIM_Base_SetConfig+0xf8>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a11      	ldr	r2, [pc, #68]	; (8007dd0 <TIM_Base_SetConfig+0x128>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d007      	beq.n	8007da0 <TIM_Base_SetConfig+0xf8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a10      	ldr	r2, [pc, #64]	; (8007dd4 <TIM_Base_SetConfig+0x12c>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d003      	beq.n	8007da0 <TIM_Base_SetConfig+0xf8>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a0f      	ldr	r2, [pc, #60]	; (8007dd8 <TIM_Base_SetConfig+0x130>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d103      	bne.n	8007da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	691a      	ldr	r2, [r3, #16]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	615a      	str	r2, [r3, #20]
}
 8007dae:	bf00      	nop
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	40010000 	.word	0x40010000
 8007dc0:	40000400 	.word	0x40000400
 8007dc4:	40000800 	.word	0x40000800
 8007dc8:	40000c00 	.word	0x40000c00
 8007dcc:	40010400 	.word	0x40010400
 8007dd0:	40014000 	.word	0x40014000
 8007dd4:	40014400 	.word	0x40014400
 8007dd8:	40014800 	.word	0x40014800

08007ddc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	4b65      	ldr	r3, [pc, #404]	; (8007f8c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8007df6:	4013      	ands	r3, r2
 8007df8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	4b62      	ldr	r3, [pc, #392]	; (8007f90 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	4a5c      	ldr	r2, [pc, #368]	; (8007f94 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	f000 80ab 	beq.w	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007e2a:	4a5a      	ldr	r2, [pc, #360]	; (8007f94 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	f200 80a4 	bhi.w	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007e32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e36:	f000 80a3 	beq.w	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e3e:	f200 809c 	bhi.w	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007e42:	4a55      	ldr	r2, [pc, #340]	; (8007f98 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	f000 809b 	beq.w	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007e4a:	4a53      	ldr	r2, [pc, #332]	; (8007f98 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	f200 8094 	bhi.w	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007e52:	4a52      	ldr	r2, [pc, #328]	; (8007f9c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	f000 8093 	beq.w	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007e5a:	4a50      	ldr	r2, [pc, #320]	; (8007f9c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	f200 808c 	bhi.w	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007e62:	4a4f      	ldr	r2, [pc, #316]	; (8007fa0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	f000 808b 	beq.w	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007e6a:	4a4d      	ldr	r2, [pc, #308]	; (8007fa0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	f200 8084 	bhi.w	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007e72:	4a4c      	ldr	r2, [pc, #304]	; (8007fa4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	f000 8083 	beq.w	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007e7a:	4a4a      	ldr	r2, [pc, #296]	; (8007fa4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d87c      	bhi.n	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007e80:	4a49      	ldr	r2, [pc, #292]	; (8007fa8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d07c      	beq.n	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007e86:	4a48      	ldr	r2, [pc, #288]	; (8007fa8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d876      	bhi.n	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007e8c:	4a47      	ldr	r2, [pc, #284]	; (8007fac <TIM_SlaveTimer_SetConfig+0x1d0>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d076      	beq.n	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007e92:	4a46      	ldr	r2, [pc, #280]	; (8007fac <TIM_SlaveTimer_SetConfig+0x1d0>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d870      	bhi.n	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007e98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007e9c:	d070      	beq.n	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007e9e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ea2:	d86a      	bhi.n	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ea8:	d06a      	beq.n	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eae:	d864      	bhi.n	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007eb0:	2b70      	cmp	r3, #112	; 0x70
 8007eb2:	d01a      	beq.n	8007eea <TIM_SlaveTimer_SetConfig+0x10e>
 8007eb4:	2b70      	cmp	r3, #112	; 0x70
 8007eb6:	d860      	bhi.n	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007eb8:	2b60      	cmp	r3, #96	; 0x60
 8007eba:	d054      	beq.n	8007f66 <TIM_SlaveTimer_SetConfig+0x18a>
 8007ebc:	2b60      	cmp	r3, #96	; 0x60
 8007ebe:	d85c      	bhi.n	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007ec0:	2b50      	cmp	r3, #80	; 0x50
 8007ec2:	d046      	beq.n	8007f52 <TIM_SlaveTimer_SetConfig+0x176>
 8007ec4:	2b50      	cmp	r3, #80	; 0x50
 8007ec6:	d858      	bhi.n	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007ec8:	2b40      	cmp	r3, #64	; 0x40
 8007eca:	d019      	beq.n	8007f00 <TIM_SlaveTimer_SetConfig+0x124>
 8007ecc:	2b40      	cmp	r3, #64	; 0x40
 8007ece:	d854      	bhi.n	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007ed0:	2b30      	cmp	r3, #48	; 0x30
 8007ed2:	d055      	beq.n	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007ed4:	2b30      	cmp	r3, #48	; 0x30
 8007ed6:	d850      	bhi.n	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007ed8:	2b20      	cmp	r3, #32
 8007eda:	d051      	beq.n	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007edc:	2b20      	cmp	r3, #32
 8007ede:	d84c      	bhi.n	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d04d      	beq.n	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007ee4:	2b10      	cmp	r3, #16
 8007ee6:	d04b      	beq.n	8007f80 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007ee8:	e047      	b.n	8007f7a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6818      	ldr	r0, [r3, #0]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	68d9      	ldr	r1, [r3, #12]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	689a      	ldr	r2, [r3, #8]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f000 f8d7 	bl	80080ac <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007efe:	e040      	b.n	8007f82 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b05      	cmp	r3, #5
 8007f06:	d101      	bne.n	8007f0c <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e03b      	b.n	8007f84 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6a1a      	ldr	r2, [r3, #32]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0201 	bic.w	r2, r2, #1
 8007f22:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f32:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	011b      	lsls	r3, r3, #4
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	621a      	str	r2, [r3, #32]
      break;
 8007f50:	e017      	b.n	8007f82 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6899      	ldr	r1, [r3, #8]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f000 f826 	bl	8007fb0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007f64:	e00d      	b.n	8007f82 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6899      	ldr	r1, [r3, #8]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f000 f84b 	bl	800800e <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007f78:	e003      	b.n	8007f82 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f7e:	e000      	b.n	8007f82 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8007f80:	bf00      	nop
  }

  return status;
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	ffcfff8f 	.word	0xffcfff8f
 8007f90:	fffefff8 	.word	0xfffefff8
 8007f94:	00200010 	.word	0x00200010
 8007f98:	00100070 	.word	0x00100070
 8007f9c:	00100060 	.word	0x00100060
 8007fa0:	00100050 	.word	0x00100050
 8007fa4:	00100040 	.word	0x00100040
 8007fa8:	00100030 	.word	0x00100030
 8007fac:	00100020 	.word	0x00100020

08007fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f023 0201 	bic.w	r2, r3, #1
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f023 030a 	bic.w	r3, r3, #10
 8007fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	621a      	str	r2, [r3, #32]
}
 8008002:	bf00      	nop
 8008004:	371c      	adds	r7, #28
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800800e:	b480      	push	{r7}
 8008010:	b087      	sub	sp, #28
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	f023 0210 	bic.w	r2, r3, #16
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	031b      	lsls	r3, r3, #12
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800804a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	621a      	str	r2, [r3, #32]
}
 8008062:	bf00      	nop
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
	...

08008070 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	4b09      	ldr	r3, [pc, #36]	; (80080a8 <TIM_ITRx_SetConfig+0x38>)
 8008084:	4013      	ands	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	4313      	orrs	r3, r2
 800808e:	f043 0307 	orr.w	r3, r3, #7
 8008092:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	609a      	str	r2, [r3, #8]
}
 800809a:	bf00      	nop
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	ffcfff8f 	.word	0xffcfff8f

080080ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
 80080b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	021a      	lsls	r2, r3, #8
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	431a      	orrs	r2, r3
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	609a      	str	r2, [r3, #8]
}
 80080e0:	bf00      	nop
 80080e2:	371c      	adds	r7, #28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d101      	bne.n	8008104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008100:	2302      	movs	r3, #2
 8008102:	e06d      	b.n	80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a30      	ldr	r2, [pc, #192]	; (80081ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a2f      	ldr	r2, [pc, #188]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d108      	bne.n	800814a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800813e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	4313      	orrs	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008150:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4313      	orrs	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a20      	ldr	r2, [pc, #128]	; (80081ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d022      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008176:	d01d      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a1d      	ldr	r2, [pc, #116]	; (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d018      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a1c      	ldr	r2, [pc, #112]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d013      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1a      	ldr	r2, [pc, #104]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00e      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a15      	ldr	r2, [pc, #84]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d009      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a16      	ldr	r2, [pc, #88]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a15      	ldr	r2, [pc, #84]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d10c      	bne.n	80081ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	40010000 	.word	0x40010000
 80081f0:	40010400 	.word	0x40010400
 80081f4:	40000400 	.word	0x40000400
 80081f8:	40000800 	.word	0x40000800
 80081fc:	40000c00 	.word	0x40000c00
 8008200:	40001800 	.word	0x40001800
 8008204:	40014000 	.word	0x40014000

08008208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e042      	b.n	80082dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800825c:	2b00      	cmp	r3, #0
 800825e:	d106      	bne.n	800826e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7f9 fafd 	bl	8001868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2224      	movs	r2, #36	; 0x24
 8008272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f022 0201 	bic.w	r2, r2, #1
 8008284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f8c2 	bl	8008410 <UART_SetConfig>
 800828c:	4603      	mov	r3, r0
 800828e:	2b01      	cmp	r3, #1
 8008290:	d101      	bne.n	8008296 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e022      	b.n	80082dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 ff14 	bl	80090cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 0201 	orr.w	r2, r2, #1
 80082d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 ff9b 	bl	8009210 <UART_CheckIdleState>
 80082da:	4603      	mov	r3, r0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b08a      	sub	sp, #40	; 0x28
 80082e8:	af02      	add	r7, sp, #8
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	603b      	str	r3, [r7, #0]
 80082f0:	4613      	mov	r3, r2
 80082f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	f040 8083 	bne.w	8008406 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d002      	beq.n	800830c <HAL_UART_Transmit+0x28>
 8008306:	88fb      	ldrh	r3, [r7, #6]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e07b      	b.n	8008408 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008316:	2b01      	cmp	r3, #1
 8008318:	d101      	bne.n	800831e <HAL_UART_Transmit+0x3a>
 800831a:	2302      	movs	r3, #2
 800831c:	e074      	b.n	8008408 <HAL_UART_Transmit+0x124>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2221      	movs	r2, #33	; 0x21
 8008332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008336:	f7f9 fbb5 	bl	8001aa4 <HAL_GetTick>
 800833a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	88fa      	ldrh	r2, [r7, #6]
 8008340:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	88fa      	ldrh	r2, [r7, #6]
 8008348:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008354:	d108      	bne.n	8008368 <HAL_UART_Transmit+0x84>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d104      	bne.n	8008368 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	61bb      	str	r3, [r7, #24]
 8008366:	e003      	b.n	8008370 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800836c:	2300      	movs	r3, #0
 800836e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008378:	e02c      	b.n	80083d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2200      	movs	r2, #0
 8008382:	2180      	movs	r1, #128	; 0x80
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 ff8e 	bl	80092a6 <UART_WaitOnFlagUntilTimeout>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e039      	b.n	8008408 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10b      	bne.n	80083b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	3302      	adds	r3, #2
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	e007      	b.n	80083c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	781a      	ldrb	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	3301      	adds	r3, #1
 80083c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	3b01      	subs	r3, #1
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083da:	b29b      	uxth	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1cc      	bne.n	800837a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2200      	movs	r2, #0
 80083e8:	2140      	movs	r1, #64	; 0x40
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 ff5b 	bl	80092a6 <UART_WaitOnFlagUntilTimeout>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e006      	b.n	8008408 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2220      	movs	r2, #32
 80083fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	e000      	b.n	8008408 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008406:	2302      	movs	r3, #2
  }
}
 8008408:	4618      	mov	r0, r3
 800840a:	3720      	adds	r7, #32
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008410:	b5b0      	push	{r4, r5, r7, lr}
 8008412:	b08e      	sub	sp, #56	; 0x38
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689a      	ldr	r2, [r3, #8]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	431a      	orrs	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	4313      	orrs	r3, r2
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4bbf      	ldr	r3, [pc, #764]	; (800873c <UART_SetConfig+0x32c>)
 800843e:	4013      	ands	r3, r2
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6812      	ldr	r2, [r2, #0]
 8008444:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008446:	430b      	orrs	r3, r1
 8008448:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	430a      	orrs	r2, r1
 800845e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4ab5      	ldr	r2, [pc, #724]	; (8008740 <UART_SetConfig+0x330>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d004      	beq.n	800847a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008476:	4313      	orrs	r3, r2
 8008478:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	4bb0      	ldr	r3, [pc, #704]	; (8008744 <UART_SetConfig+0x334>)
 8008482:	4013      	ands	r3, r2
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	6812      	ldr	r2, [r2, #0]
 8008488:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800848a:	430b      	orrs	r3, r1
 800848c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008494:	f023 010f 	bic.w	r1, r3, #15
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4aa7      	ldr	r2, [pc, #668]	; (8008748 <UART_SetConfig+0x338>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d176      	bne.n	800859c <UART_SetConfig+0x18c>
 80084ae:	4ba7      	ldr	r3, [pc, #668]	; (800874c <UART_SetConfig+0x33c>)
 80084b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084b6:	2b28      	cmp	r3, #40	; 0x28
 80084b8:	d86c      	bhi.n	8008594 <UART_SetConfig+0x184>
 80084ba:	a201      	add	r2, pc, #4	; (adr r2, 80084c0 <UART_SetConfig+0xb0>)
 80084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c0:	08008565 	.word	0x08008565
 80084c4:	08008595 	.word	0x08008595
 80084c8:	08008595 	.word	0x08008595
 80084cc:	08008595 	.word	0x08008595
 80084d0:	08008595 	.word	0x08008595
 80084d4:	08008595 	.word	0x08008595
 80084d8:	08008595 	.word	0x08008595
 80084dc:	08008595 	.word	0x08008595
 80084e0:	0800856d 	.word	0x0800856d
 80084e4:	08008595 	.word	0x08008595
 80084e8:	08008595 	.word	0x08008595
 80084ec:	08008595 	.word	0x08008595
 80084f0:	08008595 	.word	0x08008595
 80084f4:	08008595 	.word	0x08008595
 80084f8:	08008595 	.word	0x08008595
 80084fc:	08008595 	.word	0x08008595
 8008500:	08008575 	.word	0x08008575
 8008504:	08008595 	.word	0x08008595
 8008508:	08008595 	.word	0x08008595
 800850c:	08008595 	.word	0x08008595
 8008510:	08008595 	.word	0x08008595
 8008514:	08008595 	.word	0x08008595
 8008518:	08008595 	.word	0x08008595
 800851c:	08008595 	.word	0x08008595
 8008520:	0800857d 	.word	0x0800857d
 8008524:	08008595 	.word	0x08008595
 8008528:	08008595 	.word	0x08008595
 800852c:	08008595 	.word	0x08008595
 8008530:	08008595 	.word	0x08008595
 8008534:	08008595 	.word	0x08008595
 8008538:	08008595 	.word	0x08008595
 800853c:	08008595 	.word	0x08008595
 8008540:	08008585 	.word	0x08008585
 8008544:	08008595 	.word	0x08008595
 8008548:	08008595 	.word	0x08008595
 800854c:	08008595 	.word	0x08008595
 8008550:	08008595 	.word	0x08008595
 8008554:	08008595 	.word	0x08008595
 8008558:	08008595 	.word	0x08008595
 800855c:	08008595 	.word	0x08008595
 8008560:	0800858d 	.word	0x0800858d
 8008564:	2301      	movs	r3, #1
 8008566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800856a:	e326      	b.n	8008bba <UART_SetConfig+0x7aa>
 800856c:	2304      	movs	r3, #4
 800856e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008572:	e322      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008574:	2308      	movs	r3, #8
 8008576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800857a:	e31e      	b.n	8008bba <UART_SetConfig+0x7aa>
 800857c:	2310      	movs	r3, #16
 800857e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008582:	e31a      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008584:	2320      	movs	r3, #32
 8008586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800858a:	e316      	b.n	8008bba <UART_SetConfig+0x7aa>
 800858c:	2340      	movs	r3, #64	; 0x40
 800858e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008592:	e312      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008594:	2380      	movs	r3, #128	; 0x80
 8008596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800859a:	e30e      	b.n	8008bba <UART_SetConfig+0x7aa>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a6b      	ldr	r2, [pc, #428]	; (8008750 <UART_SetConfig+0x340>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d130      	bne.n	8008608 <UART_SetConfig+0x1f8>
 80085a6:	4b69      	ldr	r3, [pc, #420]	; (800874c <UART_SetConfig+0x33c>)
 80085a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	2b05      	cmp	r3, #5
 80085b0:	d826      	bhi.n	8008600 <UART_SetConfig+0x1f0>
 80085b2:	a201      	add	r2, pc, #4	; (adr r2, 80085b8 <UART_SetConfig+0x1a8>)
 80085b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b8:	080085d1 	.word	0x080085d1
 80085bc:	080085d9 	.word	0x080085d9
 80085c0:	080085e1 	.word	0x080085e1
 80085c4:	080085e9 	.word	0x080085e9
 80085c8:	080085f1 	.word	0x080085f1
 80085cc:	080085f9 	.word	0x080085f9
 80085d0:	2300      	movs	r3, #0
 80085d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085d6:	e2f0      	b.n	8008bba <UART_SetConfig+0x7aa>
 80085d8:	2304      	movs	r3, #4
 80085da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085de:	e2ec      	b.n	8008bba <UART_SetConfig+0x7aa>
 80085e0:	2308      	movs	r3, #8
 80085e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085e6:	e2e8      	b.n	8008bba <UART_SetConfig+0x7aa>
 80085e8:	2310      	movs	r3, #16
 80085ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ee:	e2e4      	b.n	8008bba <UART_SetConfig+0x7aa>
 80085f0:	2320      	movs	r3, #32
 80085f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085f6:	e2e0      	b.n	8008bba <UART_SetConfig+0x7aa>
 80085f8:	2340      	movs	r3, #64	; 0x40
 80085fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085fe:	e2dc      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008600:	2380      	movs	r3, #128	; 0x80
 8008602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008606:	e2d8      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a51      	ldr	r2, [pc, #324]	; (8008754 <UART_SetConfig+0x344>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d130      	bne.n	8008674 <UART_SetConfig+0x264>
 8008612:	4b4e      	ldr	r3, [pc, #312]	; (800874c <UART_SetConfig+0x33c>)
 8008614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	2b05      	cmp	r3, #5
 800861c:	d826      	bhi.n	800866c <UART_SetConfig+0x25c>
 800861e:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <UART_SetConfig+0x214>)
 8008620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008624:	0800863d 	.word	0x0800863d
 8008628:	08008645 	.word	0x08008645
 800862c:	0800864d 	.word	0x0800864d
 8008630:	08008655 	.word	0x08008655
 8008634:	0800865d 	.word	0x0800865d
 8008638:	08008665 	.word	0x08008665
 800863c:	2300      	movs	r3, #0
 800863e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008642:	e2ba      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008644:	2304      	movs	r3, #4
 8008646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800864a:	e2b6      	b.n	8008bba <UART_SetConfig+0x7aa>
 800864c:	2308      	movs	r3, #8
 800864e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008652:	e2b2      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008654:	2310      	movs	r3, #16
 8008656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800865a:	e2ae      	b.n	8008bba <UART_SetConfig+0x7aa>
 800865c:	2320      	movs	r3, #32
 800865e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008662:	e2aa      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008664:	2340      	movs	r3, #64	; 0x40
 8008666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800866a:	e2a6      	b.n	8008bba <UART_SetConfig+0x7aa>
 800866c:	2380      	movs	r3, #128	; 0x80
 800866e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008672:	e2a2      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a37      	ldr	r2, [pc, #220]	; (8008758 <UART_SetConfig+0x348>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d130      	bne.n	80086e0 <UART_SetConfig+0x2d0>
 800867e:	4b33      	ldr	r3, [pc, #204]	; (800874c <UART_SetConfig+0x33c>)
 8008680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	2b05      	cmp	r3, #5
 8008688:	d826      	bhi.n	80086d8 <UART_SetConfig+0x2c8>
 800868a:	a201      	add	r2, pc, #4	; (adr r2, 8008690 <UART_SetConfig+0x280>)
 800868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008690:	080086a9 	.word	0x080086a9
 8008694:	080086b1 	.word	0x080086b1
 8008698:	080086b9 	.word	0x080086b9
 800869c:	080086c1 	.word	0x080086c1
 80086a0:	080086c9 	.word	0x080086c9
 80086a4:	080086d1 	.word	0x080086d1
 80086a8:	2300      	movs	r3, #0
 80086aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ae:	e284      	b.n	8008bba <UART_SetConfig+0x7aa>
 80086b0:	2304      	movs	r3, #4
 80086b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086b6:	e280      	b.n	8008bba <UART_SetConfig+0x7aa>
 80086b8:	2308      	movs	r3, #8
 80086ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086be:	e27c      	b.n	8008bba <UART_SetConfig+0x7aa>
 80086c0:	2310      	movs	r3, #16
 80086c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086c6:	e278      	b.n	8008bba <UART_SetConfig+0x7aa>
 80086c8:	2320      	movs	r3, #32
 80086ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ce:	e274      	b.n	8008bba <UART_SetConfig+0x7aa>
 80086d0:	2340      	movs	r3, #64	; 0x40
 80086d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086d6:	e270      	b.n	8008bba <UART_SetConfig+0x7aa>
 80086d8:	2380      	movs	r3, #128	; 0x80
 80086da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086de:	e26c      	b.n	8008bba <UART_SetConfig+0x7aa>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a1d      	ldr	r2, [pc, #116]	; (800875c <UART_SetConfig+0x34c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d142      	bne.n	8008770 <UART_SetConfig+0x360>
 80086ea:	4b18      	ldr	r3, [pc, #96]	; (800874c <UART_SetConfig+0x33c>)
 80086ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ee:	f003 0307 	and.w	r3, r3, #7
 80086f2:	2b05      	cmp	r3, #5
 80086f4:	d838      	bhi.n	8008768 <UART_SetConfig+0x358>
 80086f6:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <UART_SetConfig+0x2ec>)
 80086f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fc:	08008715 	.word	0x08008715
 8008700:	0800871d 	.word	0x0800871d
 8008704:	08008725 	.word	0x08008725
 8008708:	0800872d 	.word	0x0800872d
 800870c:	08008735 	.word	0x08008735
 8008710:	08008761 	.word	0x08008761
 8008714:	2300      	movs	r3, #0
 8008716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800871a:	e24e      	b.n	8008bba <UART_SetConfig+0x7aa>
 800871c:	2304      	movs	r3, #4
 800871e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008722:	e24a      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008724:	2308      	movs	r3, #8
 8008726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800872a:	e246      	b.n	8008bba <UART_SetConfig+0x7aa>
 800872c:	2310      	movs	r3, #16
 800872e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008732:	e242      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008734:	2320      	movs	r3, #32
 8008736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800873a:	e23e      	b.n	8008bba <UART_SetConfig+0x7aa>
 800873c:	cfff69f3 	.word	0xcfff69f3
 8008740:	58000c00 	.word	0x58000c00
 8008744:	11fff4ff 	.word	0x11fff4ff
 8008748:	40011000 	.word	0x40011000
 800874c:	58024400 	.word	0x58024400
 8008750:	40004400 	.word	0x40004400
 8008754:	40004800 	.word	0x40004800
 8008758:	40004c00 	.word	0x40004c00
 800875c:	40005000 	.word	0x40005000
 8008760:	2340      	movs	r3, #64	; 0x40
 8008762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008766:	e228      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008768:	2380      	movs	r3, #128	; 0x80
 800876a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800876e:	e224      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4ab1      	ldr	r2, [pc, #708]	; (8008a3c <UART_SetConfig+0x62c>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d176      	bne.n	8008868 <UART_SetConfig+0x458>
 800877a:	4bb1      	ldr	r3, [pc, #708]	; (8008a40 <UART_SetConfig+0x630>)
 800877c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800877e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008782:	2b28      	cmp	r3, #40	; 0x28
 8008784:	d86c      	bhi.n	8008860 <UART_SetConfig+0x450>
 8008786:	a201      	add	r2, pc, #4	; (adr r2, 800878c <UART_SetConfig+0x37c>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	08008831 	.word	0x08008831
 8008790:	08008861 	.word	0x08008861
 8008794:	08008861 	.word	0x08008861
 8008798:	08008861 	.word	0x08008861
 800879c:	08008861 	.word	0x08008861
 80087a0:	08008861 	.word	0x08008861
 80087a4:	08008861 	.word	0x08008861
 80087a8:	08008861 	.word	0x08008861
 80087ac:	08008839 	.word	0x08008839
 80087b0:	08008861 	.word	0x08008861
 80087b4:	08008861 	.word	0x08008861
 80087b8:	08008861 	.word	0x08008861
 80087bc:	08008861 	.word	0x08008861
 80087c0:	08008861 	.word	0x08008861
 80087c4:	08008861 	.word	0x08008861
 80087c8:	08008861 	.word	0x08008861
 80087cc:	08008841 	.word	0x08008841
 80087d0:	08008861 	.word	0x08008861
 80087d4:	08008861 	.word	0x08008861
 80087d8:	08008861 	.word	0x08008861
 80087dc:	08008861 	.word	0x08008861
 80087e0:	08008861 	.word	0x08008861
 80087e4:	08008861 	.word	0x08008861
 80087e8:	08008861 	.word	0x08008861
 80087ec:	08008849 	.word	0x08008849
 80087f0:	08008861 	.word	0x08008861
 80087f4:	08008861 	.word	0x08008861
 80087f8:	08008861 	.word	0x08008861
 80087fc:	08008861 	.word	0x08008861
 8008800:	08008861 	.word	0x08008861
 8008804:	08008861 	.word	0x08008861
 8008808:	08008861 	.word	0x08008861
 800880c:	08008851 	.word	0x08008851
 8008810:	08008861 	.word	0x08008861
 8008814:	08008861 	.word	0x08008861
 8008818:	08008861 	.word	0x08008861
 800881c:	08008861 	.word	0x08008861
 8008820:	08008861 	.word	0x08008861
 8008824:	08008861 	.word	0x08008861
 8008828:	08008861 	.word	0x08008861
 800882c:	08008859 	.word	0x08008859
 8008830:	2301      	movs	r3, #1
 8008832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008836:	e1c0      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008838:	2304      	movs	r3, #4
 800883a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800883e:	e1bc      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008840:	2308      	movs	r3, #8
 8008842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008846:	e1b8      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008848:	2310      	movs	r3, #16
 800884a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800884e:	e1b4      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008850:	2320      	movs	r3, #32
 8008852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008856:	e1b0      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008858:	2340      	movs	r3, #64	; 0x40
 800885a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800885e:	e1ac      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008860:	2380      	movs	r3, #128	; 0x80
 8008862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008866:	e1a8      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a75      	ldr	r2, [pc, #468]	; (8008a44 <UART_SetConfig+0x634>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d130      	bne.n	80088d4 <UART_SetConfig+0x4c4>
 8008872:	4b73      	ldr	r3, [pc, #460]	; (8008a40 <UART_SetConfig+0x630>)
 8008874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	2b05      	cmp	r3, #5
 800887c:	d826      	bhi.n	80088cc <UART_SetConfig+0x4bc>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <UART_SetConfig+0x474>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	0800889d 	.word	0x0800889d
 8008888:	080088a5 	.word	0x080088a5
 800888c:	080088ad 	.word	0x080088ad
 8008890:	080088b5 	.word	0x080088b5
 8008894:	080088bd 	.word	0x080088bd
 8008898:	080088c5 	.word	0x080088c5
 800889c:	2300      	movs	r3, #0
 800889e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088a2:	e18a      	b.n	8008bba <UART_SetConfig+0x7aa>
 80088a4:	2304      	movs	r3, #4
 80088a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088aa:	e186      	b.n	8008bba <UART_SetConfig+0x7aa>
 80088ac:	2308      	movs	r3, #8
 80088ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088b2:	e182      	b.n	8008bba <UART_SetConfig+0x7aa>
 80088b4:	2310      	movs	r3, #16
 80088b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ba:	e17e      	b.n	8008bba <UART_SetConfig+0x7aa>
 80088bc:	2320      	movs	r3, #32
 80088be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088c2:	e17a      	b.n	8008bba <UART_SetConfig+0x7aa>
 80088c4:	2340      	movs	r3, #64	; 0x40
 80088c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ca:	e176      	b.n	8008bba <UART_SetConfig+0x7aa>
 80088cc:	2380      	movs	r3, #128	; 0x80
 80088ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088d2:	e172      	b.n	8008bba <UART_SetConfig+0x7aa>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a5b      	ldr	r2, [pc, #364]	; (8008a48 <UART_SetConfig+0x638>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d130      	bne.n	8008940 <UART_SetConfig+0x530>
 80088de:	4b58      	ldr	r3, [pc, #352]	; (8008a40 <UART_SetConfig+0x630>)
 80088e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	2b05      	cmp	r3, #5
 80088e8:	d826      	bhi.n	8008938 <UART_SetConfig+0x528>
 80088ea:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <UART_SetConfig+0x4e0>)
 80088ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f0:	08008909 	.word	0x08008909
 80088f4:	08008911 	.word	0x08008911
 80088f8:	08008919 	.word	0x08008919
 80088fc:	08008921 	.word	0x08008921
 8008900:	08008929 	.word	0x08008929
 8008904:	08008931 	.word	0x08008931
 8008908:	2300      	movs	r3, #0
 800890a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800890e:	e154      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008910:	2304      	movs	r3, #4
 8008912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008916:	e150      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008918:	2308      	movs	r3, #8
 800891a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800891e:	e14c      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008920:	2310      	movs	r3, #16
 8008922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008926:	e148      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008928:	2320      	movs	r3, #32
 800892a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800892e:	e144      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008930:	2340      	movs	r3, #64	; 0x40
 8008932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008936:	e140      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008938:	2380      	movs	r3, #128	; 0x80
 800893a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800893e:	e13c      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a41      	ldr	r2, [pc, #260]	; (8008a4c <UART_SetConfig+0x63c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	f040 8082 	bne.w	8008a50 <UART_SetConfig+0x640>
 800894c:	4b3c      	ldr	r3, [pc, #240]	; (8008a40 <UART_SetConfig+0x630>)
 800894e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008950:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008954:	2b28      	cmp	r3, #40	; 0x28
 8008956:	d86d      	bhi.n	8008a34 <UART_SetConfig+0x624>
 8008958:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <UART_SetConfig+0x550>)
 800895a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895e:	bf00      	nop
 8008960:	08008a05 	.word	0x08008a05
 8008964:	08008a35 	.word	0x08008a35
 8008968:	08008a35 	.word	0x08008a35
 800896c:	08008a35 	.word	0x08008a35
 8008970:	08008a35 	.word	0x08008a35
 8008974:	08008a35 	.word	0x08008a35
 8008978:	08008a35 	.word	0x08008a35
 800897c:	08008a35 	.word	0x08008a35
 8008980:	08008a0d 	.word	0x08008a0d
 8008984:	08008a35 	.word	0x08008a35
 8008988:	08008a35 	.word	0x08008a35
 800898c:	08008a35 	.word	0x08008a35
 8008990:	08008a35 	.word	0x08008a35
 8008994:	08008a35 	.word	0x08008a35
 8008998:	08008a35 	.word	0x08008a35
 800899c:	08008a35 	.word	0x08008a35
 80089a0:	08008a15 	.word	0x08008a15
 80089a4:	08008a35 	.word	0x08008a35
 80089a8:	08008a35 	.word	0x08008a35
 80089ac:	08008a35 	.word	0x08008a35
 80089b0:	08008a35 	.word	0x08008a35
 80089b4:	08008a35 	.word	0x08008a35
 80089b8:	08008a35 	.word	0x08008a35
 80089bc:	08008a35 	.word	0x08008a35
 80089c0:	08008a1d 	.word	0x08008a1d
 80089c4:	08008a35 	.word	0x08008a35
 80089c8:	08008a35 	.word	0x08008a35
 80089cc:	08008a35 	.word	0x08008a35
 80089d0:	08008a35 	.word	0x08008a35
 80089d4:	08008a35 	.word	0x08008a35
 80089d8:	08008a35 	.word	0x08008a35
 80089dc:	08008a35 	.word	0x08008a35
 80089e0:	08008a25 	.word	0x08008a25
 80089e4:	08008a35 	.word	0x08008a35
 80089e8:	08008a35 	.word	0x08008a35
 80089ec:	08008a35 	.word	0x08008a35
 80089f0:	08008a35 	.word	0x08008a35
 80089f4:	08008a35 	.word	0x08008a35
 80089f8:	08008a35 	.word	0x08008a35
 80089fc:	08008a35 	.word	0x08008a35
 8008a00:	08008a2d 	.word	0x08008a2d
 8008a04:	2301      	movs	r3, #1
 8008a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a0a:	e0d6      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008a0c:	2304      	movs	r3, #4
 8008a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a12:	e0d2      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008a14:	2308      	movs	r3, #8
 8008a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a1a:	e0ce      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008a1c:	2310      	movs	r3, #16
 8008a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a22:	e0ca      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008a24:	2320      	movs	r3, #32
 8008a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2a:	e0c6      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008a2c:	2340      	movs	r3, #64	; 0x40
 8008a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a32:	e0c2      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008a34:	2380      	movs	r3, #128	; 0x80
 8008a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a3a:	e0be      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008a3c:	40011400 	.word	0x40011400
 8008a40:	58024400 	.word	0x58024400
 8008a44:	40007800 	.word	0x40007800
 8008a48:	40007c00 	.word	0x40007c00
 8008a4c:	40011800 	.word	0x40011800
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4aad      	ldr	r2, [pc, #692]	; (8008d0c <UART_SetConfig+0x8fc>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d176      	bne.n	8008b48 <UART_SetConfig+0x738>
 8008a5a:	4bad      	ldr	r3, [pc, #692]	; (8008d10 <UART_SetConfig+0x900>)
 8008a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a62:	2b28      	cmp	r3, #40	; 0x28
 8008a64:	d86c      	bhi.n	8008b40 <UART_SetConfig+0x730>
 8008a66:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <UART_SetConfig+0x65c>)
 8008a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6c:	08008b11 	.word	0x08008b11
 8008a70:	08008b41 	.word	0x08008b41
 8008a74:	08008b41 	.word	0x08008b41
 8008a78:	08008b41 	.word	0x08008b41
 8008a7c:	08008b41 	.word	0x08008b41
 8008a80:	08008b41 	.word	0x08008b41
 8008a84:	08008b41 	.word	0x08008b41
 8008a88:	08008b41 	.word	0x08008b41
 8008a8c:	08008b19 	.word	0x08008b19
 8008a90:	08008b41 	.word	0x08008b41
 8008a94:	08008b41 	.word	0x08008b41
 8008a98:	08008b41 	.word	0x08008b41
 8008a9c:	08008b41 	.word	0x08008b41
 8008aa0:	08008b41 	.word	0x08008b41
 8008aa4:	08008b41 	.word	0x08008b41
 8008aa8:	08008b41 	.word	0x08008b41
 8008aac:	08008b21 	.word	0x08008b21
 8008ab0:	08008b41 	.word	0x08008b41
 8008ab4:	08008b41 	.word	0x08008b41
 8008ab8:	08008b41 	.word	0x08008b41
 8008abc:	08008b41 	.word	0x08008b41
 8008ac0:	08008b41 	.word	0x08008b41
 8008ac4:	08008b41 	.word	0x08008b41
 8008ac8:	08008b41 	.word	0x08008b41
 8008acc:	08008b29 	.word	0x08008b29
 8008ad0:	08008b41 	.word	0x08008b41
 8008ad4:	08008b41 	.word	0x08008b41
 8008ad8:	08008b41 	.word	0x08008b41
 8008adc:	08008b41 	.word	0x08008b41
 8008ae0:	08008b41 	.word	0x08008b41
 8008ae4:	08008b41 	.word	0x08008b41
 8008ae8:	08008b41 	.word	0x08008b41
 8008aec:	08008b31 	.word	0x08008b31
 8008af0:	08008b41 	.word	0x08008b41
 8008af4:	08008b41 	.word	0x08008b41
 8008af8:	08008b41 	.word	0x08008b41
 8008afc:	08008b41 	.word	0x08008b41
 8008b00:	08008b41 	.word	0x08008b41
 8008b04:	08008b41 	.word	0x08008b41
 8008b08:	08008b41 	.word	0x08008b41
 8008b0c:	08008b39 	.word	0x08008b39
 8008b10:	2301      	movs	r3, #1
 8008b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b16:	e050      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008b18:	2304      	movs	r3, #4
 8008b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b1e:	e04c      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008b20:	2308      	movs	r3, #8
 8008b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b26:	e048      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008b28:	2310      	movs	r3, #16
 8008b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b2e:	e044      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008b30:	2320      	movs	r3, #32
 8008b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b36:	e040      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008b38:	2340      	movs	r3, #64	; 0x40
 8008b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b3e:	e03c      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008b40:	2380      	movs	r3, #128	; 0x80
 8008b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b46:	e038      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a71      	ldr	r2, [pc, #452]	; (8008d14 <UART_SetConfig+0x904>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d130      	bne.n	8008bb4 <UART_SetConfig+0x7a4>
 8008b52:	4b6f      	ldr	r3, [pc, #444]	; (8008d10 <UART_SetConfig+0x900>)
 8008b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	2b05      	cmp	r3, #5
 8008b5c:	d826      	bhi.n	8008bac <UART_SetConfig+0x79c>
 8008b5e:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <UART_SetConfig+0x754>)
 8008b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b64:	08008b7d 	.word	0x08008b7d
 8008b68:	08008b85 	.word	0x08008b85
 8008b6c:	08008b8d 	.word	0x08008b8d
 8008b70:	08008b95 	.word	0x08008b95
 8008b74:	08008b9d 	.word	0x08008b9d
 8008b78:	08008ba5 	.word	0x08008ba5
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b82:	e01a      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008b84:	2304      	movs	r3, #4
 8008b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8a:	e016      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008b8c:	2308      	movs	r3, #8
 8008b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b92:	e012      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008b94:	2310      	movs	r3, #16
 8008b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b9a:	e00e      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008b9c:	2320      	movs	r3, #32
 8008b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ba2:	e00a      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008ba4:	2340      	movs	r3, #64	; 0x40
 8008ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008baa:	e006      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008bac:	2380      	movs	r3, #128	; 0x80
 8008bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb2:	e002      	b.n	8008bba <UART_SetConfig+0x7aa>
 8008bb4:	2380      	movs	r3, #128	; 0x80
 8008bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a55      	ldr	r2, [pc, #340]	; (8008d14 <UART_SetConfig+0x904>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	f040 80f0 	bne.w	8008da6 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008bc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008bca:	2b20      	cmp	r3, #32
 8008bcc:	dc46      	bgt.n	8008c5c <UART_SetConfig+0x84c>
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	db75      	blt.n	8008cbe <UART_SetConfig+0x8ae>
 8008bd2:	3b02      	subs	r3, #2
 8008bd4:	2b1e      	cmp	r3, #30
 8008bd6:	d872      	bhi.n	8008cbe <UART_SetConfig+0x8ae>
 8008bd8:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <UART_SetConfig+0x7d0>)
 8008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bde:	bf00      	nop
 8008be0:	08008c63 	.word	0x08008c63
 8008be4:	08008cbf 	.word	0x08008cbf
 8008be8:	08008c6b 	.word	0x08008c6b
 8008bec:	08008cbf 	.word	0x08008cbf
 8008bf0:	08008cbf 	.word	0x08008cbf
 8008bf4:	08008cbf 	.word	0x08008cbf
 8008bf8:	08008c7b 	.word	0x08008c7b
 8008bfc:	08008cbf 	.word	0x08008cbf
 8008c00:	08008cbf 	.word	0x08008cbf
 8008c04:	08008cbf 	.word	0x08008cbf
 8008c08:	08008cbf 	.word	0x08008cbf
 8008c0c:	08008cbf 	.word	0x08008cbf
 8008c10:	08008cbf 	.word	0x08008cbf
 8008c14:	08008cbf 	.word	0x08008cbf
 8008c18:	08008c8b 	.word	0x08008c8b
 8008c1c:	08008cbf 	.word	0x08008cbf
 8008c20:	08008cbf 	.word	0x08008cbf
 8008c24:	08008cbf 	.word	0x08008cbf
 8008c28:	08008cbf 	.word	0x08008cbf
 8008c2c:	08008cbf 	.word	0x08008cbf
 8008c30:	08008cbf 	.word	0x08008cbf
 8008c34:	08008cbf 	.word	0x08008cbf
 8008c38:	08008cbf 	.word	0x08008cbf
 8008c3c:	08008cbf 	.word	0x08008cbf
 8008c40:	08008cbf 	.word	0x08008cbf
 8008c44:	08008cbf 	.word	0x08008cbf
 8008c48:	08008cbf 	.word	0x08008cbf
 8008c4c:	08008cbf 	.word	0x08008cbf
 8008c50:	08008cbf 	.word	0x08008cbf
 8008c54:	08008cbf 	.word	0x08008cbf
 8008c58:	08008cb1 	.word	0x08008cb1
 8008c5c:	2b40      	cmp	r3, #64	; 0x40
 8008c5e:	d02a      	beq.n	8008cb6 <UART_SetConfig+0x8a6>
 8008c60:	e02d      	b.n	8008cbe <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008c62:	f7fc f919 	bl	8004e98 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008c68:	e02f      	b.n	8008cca <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c6a:	f107 0314 	add.w	r3, r7, #20
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fc f928 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c78:	e027      	b.n	8008cca <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c7a:	f107 0308 	add.w	r3, r7, #8
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fc fa74 	bl	800516c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c88:	e01f      	b.n	8008cca <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c8a:	4b21      	ldr	r3, [pc, #132]	; (8008d10 <UART_SetConfig+0x900>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 0320 	and.w	r3, r3, #32
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c96:	4b1e      	ldr	r3, [pc, #120]	; (8008d10 <UART_SetConfig+0x900>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	08db      	lsrs	r3, r3, #3
 8008c9c:	f003 0303 	and.w	r3, r3, #3
 8008ca0:	4a1d      	ldr	r2, [pc, #116]	; (8008d18 <UART_SetConfig+0x908>)
 8008ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ca8:	e00f      	b.n	8008cca <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8008caa:	4b1b      	ldr	r3, [pc, #108]	; (8008d18 <UART_SetConfig+0x908>)
 8008cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cae:	e00c      	b.n	8008cca <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cb0:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <UART_SetConfig+0x90c>)
 8008cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cb4:	e009      	b.n	8008cca <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cbc:	e005      	b.n	8008cca <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008cc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 81e6 	beq.w	800909e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	4a12      	ldr	r2, [pc, #72]	; (8008d20 <UART_SetConfig+0x910>)
 8008cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ce4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685a      	ldr	r2, [r3, #4]
 8008cea:	4613      	mov	r3, r2
 8008cec:	005b      	lsls	r3, r3, #1
 8008cee:	4413      	add	r3, r2
 8008cf0:	6a3a      	ldr	r2, [r7, #32]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d305      	bcc.n	8008d02 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cfc:	6a3a      	ldr	r2, [r7, #32]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d910      	bls.n	8008d24 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008d08:	e1c9      	b.n	800909e <UART_SetConfig+0xc8e>
 8008d0a:	bf00      	nop
 8008d0c:	40011c00 	.word	0x40011c00
 8008d10:	58024400 	.word	0x58024400
 8008d14:	58000c00 	.word	0x58000c00
 8008d18:	03d09000 	.word	0x03d09000
 8008d1c:	003d0900 	.word	0x003d0900
 8008d20:	0800d388 	.word	0x0800d388
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d26:	4618      	mov	r0, r3
 8008d28:	f04f 0100 	mov.w	r1, #0
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	4ac1      	ldr	r2, [pc, #772]	; (8009038 <UART_SetConfig+0xc28>)
 8008d32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	f04f 0300 	mov.w	r3, #0
 8008d3c:	f7f7 fb30 	bl	80003a0 <__aeabi_uldivmod>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4610      	mov	r0, r2
 8008d46:	4619      	mov	r1, r3
 8008d48:	f04f 0200 	mov.w	r2, #0
 8008d4c:	f04f 0300 	mov.w	r3, #0
 8008d50:	020b      	lsls	r3, r1, #8
 8008d52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d56:	0202      	lsls	r2, r0, #8
 8008d58:	6879      	ldr	r1, [r7, #4]
 8008d5a:	6849      	ldr	r1, [r1, #4]
 8008d5c:	0849      	lsrs	r1, r1, #1
 8008d5e:	4608      	mov	r0, r1
 8008d60:	f04f 0100 	mov.w	r1, #0
 8008d64:	1814      	adds	r4, r2, r0
 8008d66:	eb43 0501 	adc.w	r5, r3, r1
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	f04f 0300 	mov.w	r3, #0
 8008d74:	4620      	mov	r0, r4
 8008d76:	4629      	mov	r1, r5
 8008d78:	f7f7 fb12 	bl	80003a0 <__aeabi_uldivmod>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4613      	mov	r3, r2
 8008d82:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d8a:	d308      	bcc.n	8008d9e <UART_SetConfig+0x98e>
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d92:	d204      	bcs.n	8008d9e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d9a:	60da      	str	r2, [r3, #12]
 8008d9c:	e17f      	b.n	800909e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008da4:	e17b      	b.n	800909e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dae:	f040 80bd 	bne.w	8008f2c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8008db2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	dc48      	bgt.n	8008e4c <UART_SetConfig+0xa3c>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	db7b      	blt.n	8008eb6 <UART_SetConfig+0xaa6>
 8008dbe:	2b20      	cmp	r3, #32
 8008dc0:	d879      	bhi.n	8008eb6 <UART_SetConfig+0xaa6>
 8008dc2:	a201      	add	r2, pc, #4	; (adr r2, 8008dc8 <UART_SetConfig+0x9b8>)
 8008dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc8:	08008e53 	.word	0x08008e53
 8008dcc:	08008e5b 	.word	0x08008e5b
 8008dd0:	08008eb7 	.word	0x08008eb7
 8008dd4:	08008eb7 	.word	0x08008eb7
 8008dd8:	08008e63 	.word	0x08008e63
 8008ddc:	08008eb7 	.word	0x08008eb7
 8008de0:	08008eb7 	.word	0x08008eb7
 8008de4:	08008eb7 	.word	0x08008eb7
 8008de8:	08008e73 	.word	0x08008e73
 8008dec:	08008eb7 	.word	0x08008eb7
 8008df0:	08008eb7 	.word	0x08008eb7
 8008df4:	08008eb7 	.word	0x08008eb7
 8008df8:	08008eb7 	.word	0x08008eb7
 8008dfc:	08008eb7 	.word	0x08008eb7
 8008e00:	08008eb7 	.word	0x08008eb7
 8008e04:	08008eb7 	.word	0x08008eb7
 8008e08:	08008e83 	.word	0x08008e83
 8008e0c:	08008eb7 	.word	0x08008eb7
 8008e10:	08008eb7 	.word	0x08008eb7
 8008e14:	08008eb7 	.word	0x08008eb7
 8008e18:	08008eb7 	.word	0x08008eb7
 8008e1c:	08008eb7 	.word	0x08008eb7
 8008e20:	08008eb7 	.word	0x08008eb7
 8008e24:	08008eb7 	.word	0x08008eb7
 8008e28:	08008eb7 	.word	0x08008eb7
 8008e2c:	08008eb7 	.word	0x08008eb7
 8008e30:	08008eb7 	.word	0x08008eb7
 8008e34:	08008eb7 	.word	0x08008eb7
 8008e38:	08008eb7 	.word	0x08008eb7
 8008e3c:	08008eb7 	.word	0x08008eb7
 8008e40:	08008eb7 	.word	0x08008eb7
 8008e44:	08008eb7 	.word	0x08008eb7
 8008e48:	08008ea9 	.word	0x08008ea9
 8008e4c:	2b40      	cmp	r3, #64	; 0x40
 8008e4e:	d02e      	beq.n	8008eae <UART_SetConfig+0xa9e>
 8008e50:	e031      	b.n	8008eb6 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e52:	f7fa fcbf 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8008e56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008e58:	e033      	b.n	8008ec2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e5a:	f7fa fcd1 	bl	8003800 <HAL_RCC_GetPCLK2Freq>
 8008e5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008e60:	e02f      	b.n	8008ec2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e62:	f107 0314 	add.w	r3, r7, #20
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fc f82c 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e70:	e027      	b.n	8008ec2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e72:	f107 0308 	add.w	r3, r7, #8
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fc f978 	bl	800516c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e80:	e01f      	b.n	8008ec2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e82:	4b6e      	ldr	r3, [pc, #440]	; (800903c <UART_SetConfig+0xc2c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0320 	and.w	r3, r3, #32
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d009      	beq.n	8008ea2 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e8e:	4b6b      	ldr	r3, [pc, #428]	; (800903c <UART_SetConfig+0xc2c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	08db      	lsrs	r3, r3, #3
 8008e94:	f003 0303 	and.w	r3, r3, #3
 8008e98:	4a69      	ldr	r2, [pc, #420]	; (8009040 <UART_SetConfig+0xc30>)
 8008e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ea0:	e00f      	b.n	8008ec2 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8008ea2:	4b67      	ldr	r3, [pc, #412]	; (8009040 <UART_SetConfig+0xc30>)
 8008ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ea6:	e00c      	b.n	8008ec2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ea8:	4b66      	ldr	r3, [pc, #408]	; (8009044 <UART_SetConfig+0xc34>)
 8008eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008eac:	e009      	b.n	8008ec2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008eb4:	e005      	b.n	8008ec2 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008ec0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 80ea 	beq.w	800909e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	4a5a      	ldr	r2, [pc, #360]	; (8009038 <UART_SetConfig+0xc28>)
 8008ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008edc:	005a      	lsls	r2, r3, #1
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	085b      	lsrs	r3, r3, #1
 8008ee4:	441a      	add	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	2b0f      	cmp	r3, #15
 8008ef4:	d916      	bls.n	8008f24 <UART_SetConfig+0xb14>
 8008ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008efc:	d212      	bcs.n	8008f24 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	f023 030f 	bic.w	r3, r3, #15
 8008f06:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0a:	085b      	lsrs	r3, r3, #1
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	f003 0307 	and.w	r3, r3, #7
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f16:	4313      	orrs	r3, r2
 8008f18:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008f20:	60da      	str	r2, [r3, #12]
 8008f22:	e0bc      	b.n	800909e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008f2a:	e0b8      	b.n	800909e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f30:	2b20      	cmp	r3, #32
 8008f32:	dc4b      	bgt.n	8008fcc <UART_SetConfig+0xbbc>
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f2c0 8087 	blt.w	8009048 <UART_SetConfig+0xc38>
 8008f3a:	2b20      	cmp	r3, #32
 8008f3c:	f200 8084 	bhi.w	8009048 <UART_SetConfig+0xc38>
 8008f40:	a201      	add	r2, pc, #4	; (adr r2, 8008f48 <UART_SetConfig+0xb38>)
 8008f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f46:	bf00      	nop
 8008f48:	08008fd3 	.word	0x08008fd3
 8008f4c:	08008fdb 	.word	0x08008fdb
 8008f50:	08009049 	.word	0x08009049
 8008f54:	08009049 	.word	0x08009049
 8008f58:	08008fe3 	.word	0x08008fe3
 8008f5c:	08009049 	.word	0x08009049
 8008f60:	08009049 	.word	0x08009049
 8008f64:	08009049 	.word	0x08009049
 8008f68:	08008ff3 	.word	0x08008ff3
 8008f6c:	08009049 	.word	0x08009049
 8008f70:	08009049 	.word	0x08009049
 8008f74:	08009049 	.word	0x08009049
 8008f78:	08009049 	.word	0x08009049
 8008f7c:	08009049 	.word	0x08009049
 8008f80:	08009049 	.word	0x08009049
 8008f84:	08009049 	.word	0x08009049
 8008f88:	08009003 	.word	0x08009003
 8008f8c:	08009049 	.word	0x08009049
 8008f90:	08009049 	.word	0x08009049
 8008f94:	08009049 	.word	0x08009049
 8008f98:	08009049 	.word	0x08009049
 8008f9c:	08009049 	.word	0x08009049
 8008fa0:	08009049 	.word	0x08009049
 8008fa4:	08009049 	.word	0x08009049
 8008fa8:	08009049 	.word	0x08009049
 8008fac:	08009049 	.word	0x08009049
 8008fb0:	08009049 	.word	0x08009049
 8008fb4:	08009049 	.word	0x08009049
 8008fb8:	08009049 	.word	0x08009049
 8008fbc:	08009049 	.word	0x08009049
 8008fc0:	08009049 	.word	0x08009049
 8008fc4:	08009049 	.word	0x08009049
 8008fc8:	08009029 	.word	0x08009029
 8008fcc:	2b40      	cmp	r3, #64	; 0x40
 8008fce:	d02e      	beq.n	800902e <UART_SetConfig+0xc1e>
 8008fd0:	e03a      	b.n	8009048 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fd2:	f7fa fbff 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8008fd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fd8:	e03c      	b.n	8009054 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fda:	f7fa fc11 	bl	8003800 <HAL_RCC_GetPCLK2Freq>
 8008fde:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fe0:	e038      	b.n	8009054 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fe2:	f107 0314 	add.w	r3, r7, #20
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fb ff6c 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ff0:	e030      	b.n	8009054 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ff2:	f107 0308 	add.w	r3, r7, #8
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fc f8b8 	bl	800516c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009000:	e028      	b.n	8009054 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009002:	4b0e      	ldr	r3, [pc, #56]	; (800903c <UART_SetConfig+0xc2c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	d009      	beq.n	8009022 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800900e:	4b0b      	ldr	r3, [pc, #44]	; (800903c <UART_SetConfig+0xc2c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	08db      	lsrs	r3, r3, #3
 8009014:	f003 0303 	and.w	r3, r3, #3
 8009018:	4a09      	ldr	r2, [pc, #36]	; (8009040 <UART_SetConfig+0xc30>)
 800901a:	fa22 f303 	lsr.w	r3, r2, r3
 800901e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009020:	e018      	b.n	8009054 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8009022:	4b07      	ldr	r3, [pc, #28]	; (8009040 <UART_SetConfig+0xc30>)
 8009024:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009026:	e015      	b.n	8009054 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009028:	4b06      	ldr	r3, [pc, #24]	; (8009044 <UART_SetConfig+0xc34>)
 800902a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800902c:	e012      	b.n	8009054 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800902e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009032:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009034:	e00e      	b.n	8009054 <UART_SetConfig+0xc44>
 8009036:	bf00      	nop
 8009038:	0800d388 	.word	0x0800d388
 800903c:	58024400 	.word	0x58024400
 8009040:	03d09000 	.word	0x03d09000
 8009044:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009052:	bf00      	nop
    }

    if (pclk != 0U)
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	2b00      	cmp	r3, #0
 8009058:	d021      	beq.n	800909e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	4a1a      	ldr	r2, [pc, #104]	; (80090c8 <UART_SetConfig+0xcb8>)
 8009060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009064:	461a      	mov	r2, r3
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	fbb3 f2f2 	udiv	r2, r3, r2
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	085b      	lsrs	r3, r3, #1
 8009072:	441a      	add	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	fbb2 f3f3 	udiv	r3, r2, r3
 800907c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	2b0f      	cmp	r3, #15
 8009082:	d909      	bls.n	8009098 <UART_SetConfig+0xc88>
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800908a:	d205      	bcs.n	8009098 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	b29a      	uxth	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	60da      	str	r2, [r3, #12]
 8009096:	e002      	b.n	800909e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80090ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3738      	adds	r7, #56	; 0x38
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bdb0      	pop	{r4, r5, r7, pc}
 80090c6:	bf00      	nop
 80090c8:	0800d388 	.word	0x0800d388

080090cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00a      	beq.n	8009118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	430a      	orrs	r2, r1
 8009116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911c:	f003 0304 	and.w	r3, r3, #4
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00a      	beq.n	800913a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913e:	f003 0308 	and.w	r3, r3, #8
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00a      	beq.n	800915c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	430a      	orrs	r2, r1
 800915a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009160:	f003 0310 	and.w	r3, r3, #16
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00a      	beq.n	800917e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	430a      	orrs	r2, r1
 800917c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009182:	f003 0320 	and.w	r3, r3, #32
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00a      	beq.n	80091a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d01a      	beq.n	80091e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	430a      	orrs	r2, r1
 80091c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091ca:	d10a      	bne.n	80091e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00a      	beq.n	8009204 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	430a      	orrs	r2, r1
 8009202:	605a      	str	r2, [r3, #4]
  }
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af02      	add	r7, sp, #8
 8009216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009220:	f7f8 fc40 	bl	8001aa4 <HAL_GetTick>
 8009224:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0308 	and.w	r3, r3, #8
 8009230:	2b08      	cmp	r3, #8
 8009232:	d10e      	bne.n	8009252 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009234:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f82f 	bl	80092a6 <UART_WaitOnFlagUntilTimeout>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e025      	b.n	800929e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b04      	cmp	r3, #4
 800925e:	d10e      	bne.n	800927e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f819 	bl	80092a6 <UART_WaitOnFlagUntilTimeout>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e00f      	b.n	800929e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2220      	movs	r2, #32
 8009282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2220      	movs	r2, #32
 800928a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b09c      	sub	sp, #112	; 0x70
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	603b      	str	r3, [r7, #0]
 80092b2:	4613      	mov	r3, r2
 80092b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092b6:	e0a9      	b.n	800940c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092be:	f000 80a5 	beq.w	800940c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092c2:	f7f8 fbef 	bl	8001aa4 <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d302      	bcc.n	80092d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80092d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d140      	bne.n	800935a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092ec:	667b      	str	r3, [r7, #100]	; 0x64
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	461a      	mov	r2, r3
 80092f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092fe:	e841 2300 	strex	r3, r2, [r1]
 8009302:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1e6      	bne.n	80092d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3308      	adds	r3, #8
 8009310:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009314:	e853 3f00 	ldrex	r3, [r3]
 8009318:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	f023 0301 	bic.w	r3, r3, #1
 8009320:	663b      	str	r3, [r7, #96]	; 0x60
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3308      	adds	r3, #8
 8009328:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800932a:	64ba      	str	r2, [r7, #72]	; 0x48
 800932c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e5      	bne.n	800930a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2220      	movs	r2, #32
 8009342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2220      	movs	r2, #32
 800934a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e069      	b.n	800942e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 0304 	and.w	r3, r3, #4
 8009364:	2b00      	cmp	r3, #0
 8009366:	d051      	beq.n	800940c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009376:	d149      	bne.n	800940c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009380:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009396:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	461a      	mov	r2, r3
 800939e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a0:	637b      	str	r3, [r7, #52]	; 0x34
 80093a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a8:	e841 2300 	strex	r3, r2, [r1]
 80093ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e6      	bne.n	8009382 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3308      	adds	r3, #8
 80093ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	e853 3f00 	ldrex	r3, [r3]
 80093c2:	613b      	str	r3, [r7, #16]
   return(result);
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f023 0301 	bic.w	r3, r3, #1
 80093ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3308      	adds	r3, #8
 80093d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093d4:	623a      	str	r2, [r7, #32]
 80093d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d8:	69f9      	ldr	r1, [r7, #28]
 80093da:	6a3a      	ldr	r2, [r7, #32]
 80093dc:	e841 2300 	strex	r3, r2, [r1]
 80093e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e5      	bne.n	80093b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2220      	movs	r2, #32
 80093f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e010      	b.n	800942e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	69da      	ldr	r2, [r3, #28]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	4013      	ands	r3, r2
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	429a      	cmp	r2, r3
 800941a:	bf0c      	ite	eq
 800941c:	2301      	moveq	r3, #1
 800941e:	2300      	movne	r3, #0
 8009420:	b2db      	uxtb	r3, r3
 8009422:	461a      	mov	r2, r3
 8009424:	79fb      	ldrb	r3, [r7, #7]
 8009426:	429a      	cmp	r2, r3
 8009428:	f43f af46 	beq.w	80092b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3770      	adds	r7, #112	; 0x70
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009436:	b480      	push	{r7}
 8009438:	b085      	sub	sp, #20
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009444:	2b01      	cmp	r3, #1
 8009446:	d101      	bne.n	800944c <HAL_UARTEx_DisableFifoMode+0x16>
 8009448:	2302      	movs	r3, #2
 800944a:	e027      	b.n	800949c <HAL_UARTEx_DisableFifoMode+0x66>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2224      	movs	r2, #36	; 0x24
 8009458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 0201 	bic.w	r2, r2, #1
 8009472:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800947a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2220      	movs	r2, #32
 800948e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d101      	bne.n	80094c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094bc:	2302      	movs	r3, #2
 80094be:	e02d      	b.n	800951c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2224      	movs	r2, #36	; 0x24
 80094cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 0201 	bic.w	r2, r2, #1
 80094e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f84f 	bl	80095a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2220      	movs	r2, #32
 800950e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009534:	2b01      	cmp	r3, #1
 8009536:	d101      	bne.n	800953c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009538:	2302      	movs	r3, #2
 800953a:	e02d      	b.n	8009598 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2224      	movs	r2, #36	; 0x24
 8009548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f022 0201 	bic.w	r2, r2, #1
 8009562:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	430a      	orrs	r2, r1
 8009576:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f811 	bl	80095a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2220      	movs	r2, #32
 800958a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d108      	bne.n	80095c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095c0:	e031      	b.n	8009626 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095c2:	2310      	movs	r3, #16
 80095c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095c6:	2310      	movs	r3, #16
 80095c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	0e5b      	lsrs	r3, r3, #25
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	f003 0307 	and.w	r3, r3, #7
 80095d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	0f5b      	lsrs	r3, r3, #29
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	f003 0307 	and.w	r3, r3, #7
 80095e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
 80095ec:	7b3a      	ldrb	r2, [r7, #12]
 80095ee:	4911      	ldr	r1, [pc, #68]	; (8009634 <UARTEx_SetNbDataToProcess+0x94>)
 80095f0:	5c8a      	ldrb	r2, [r1, r2]
 80095f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095f6:	7b3a      	ldrb	r2, [r7, #12]
 80095f8:	490f      	ldr	r1, [pc, #60]	; (8009638 <UARTEx_SetNbDataToProcess+0x98>)
 80095fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009600:	b29a      	uxth	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009608:	7bfb      	ldrb	r3, [r7, #15]
 800960a:	7b7a      	ldrb	r2, [r7, #13]
 800960c:	4909      	ldr	r1, [pc, #36]	; (8009634 <UARTEx_SetNbDataToProcess+0x94>)
 800960e:	5c8a      	ldrb	r2, [r1, r2]
 8009610:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009614:	7b7a      	ldrb	r2, [r7, #13]
 8009616:	4908      	ldr	r1, [pc, #32]	; (8009638 <UARTEx_SetNbDataToProcess+0x98>)
 8009618:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800961a:	fb93 f3f2 	sdiv	r3, r3, r2
 800961e:	b29a      	uxth	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009626:	bf00      	nop
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	0800d3a0 	.word	0x0800d3a0
 8009638:	0800d3a8 	.word	0x0800d3a8

0800963c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800963c:	b084      	sub	sp, #16
 800963e:	b480      	push	{r7}
 8009640:	b085      	sub	sp, #20
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	f107 001c 	add.w	r0, r7, #28
 800964a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009652:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009654:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009656:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800965a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800965c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800965e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009662:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	4313      	orrs	r3, r2
 8009668:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	4b07      	ldr	r3, [pc, #28]	; (800968c <SDMMC_Init+0x50>)
 8009670:	4013      	ands	r3, r2
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	431a      	orrs	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	b004      	add	sp, #16
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	ffc02c00 	.word	0xffc02c00

08009690 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f043 0203 	orr.w	r2, r3, #3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b083      	sub	sp, #12
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 0303 	and.w	r3, r3, #3
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
	...

0800970c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800972a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009730:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009736:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	4313      	orrs	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68da      	ldr	r2, [r3, #12]
 8009742:	4b06      	ldr	r3, [pc, #24]	; (800975c <SDMMC_SendCommand+0x50>)
 8009744:	4013      	ands	r3, r2
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	431a      	orrs	r2, r3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	fffee0c0 	.word	0xfffee0c0

08009760 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	b2db      	uxtb	r3, r3
}
 800976e:	4618      	mov	r0, r3
 8009770:	370c      	adds	r7, #12
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800977a:	b480      	push	{r7}
 800977c:	b085      	sub	sp, #20
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3314      	adds	r3, #20
 8009788:	461a      	mov	r2, r3
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	4413      	add	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80097c6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80097cc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80097d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	431a      	orrs	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0

}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b088      	sub	sp, #32
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009806:	2310      	movs	r3, #16
 8009808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800980a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800980e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009810:	2300      	movs	r3, #0
 8009812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009818:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800981a:	f107 0308 	add.w	r3, r7, #8
 800981e:	4619      	mov	r1, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff ff73 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009826:	f241 3288 	movw	r2, #5000	; 0x1388
 800982a:	2110      	movs	r1, #16
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fa5f 	bl	8009cf0 <SDMMC_GetCmdResp1>
 8009832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009834:	69fb      	ldr	r3, [r7, #28]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3720      	adds	r7, #32
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b088      	sub	sp, #32
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800984c:	2311      	movs	r3, #17
 800984e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009856:	2300      	movs	r3, #0
 8009858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800985a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800985e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009860:	f107 0308 	add.w	r3, r7, #8
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7ff ff50 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800986c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009870:	2111      	movs	r1, #17
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fa3c 	bl	8009cf0 <SDMMC_GetCmdResp1>
 8009878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800987a:	69fb      	ldr	r3, [r7, #28]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3720      	adds	r7, #32
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b088      	sub	sp, #32
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009892:	2312      	movs	r3, #18
 8009894:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800989a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098a6:	f107 0308 	add.w	r3, r7, #8
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7ff ff2d 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80098b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80098b6:	2112      	movs	r1, #18
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fa19 	bl	8009cf0 <SDMMC_GetCmdResp1>
 80098be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098c0:	69fb      	ldr	r3, [r7, #28]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3720      	adds	r7, #32
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b088      	sub	sp, #32
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80098d8:	2318      	movs	r3, #24
 80098da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098e2:	2300      	movs	r3, #0
 80098e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098ec:	f107 0308 	add.w	r3, r7, #8
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff ff0a 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80098f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80098fc:	2118      	movs	r1, #24
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f9f6 	bl	8009cf0 <SDMMC_GetCmdResp1>
 8009904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009906:	69fb      	ldr	r3, [r7, #28]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3720      	adds	r7, #32
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800991e:	2319      	movs	r3, #25
 8009920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009928:	2300      	movs	r3, #0
 800992a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800992c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009930:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009932:	f107 0308 	add.w	r3, r7, #8
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff fee7 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800993e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009942:	2119      	movs	r1, #25
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f9d3 	bl	8009cf0 <SDMMC_GetCmdResp1>
 800994a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800994c:	69fb      	ldr	r3, [r7, #28]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3720      	adds	r7, #32
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
	...

08009958 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009960:	2300      	movs	r3, #0
 8009962:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009964:	230c      	movs	r3, #12
 8009966:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800996c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800996e:	2300      	movs	r3, #0
 8009970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009976:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009990:	f107 0308 	add.w	r3, r7, #8
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff feb8 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800999c:	4a0b      	ldr	r2, [pc, #44]	; (80099cc <SDMMC_CmdStopTransfer+0x74>)
 800999e:	210c      	movs	r1, #12
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 f9a5 	bl	8009cf0 <SDMMC_GetCmdResp1>
 80099a6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099ba:	d101      	bne.n	80099c0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80099bc:	2300      	movs	r3, #0
 80099be:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80099c0:	69fb      	ldr	r3, [r7, #28]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3720      	adds	r7, #32
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	05f5e100 	.word	0x05f5e100

080099d0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b088      	sub	sp, #32
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80099de:	2307      	movs	r3, #7
 80099e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099e8:	2300      	movs	r3, #0
 80099ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099f2:	f107 0308 	add.w	r3, r7, #8
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f7ff fe87 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80099fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a02:	2107      	movs	r1, #7
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f973 	bl	8009cf0 <SDMMC_GetCmdResp1>
 8009a0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a0c:	69fb      	ldr	r3, [r7, #28]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3720      	adds	r7, #32
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b088      	sub	sp, #32
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009a22:	2300      	movs	r3, #0
 8009a24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009a26:	2300      	movs	r3, #0
 8009a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a34:	f107 0308 	add.w	r3, r7, #8
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7ff fe66 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fb97 	bl	800a174 <SDMMC_GetCmdError>
 8009a46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a48:	69fb      	ldr	r3, [r7, #28]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3720      	adds	r7, #32
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b088      	sub	sp, #32
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009a5a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009a5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009a60:	2308      	movs	r3, #8
 8009a62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a74:	f107 0308 	add.w	r3, r7, #8
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff fe46 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fb29 	bl	800a0d8 <SDMMC_GetCmdResp7>
 8009a86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a88:	69fb      	ldr	r3, [r7, #28]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3720      	adds	r7, #32
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b088      	sub	sp, #32
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009aa0:	2337      	movs	r3, #55	; 0x37
 8009aa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ab2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ab4:	f107 0308 	add.w	r3, r7, #8
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7ff fe26 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac4:	2137      	movs	r1, #55	; 0x37
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f912 	bl	8009cf0 <SDMMC_GetCmdResp1>
 8009acc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ace:	69fb      	ldr	r3, [r7, #28]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3720      	adds	r7, #32
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009ae6:	2329      	movs	r3, #41	; 0x29
 8009ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009af0:	2300      	movs	r3, #0
 8009af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009af8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009afa:	f107 0308 	add.w	r3, r7, #8
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff fe03 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fa2e 	bl	8009f68 <SDMMC_GetCmdResp3>
 8009b0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b0e:	69fb      	ldr	r3, [r7, #28]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3720      	adds	r7, #32
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009b26:	2306      	movs	r3, #6
 8009b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b30:	2300      	movs	r3, #0
 8009b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b3a:	f107 0308 	add.w	r3, r7, #8
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7ff fde3 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b4a:	2106      	movs	r1, #6
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f8cf 	bl	8009cf0 <SDMMC_GetCmdResp1>
 8009b52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b54:	69fb      	ldr	r3, [r7, #28]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3720      	adds	r7, #32
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b088      	sub	sp, #32
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009b6a:	2333      	movs	r3, #51	; 0x33
 8009b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b74:	2300      	movs	r3, #0
 8009b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b7e:	f107 0308 	add.w	r3, r7, #8
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff fdc1 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b8e:	2133      	movs	r1, #51	; 0x33
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f8ad 	bl	8009cf0 <SDMMC_GetCmdResp1>
 8009b96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b98:	69fb      	ldr	r3, [r7, #28]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3720      	adds	r7, #32
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b088      	sub	sp, #32
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009bae:	2302      	movs	r3, #2
 8009bb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009bb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bc2:	f107 0308 	add.w	r3, r7, #8
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7ff fd9f 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f980 	bl	8009ed4 <SDMMC_GetCmdResp2>
 8009bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009bee:	2309      	movs	r3, #9
 8009bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009bf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c02:	f107 0308 	add.w	r3, r7, #8
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7ff fd7f 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f960 	bl	8009ed4 <SDMMC_GetCmdResp2>
 8009c14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c16:	69fb      	ldr	r3, [r7, #28]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3720      	adds	r7, #32
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c42:	f107 0308 	add.w	r3, r7, #8
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7ff fd5f 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	2103      	movs	r1, #3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f9c8 	bl	8009fe8 <SDMMC_GetCmdResp6>
 8009c58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c5a:	69fb      	ldr	r3, [r7, #28]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3720      	adds	r7, #32
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b088      	sub	sp, #32
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009c72:	230d      	movs	r3, #13
 8009c74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c86:	f107 0308 	add.w	r3, r7, #8
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7ff fd3d 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c96:	210d      	movs	r1, #13
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f829 	bl	8009cf0 <SDMMC_GetCmdResp1>
 8009c9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ca0:	69fb      	ldr	r3, [r7, #28]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3720      	adds	r7, #32
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b088      	sub	sp, #32
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009cb6:	230d      	movs	r3, #13
 8009cb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cca:	f107 0308 	add.w	r3, r7, #8
 8009cce:	4619      	mov	r1, r3
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f7ff fd1b 	bl	800970c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cda:	210d      	movs	r1, #13
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f807 	bl	8009cf0 <SDMMC_GetCmdResp1>
 8009ce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ce4:	69fb      	ldr	r3, [r7, #28]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3720      	adds	r7, #32
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
	...

08009cf0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009cfe:	4b70      	ldr	r3, [pc, #448]	; (8009ec0 <SDMMC_GetCmdResp1+0x1d0>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a70      	ldr	r2, [pc, #448]	; (8009ec4 <SDMMC_GetCmdResp1+0x1d4>)
 8009d04:	fba2 2303 	umull	r2, r3, r2, r3
 8009d08:	0a5a      	lsrs	r2, r3, #9
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	fb02 f303 	mul.w	r3, r2, r3
 8009d10:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	1e5a      	subs	r2, r3, #1
 8009d16:	61fa      	str	r2, [r7, #28]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d102      	bne.n	8009d22 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d20:	e0c9      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d26:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009d28:	69ba      	ldr	r2, [r7, #24]
 8009d2a:	4b67      	ldr	r3, [pc, #412]	; (8009ec8 <SDMMC_GetCmdResp1+0x1d8>)
 8009d2c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d0ef      	beq.n	8009d12 <SDMMC_GetCmdResp1+0x22>
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1ea      	bne.n	8009d12 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d40:	f003 0304 	and.w	r3, r3, #4
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d004      	beq.n	8009d52 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2204      	movs	r2, #4
 8009d4c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d4e:	2304      	movs	r3, #4
 8009d50:	e0b1      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d004      	beq.n	8009d68 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2201      	movs	r2, #1
 8009d62:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e0a6      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4a58      	ldr	r2, [pc, #352]	; (8009ecc <SDMMC_GetCmdResp1+0x1dc>)
 8009d6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f7ff fcf6 	bl	8009760 <SDMMC_GetCommandResponse>
 8009d74:	4603      	mov	r3, r0
 8009d76:	461a      	mov	r2, r3
 8009d78:	7afb      	ldrb	r3, [r7, #11]
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d001      	beq.n	8009d82 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e099      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009d82:	2100      	movs	r1, #0
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f7ff fcf8 	bl	800977a <SDMMC_GetResponse>
 8009d8a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	4b50      	ldr	r3, [pc, #320]	; (8009ed0 <SDMMC_GetCmdResp1+0x1e0>)
 8009d90:	4013      	ands	r3, r2
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d101      	bne.n	8009d9a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009d96:	2300      	movs	r3, #0
 8009d98:	e08d      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	da02      	bge.n	8009da6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009da4:	e087      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009db0:	2340      	movs	r3, #64	; 0x40
 8009db2:	e080      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009dbe:	2380      	movs	r3, #128	; 0x80
 8009dc0:	e079      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dd0:	e071      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009de0:	e069      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009df0:	e061      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009dfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e00:	e059      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e10:	e051      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e20:	e049      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009e2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e30:	e041      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e40:	e039      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009e50:	e031      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009e5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009e60:	e029      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009e6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e70:	e021      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009e7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009e80:	e019      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009e8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009e90:	e011      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009e9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ea0:	e009      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f003 0308 	and.w	r3, r3, #8
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009eac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009eb0:	e001      	b.n	8009eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009eb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3720      	adds	r7, #32
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	24000000 	.word	0x24000000
 8009ec4:	10624dd3 	.word	0x10624dd3
 8009ec8:	00200045 	.word	0x00200045
 8009ecc:	002000c5 	.word	0x002000c5
 8009ed0:	fdffe008 	.word	0xfdffe008

08009ed4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009edc:	4b1f      	ldr	r3, [pc, #124]	; (8009f5c <SDMMC_GetCmdResp2+0x88>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a1f      	ldr	r2, [pc, #124]	; (8009f60 <SDMMC_GetCmdResp2+0x8c>)
 8009ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee6:	0a5b      	lsrs	r3, r3, #9
 8009ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eec:	fb02 f303 	mul.w	r3, r2, r3
 8009ef0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	1e5a      	subs	r2, r3, #1
 8009ef6:	60fa      	str	r2, [r7, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d102      	bne.n	8009f02 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009efc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f00:	e026      	b.n	8009f50 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f06:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0ef      	beq.n	8009ef2 <SDMMC_GetCmdResp2+0x1e>
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1ea      	bne.n	8009ef2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f20:	f003 0304 	and.w	r3, r3, #4
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d004      	beq.n	8009f32 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2204      	movs	r2, #4
 8009f2c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f2e:	2304      	movs	r3, #4
 8009f30:	e00e      	b.n	8009f50 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d004      	beq.n	8009f48 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e003      	b.n	8009f50 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a06      	ldr	r2, [pc, #24]	; (8009f64 <SDMMC_GetCmdResp2+0x90>)
 8009f4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	24000000 	.word	0x24000000
 8009f60:	10624dd3 	.word	0x10624dd3
 8009f64:	002000c5 	.word	0x002000c5

08009f68 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f70:	4b1a      	ldr	r3, [pc, #104]	; (8009fdc <SDMMC_GetCmdResp3+0x74>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a1a      	ldr	r2, [pc, #104]	; (8009fe0 <SDMMC_GetCmdResp3+0x78>)
 8009f76:	fba2 2303 	umull	r2, r3, r2, r3
 8009f7a:	0a5b      	lsrs	r3, r3, #9
 8009f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f80:	fb02 f303 	mul.w	r3, r2, r3
 8009f84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	1e5a      	subs	r2, r3, #1
 8009f8a:	60fa      	str	r2, [r7, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d102      	bne.n	8009f96 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f94:	e01b      	b.n	8009fce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f9a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0ef      	beq.n	8009f86 <SDMMC_GetCmdResp3+0x1e>
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1ea      	bne.n	8009f86 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb4:	f003 0304 	and.w	r3, r3, #4
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d004      	beq.n	8009fc6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2204      	movs	r2, #4
 8009fc0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fc2:	2304      	movs	r3, #4
 8009fc4:	e003      	b.n	8009fce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a06      	ldr	r2, [pc, #24]	; (8009fe4 <SDMMC_GetCmdResp3+0x7c>)
 8009fca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	24000000 	.word	0x24000000
 8009fe0:	10624dd3 	.word	0x10624dd3
 8009fe4:	002000c5 	.word	0x002000c5

08009fe8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009ff6:	4b35      	ldr	r3, [pc, #212]	; (800a0cc <SDMMC_GetCmdResp6+0xe4>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a35      	ldr	r2, [pc, #212]	; (800a0d0 <SDMMC_GetCmdResp6+0xe8>)
 8009ffc:	fba2 2303 	umull	r2, r3, r2, r3
 800a000:	0a5b      	lsrs	r3, r3, #9
 800a002:	f241 3288 	movw	r2, #5000	; 0x1388
 800a006:	fb02 f303 	mul.w	r3, r2, r3
 800a00a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	1e5a      	subs	r2, r3, #1
 800a010:	61fa      	str	r2, [r7, #28]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d102      	bne.n	800a01c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a016:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a01a:	e052      	b.n	800a0c2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a020:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d0ef      	beq.n	800a00c <SDMMC_GetCmdResp6+0x24>
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1ea      	bne.n	800a00c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a03a:	f003 0304 	and.w	r3, r3, #4
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d004      	beq.n	800a04c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2204      	movs	r2, #4
 800a046:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a048:	2304      	movs	r3, #4
 800a04a:	e03a      	b.n	800a0c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	2b00      	cmp	r3, #0
 800a056:	d004      	beq.n	800a062 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2201      	movs	r2, #1
 800a05c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a05e:	2301      	movs	r3, #1
 800a060:	e02f      	b.n	800a0c2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f7ff fb7c 	bl	8009760 <SDMMC_GetCommandResponse>
 800a068:	4603      	mov	r3, r0
 800a06a:	461a      	mov	r2, r3
 800a06c:	7afb      	ldrb	r3, [r7, #11]
 800a06e:	4293      	cmp	r3, r2
 800a070:	d001      	beq.n	800a076 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a072:	2301      	movs	r3, #1
 800a074:	e025      	b.n	800a0c2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	4a16      	ldr	r2, [pc, #88]	; (800a0d4 <SDMMC_GetCmdResp6+0xec>)
 800a07a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a07c:	2100      	movs	r1, #0
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7ff fb7b 	bl	800977a <SDMMC_GetResponse>
 800a084:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d106      	bne.n	800a09e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	0c1b      	lsrs	r3, r3, #16
 800a094:	b29a      	uxth	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a09a:	2300      	movs	r3, #0
 800a09c:	e011      	b.n	800a0c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a0a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0ac:	e009      	b.n	800a0c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a0b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0bc:	e001      	b.n	800a0c2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a0be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3720      	adds	r7, #32
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	24000000 	.word	0x24000000
 800a0d0:	10624dd3 	.word	0x10624dd3
 800a0d4:	002000c5 	.word	0x002000c5

0800a0d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a0e0:	4b22      	ldr	r3, [pc, #136]	; (800a16c <SDMMC_GetCmdResp7+0x94>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a22      	ldr	r2, [pc, #136]	; (800a170 <SDMMC_GetCmdResp7+0x98>)
 800a0e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ea:	0a5b      	lsrs	r3, r3, #9
 800a0ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0f0:	fb02 f303 	mul.w	r3, r2, r3
 800a0f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	1e5a      	subs	r2, r3, #1
 800a0fa:	60fa      	str	r2, [r7, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d102      	bne.n	800a106 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a100:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a104:	e02c      	b.n	800a160 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a112:	2b00      	cmp	r3, #0
 800a114:	d0ef      	beq.n	800a0f6 <SDMMC_GetCmdResp7+0x1e>
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1ea      	bne.n	800a0f6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d004      	beq.n	800a136 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2204      	movs	r2, #4
 800a130:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a132:	2304      	movs	r3, #4
 800a134:	e014      	b.n	800a160 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a13a:	f003 0301 	and.w	r3, r3, #1
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d004      	beq.n	800a14c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a148:	2301      	movs	r3, #1
 800a14a:	e009      	b.n	800a160 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2240      	movs	r2, #64	; 0x40
 800a15c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a15e:	2300      	movs	r3, #0

}
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	24000000 	.word	0x24000000
 800a170:	10624dd3 	.word	0x10624dd3

0800a174 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a17c:	4b11      	ldr	r3, [pc, #68]	; (800a1c4 <SDMMC_GetCmdError+0x50>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a11      	ldr	r2, [pc, #68]	; (800a1c8 <SDMMC_GetCmdError+0x54>)
 800a182:	fba2 2303 	umull	r2, r3, r2, r3
 800a186:	0a5b      	lsrs	r3, r3, #9
 800a188:	f241 3288 	movw	r2, #5000	; 0x1388
 800a18c:	fb02 f303 	mul.w	r3, r2, r3
 800a190:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	1e5a      	subs	r2, r3, #1
 800a196:	60fa      	str	r2, [r7, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d102      	bne.n	800a1a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a19c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1a0:	e009      	b.n	800a1b6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d0f1      	beq.n	800a192 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a06      	ldr	r2, [pc, #24]	; (800a1cc <SDMMC_GetCmdError+0x58>)
 800a1b2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	24000000 	.word	0x24000000
 800a1c8:	10624dd3 	.word	0x10624dd3
 800a1cc:	002000c5 	.word	0x002000c5

0800a1d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a1d4:	4904      	ldr	r1, [pc, #16]	; (800a1e8 <MX_FATFS_Init+0x18>)
 800a1d6:	4805      	ldr	r0, [pc, #20]	; (800a1ec <MX_FATFS_Init+0x1c>)
 800a1d8:	f000 f9f8 	bl	800a5cc <FATFS_LinkDriver>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	461a      	mov	r2, r3
 800a1e0:	4b03      	ldr	r3, [pc, #12]	; (800a1f0 <MX_FATFS_Init+0x20>)
 800a1e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a1e4:	bf00      	nop
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	2400147c 	.word	0x2400147c
 800a1ec:	0800d3b0 	.word	0x0800d3b0
 800a1f0:	24000341 	.word	0x24000341

0800a1f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a1fe:	f000 f88d 	bl	800a31c <BSP_SD_IsDetected>
 800a202:	4603      	mov	r3, r0
 800a204:	2b01      	cmp	r3, #1
 800a206:	d001      	beq.n	800a20c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a208:	2302      	movs	r3, #2
 800a20a:	e005      	b.n	800a218 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a20c:	4804      	ldr	r0, [pc, #16]	; (800a220 <BSP_SD_Init+0x2c>)
 800a20e:	f7fb fbb7 	bl	8005980 <HAL_SD_Init>
 800a212:	4603      	mov	r3, r0
 800a214:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a216:	79fb      	ldrb	r3, [r7, #7]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	24012554 	.word	0x24012554

0800a224 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b088      	sub	sp, #32
 800a228:	af02      	add	r7, sp, #8
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
 800a230:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	68f9      	ldr	r1, [r7, #12]
 800a240:	4806      	ldr	r0, [pc, #24]	; (800a25c <BSP_SD_ReadBlocks+0x38>)
 800a242:	f7fb fcb7 	bl	8005bb4 <HAL_SD_ReadBlocks>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d001      	beq.n	800a250 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a250:	7dfb      	ldrb	r3, [r7, #23]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	24012554 	.word	0x24012554

0800a260 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af02      	add	r7, sp, #8
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	68f9      	ldr	r1, [r7, #12]
 800a27c:	4806      	ldr	r0, [pc, #24]	; (800a298 <BSP_SD_WriteBlocks+0x38>)
 800a27e:	f7fb fe23 	bl	8005ec8 <HAL_SD_WriteBlocks>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3718      	adds	r7, #24
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	24012554 	.word	0x24012554

0800a29c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a2a0:	4805      	ldr	r0, [pc, #20]	; (800a2b8 <BSP_SD_GetCardState+0x1c>)
 800a2a2:	f7fc fcff 	bl	8006ca4 <HAL_SD_GetCardState>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	bf14      	ite	ne
 800a2ac:	2301      	movne	r3, #1
 800a2ae:	2300      	moveq	r3, #0
 800a2b0:	b2db      	uxtb	r3, r3
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	24012554 	.word	0x24012554

0800a2bc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a2c4:	6879      	ldr	r1, [r7, #4]
 800a2c6:	4803      	ldr	r0, [pc, #12]	; (800a2d4 <BSP_SD_GetCardInfo+0x18>)
 800a2c8:	f7fc fbae 	bl	8006a28 <HAL_SD_GetCardInfo>
}
 800a2cc:	bf00      	nop
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	24012554 	.word	0x24012554

0800a2d8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a2e0:	f000 f80e 	bl	800a300 <BSP_SD_WriteCpltCallback>
}
 800a2e4:	bf00      	nop
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a2f4:	f000 f80b 	bl	800a30e <BSP_SD_ReadCpltCallback>
}
 800a2f8:	bf00      	nop
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800a300:	b480      	push	{r7}
 800a302:	af00      	add	r7, sp, #0

}
 800a304:	bf00      	nop
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800a30e:	b480      	push	{r7}
 800a310:	af00      	add	r7, sp, #0

}
 800a312:	bf00      	nop
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a322:	2301      	movs	r3, #1
 800a324:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a326:	f000 f80b 	bl	800a340 <BSP_PlatformIsDetected>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a330:	2300      	movs	r3, #0
 800a332:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a334:	79fb      	ldrb	r3, [r7, #7]
 800a336:	b2db      	uxtb	r3, r3
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a346:	2301      	movs	r3, #1
 800a348:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a34a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a34e:	4806      	ldr	r0, [pc, #24]	; (800a368 <BSP_PlatformIsDetected+0x28>)
 800a350:	f7f8 fa50 	bl	80027f4 <HAL_GPIO_ReadPin>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a35a:	2300      	movs	r3, #0
 800a35c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a35e:	79fb      	ldrb	r3, [r7, #7]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	58020800 	.word	0x58020800

0800a36c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	4603      	mov	r3, r0
 800a374:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a376:	4b0b      	ldr	r3, [pc, #44]	; (800a3a4 <SD_CheckStatus+0x38>)
 800a378:	2201      	movs	r2, #1
 800a37a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a37c:	f7ff ff8e 	bl	800a29c <BSP_SD_GetCardState>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d107      	bne.n	800a396 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a386:	4b07      	ldr	r3, [pc, #28]	; (800a3a4 <SD_CheckStatus+0x38>)
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	f023 0301 	bic.w	r3, r3, #1
 800a390:	b2da      	uxtb	r2, r3
 800a392:	4b04      	ldr	r3, [pc, #16]	; (800a3a4 <SD_CheckStatus+0x38>)
 800a394:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a396:	4b03      	ldr	r3, [pc, #12]	; (800a3a4 <SD_CheckStatus+0x38>)
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	b2db      	uxtb	r3, r3
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	2400000d 	.word	0x2400000d

0800a3a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a3b2:	4b0b      	ldr	r3, [pc, #44]	; (800a3e0 <SD_initialize+0x38>)
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a3b8:	f7ff ff1c 	bl	800a1f4 <BSP_SD_Init>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d107      	bne.n	800a3d2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a3c2:	79fb      	ldrb	r3, [r7, #7]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff ffd1 	bl	800a36c <SD_CheckStatus>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <SD_initialize+0x38>)
 800a3d0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a3d2:	4b03      	ldr	r3, [pc, #12]	; (800a3e0 <SD_initialize+0x38>)
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	b2db      	uxtb	r3, r3
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	2400000d 	.word	0x2400000d

0800a3e4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7ff ffbb 	bl	800a36c <SD_CheckStatus>
 800a3f6:	4603      	mov	r3, r0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	60b9      	str	r1, [r7, #8]
 800a408:	607a      	str	r2, [r7, #4]
 800a40a:	603b      	str	r3, [r7, #0]
 800a40c:	4603      	mov	r3, r0
 800a40e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a414:	f04f 33ff 	mov.w	r3, #4294967295
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	6879      	ldr	r1, [r7, #4]
 800a41c:	68b8      	ldr	r0, [r7, #8]
 800a41e:	f7ff ff01 	bl	800a224 <BSP_SD_ReadBlocks>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d107      	bne.n	800a438 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a428:	bf00      	nop
 800a42a:	f7ff ff37 	bl	800a29c <BSP_SD_GetCardState>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1fa      	bne.n	800a42a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a438:	7dfb      	ldrb	r3, [r7, #23]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3718      	adds	r7, #24
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b086      	sub	sp, #24
 800a446:	af00      	add	r7, sp, #0
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]
 800a44e:	4603      	mov	r3, r0
 800a450:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a456:	f04f 33ff 	mov.w	r3, #4294967295
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	6879      	ldr	r1, [r7, #4]
 800a45e:	68b8      	ldr	r0, [r7, #8]
 800a460:	f7ff fefe 	bl	800a260 <BSP_SD_WriteBlocks>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d107      	bne.n	800a47a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a46a:	bf00      	nop
 800a46c:	f7ff ff16 	bl	800a29c <BSP_SD_GetCardState>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1fa      	bne.n	800a46c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b08c      	sub	sp, #48	; 0x30
 800a488:	af00      	add	r7, sp, #0
 800a48a:	4603      	mov	r3, r0
 800a48c:	603a      	str	r2, [r7, #0]
 800a48e:	71fb      	strb	r3, [r7, #7]
 800a490:	460b      	mov	r3, r1
 800a492:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a49a:	4b25      	ldr	r3, [pc, #148]	; (800a530 <SD_ioctl+0xac>)
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <SD_ioctl+0x28>
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e03c      	b.n	800a526 <SD_ioctl+0xa2>

  switch (cmd)
 800a4ac:	79bb      	ldrb	r3, [r7, #6]
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d834      	bhi.n	800a51c <SD_ioctl+0x98>
 800a4b2:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <SD_ioctl+0x34>)
 800a4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b8:	0800a4c9 	.word	0x0800a4c9
 800a4bc:	0800a4d1 	.word	0x0800a4d1
 800a4c0:	0800a4e9 	.word	0x0800a4e9
 800a4c4:	0800a503 	.word	0x0800a503
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4ce:	e028      	b.n	800a522 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a4d0:	f107 0308 	add.w	r3, r7, #8
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7ff fef1 	bl	800a2bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a4da:	6a3a      	ldr	r2, [r7, #32]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4e6:	e01c      	b.n	800a522 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a4e8:	f107 0308 	add.w	r3, r7, #8
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7ff fee5 	bl	800a2bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a500:	e00f      	b.n	800a522 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a502:	f107 0308 	add.w	r3, r7, #8
 800a506:	4618      	mov	r0, r3
 800a508:	f7ff fed8 	bl	800a2bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	0a5a      	lsrs	r2, r3, #9
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a51a:	e002      	b.n	800a522 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a51c:	2304      	movs	r3, #4
 800a51e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a526:	4618      	mov	r0, r3
 800a528:	3730      	adds	r7, #48	; 0x30
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	2400000d 	.word	0x2400000d

0800a534 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a534:	b480      	push	{r7}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	4613      	mov	r3, r2
 800a540:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a542:	2301      	movs	r3, #1
 800a544:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a54a:	4b1f      	ldr	r3, [pc, #124]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a54c:	7a5b      	ldrb	r3, [r3, #9]
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b00      	cmp	r3, #0
 800a552:	d131      	bne.n	800a5b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a554:	4b1c      	ldr	r3, [pc, #112]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a556:	7a5b      	ldrb	r3, [r3, #9]
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	461a      	mov	r2, r3
 800a55c:	4b1a      	ldr	r3, [pc, #104]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a55e:	2100      	movs	r1, #0
 800a560:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a562:	4b19      	ldr	r3, [pc, #100]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a564:	7a5b      	ldrb	r3, [r3, #9]
 800a566:	b2db      	uxtb	r3, r3
 800a568:	4a17      	ldr	r2, [pc, #92]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a572:	4b15      	ldr	r3, [pc, #84]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a574:	7a5b      	ldrb	r3, [r3, #9]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	461a      	mov	r2, r3
 800a57a:	4b13      	ldr	r3, [pc, #76]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a57c:	4413      	add	r3, r2
 800a57e:	79fa      	ldrb	r2, [r7, #7]
 800a580:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a582:	4b11      	ldr	r3, [pc, #68]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a584:	7a5b      	ldrb	r3, [r3, #9]
 800a586:	b2db      	uxtb	r3, r3
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	b2d1      	uxtb	r1, r2
 800a58c:	4a0e      	ldr	r2, [pc, #56]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a58e:	7251      	strb	r1, [r2, #9]
 800a590:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a592:	7dbb      	ldrb	r3, [r7, #22]
 800a594:	3330      	adds	r3, #48	; 0x30
 800a596:	b2da      	uxtb	r2, r3
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	223a      	movs	r2, #58	; 0x3a
 800a5a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	3302      	adds	r3, #2
 800a5a8:	222f      	movs	r2, #47	; 0x2f
 800a5aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	3303      	adds	r3, #3
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	371c      	adds	r7, #28
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	2400027c 	.word	0x2400027c

0800a5cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	6839      	ldr	r1, [r7, #0]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff ffaa 	bl	800a534 <FATFS_LinkDriverEx>
 800a5e0:	4603      	mov	r3, r0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
	...

0800a5ec <__errno>:
 800a5ec:	4b01      	ldr	r3, [pc, #4]	; (800a5f4 <__errno+0x8>)
 800a5ee:	6818      	ldr	r0, [r3, #0]
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	24000010 	.word	0x24000010

0800a5f8 <__libc_init_array>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	4d0d      	ldr	r5, [pc, #52]	; (800a630 <__libc_init_array+0x38>)
 800a5fc:	4c0d      	ldr	r4, [pc, #52]	; (800a634 <__libc_init_array+0x3c>)
 800a5fe:	1b64      	subs	r4, r4, r5
 800a600:	10a4      	asrs	r4, r4, #2
 800a602:	2600      	movs	r6, #0
 800a604:	42a6      	cmp	r6, r4
 800a606:	d109      	bne.n	800a61c <__libc_init_array+0x24>
 800a608:	4d0b      	ldr	r5, [pc, #44]	; (800a638 <__libc_init_array+0x40>)
 800a60a:	4c0c      	ldr	r4, [pc, #48]	; (800a63c <__libc_init_array+0x44>)
 800a60c:	f002 fe9c 	bl	800d348 <_init>
 800a610:	1b64      	subs	r4, r4, r5
 800a612:	10a4      	asrs	r4, r4, #2
 800a614:	2600      	movs	r6, #0
 800a616:	42a6      	cmp	r6, r4
 800a618:	d105      	bne.n	800a626 <__libc_init_array+0x2e>
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a620:	4798      	blx	r3
 800a622:	3601      	adds	r6, #1
 800a624:	e7ee      	b.n	800a604 <__libc_init_array+0xc>
 800a626:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62a:	4798      	blx	r3
 800a62c:	3601      	adds	r6, #1
 800a62e:	e7f2      	b.n	800a616 <__libc_init_array+0x1e>
 800a630:	0800d7ac 	.word	0x0800d7ac
 800a634:	0800d7ac 	.word	0x0800d7ac
 800a638:	0800d7ac 	.word	0x0800d7ac
 800a63c:	0800d7b0 	.word	0x0800d7b0

0800a640 <memset>:
 800a640:	4402      	add	r2, r0
 800a642:	4603      	mov	r3, r0
 800a644:	4293      	cmp	r3, r2
 800a646:	d100      	bne.n	800a64a <memset+0xa>
 800a648:	4770      	bx	lr
 800a64a:	f803 1b01 	strb.w	r1, [r3], #1
 800a64e:	e7f9      	b.n	800a644 <memset+0x4>

0800a650 <__cvt>:
 800a650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a652:	ed2d 8b02 	vpush	{d8}
 800a656:	eeb0 8b40 	vmov.f64	d8, d0
 800a65a:	b085      	sub	sp, #20
 800a65c:	4617      	mov	r7, r2
 800a65e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a660:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a662:	ee18 2a90 	vmov	r2, s17
 800a666:	f025 0520 	bic.w	r5, r5, #32
 800a66a:	2a00      	cmp	r2, #0
 800a66c:	bfb6      	itet	lt
 800a66e:	222d      	movlt	r2, #45	; 0x2d
 800a670:	2200      	movge	r2, #0
 800a672:	eeb1 8b40 	vneglt.f64	d8, d0
 800a676:	2d46      	cmp	r5, #70	; 0x46
 800a678:	460c      	mov	r4, r1
 800a67a:	701a      	strb	r2, [r3, #0]
 800a67c:	d004      	beq.n	800a688 <__cvt+0x38>
 800a67e:	2d45      	cmp	r5, #69	; 0x45
 800a680:	d100      	bne.n	800a684 <__cvt+0x34>
 800a682:	3401      	adds	r4, #1
 800a684:	2102      	movs	r1, #2
 800a686:	e000      	b.n	800a68a <__cvt+0x3a>
 800a688:	2103      	movs	r1, #3
 800a68a:	ab03      	add	r3, sp, #12
 800a68c:	9301      	str	r3, [sp, #4]
 800a68e:	ab02      	add	r3, sp, #8
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	4622      	mov	r2, r4
 800a694:	4633      	mov	r3, r6
 800a696:	eeb0 0b48 	vmov.f64	d0, d8
 800a69a:	f000 fcc9 	bl	800b030 <_dtoa_r>
 800a69e:	2d47      	cmp	r5, #71	; 0x47
 800a6a0:	d109      	bne.n	800a6b6 <__cvt+0x66>
 800a6a2:	07fb      	lsls	r3, r7, #31
 800a6a4:	d407      	bmi.n	800a6b6 <__cvt+0x66>
 800a6a6:	9b03      	ldr	r3, [sp, #12]
 800a6a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6aa:	1a1b      	subs	r3, r3, r0
 800a6ac:	6013      	str	r3, [r2, #0]
 800a6ae:	b005      	add	sp, #20
 800a6b0:	ecbd 8b02 	vpop	{d8}
 800a6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6b6:	2d46      	cmp	r5, #70	; 0x46
 800a6b8:	eb00 0204 	add.w	r2, r0, r4
 800a6bc:	d10c      	bne.n	800a6d8 <__cvt+0x88>
 800a6be:	7803      	ldrb	r3, [r0, #0]
 800a6c0:	2b30      	cmp	r3, #48	; 0x30
 800a6c2:	d107      	bne.n	800a6d4 <__cvt+0x84>
 800a6c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6cc:	bf1c      	itt	ne
 800a6ce:	f1c4 0401 	rsbne	r4, r4, #1
 800a6d2:	6034      	strne	r4, [r6, #0]
 800a6d4:	6833      	ldr	r3, [r6, #0]
 800a6d6:	441a      	add	r2, r3
 800a6d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e0:	bf08      	it	eq
 800a6e2:	9203      	streq	r2, [sp, #12]
 800a6e4:	2130      	movs	r1, #48	; 0x30
 800a6e6:	9b03      	ldr	r3, [sp, #12]
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d2dc      	bcs.n	800a6a6 <__cvt+0x56>
 800a6ec:	1c5c      	adds	r4, r3, #1
 800a6ee:	9403      	str	r4, [sp, #12]
 800a6f0:	7019      	strb	r1, [r3, #0]
 800a6f2:	e7f8      	b.n	800a6e6 <__cvt+0x96>

0800a6f4 <__exponent>:
 800a6f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2900      	cmp	r1, #0
 800a6fa:	bfb8      	it	lt
 800a6fc:	4249      	neglt	r1, r1
 800a6fe:	f803 2b02 	strb.w	r2, [r3], #2
 800a702:	bfb4      	ite	lt
 800a704:	222d      	movlt	r2, #45	; 0x2d
 800a706:	222b      	movge	r2, #43	; 0x2b
 800a708:	2909      	cmp	r1, #9
 800a70a:	7042      	strb	r2, [r0, #1]
 800a70c:	dd2a      	ble.n	800a764 <__exponent+0x70>
 800a70e:	f10d 0407 	add.w	r4, sp, #7
 800a712:	46a4      	mov	ip, r4
 800a714:	270a      	movs	r7, #10
 800a716:	46a6      	mov	lr, r4
 800a718:	460a      	mov	r2, r1
 800a71a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a71e:	fb07 1516 	mls	r5, r7, r6, r1
 800a722:	3530      	adds	r5, #48	; 0x30
 800a724:	2a63      	cmp	r2, #99	; 0x63
 800a726:	f104 34ff 	add.w	r4, r4, #4294967295
 800a72a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a72e:	4631      	mov	r1, r6
 800a730:	dcf1      	bgt.n	800a716 <__exponent+0x22>
 800a732:	3130      	adds	r1, #48	; 0x30
 800a734:	f1ae 0502 	sub.w	r5, lr, #2
 800a738:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a73c:	1c44      	adds	r4, r0, #1
 800a73e:	4629      	mov	r1, r5
 800a740:	4561      	cmp	r1, ip
 800a742:	d30a      	bcc.n	800a75a <__exponent+0x66>
 800a744:	f10d 0209 	add.w	r2, sp, #9
 800a748:	eba2 020e 	sub.w	r2, r2, lr
 800a74c:	4565      	cmp	r5, ip
 800a74e:	bf88      	it	hi
 800a750:	2200      	movhi	r2, #0
 800a752:	4413      	add	r3, r2
 800a754:	1a18      	subs	r0, r3, r0
 800a756:	b003      	add	sp, #12
 800a758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a75a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a75e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a762:	e7ed      	b.n	800a740 <__exponent+0x4c>
 800a764:	2330      	movs	r3, #48	; 0x30
 800a766:	3130      	adds	r1, #48	; 0x30
 800a768:	7083      	strb	r3, [r0, #2]
 800a76a:	70c1      	strb	r1, [r0, #3]
 800a76c:	1d03      	adds	r3, r0, #4
 800a76e:	e7f1      	b.n	800a754 <__exponent+0x60>

0800a770 <_printf_float>:
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	b08b      	sub	sp, #44	; 0x2c
 800a776:	460c      	mov	r4, r1
 800a778:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a77c:	4616      	mov	r6, r2
 800a77e:	461f      	mov	r7, r3
 800a780:	4605      	mov	r5, r0
 800a782:	f001 f9d7 	bl	800bb34 <_localeconv_r>
 800a786:	f8d0 b000 	ldr.w	fp, [r0]
 800a78a:	4658      	mov	r0, fp
 800a78c:	f7f5 fdb0 	bl	80002f0 <strlen>
 800a790:	2300      	movs	r3, #0
 800a792:	9308      	str	r3, [sp, #32]
 800a794:	f8d8 3000 	ldr.w	r3, [r8]
 800a798:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a79c:	6822      	ldr	r2, [r4, #0]
 800a79e:	3307      	adds	r3, #7
 800a7a0:	f023 0307 	bic.w	r3, r3, #7
 800a7a4:	f103 0108 	add.w	r1, r3, #8
 800a7a8:	f8c8 1000 	str.w	r1, [r8]
 800a7ac:	4682      	mov	sl, r0
 800a7ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a7b6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800aa18 <_printf_float+0x2a8>
 800a7ba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a7be:	eeb0 6bc0 	vabs.f64	d6, d0
 800a7c2:	eeb4 6b47 	vcmp.f64	d6, d7
 800a7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ca:	dd24      	ble.n	800a816 <_printf_float+0xa6>
 800a7cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d4:	d502      	bpl.n	800a7dc <_printf_float+0x6c>
 800a7d6:	232d      	movs	r3, #45	; 0x2d
 800a7d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7dc:	4b90      	ldr	r3, [pc, #576]	; (800aa20 <_printf_float+0x2b0>)
 800a7de:	4891      	ldr	r0, [pc, #580]	; (800aa24 <_printf_float+0x2b4>)
 800a7e0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a7e4:	bf94      	ite	ls
 800a7e6:	4698      	movls	r8, r3
 800a7e8:	4680      	movhi	r8, r0
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	6123      	str	r3, [r4, #16]
 800a7ee:	f022 0204 	bic.w	r2, r2, #4
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	6022      	str	r2, [r4, #0]
 800a7f6:	9304      	str	r3, [sp, #16]
 800a7f8:	9700      	str	r7, [sp, #0]
 800a7fa:	4633      	mov	r3, r6
 800a7fc:	aa09      	add	r2, sp, #36	; 0x24
 800a7fe:	4621      	mov	r1, r4
 800a800:	4628      	mov	r0, r5
 800a802:	f000 f9d3 	bl	800abac <_printf_common>
 800a806:	3001      	adds	r0, #1
 800a808:	f040 808a 	bne.w	800a920 <_printf_float+0x1b0>
 800a80c:	f04f 30ff 	mov.w	r0, #4294967295
 800a810:	b00b      	add	sp, #44	; 0x2c
 800a812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a816:	eeb4 0b40 	vcmp.f64	d0, d0
 800a81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81e:	d709      	bvc.n	800a834 <_printf_float+0xc4>
 800a820:	ee10 3a90 	vmov	r3, s1
 800a824:	2b00      	cmp	r3, #0
 800a826:	bfbc      	itt	lt
 800a828:	232d      	movlt	r3, #45	; 0x2d
 800a82a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a82e:	487e      	ldr	r0, [pc, #504]	; (800aa28 <_printf_float+0x2b8>)
 800a830:	4b7e      	ldr	r3, [pc, #504]	; (800aa2c <_printf_float+0x2bc>)
 800a832:	e7d5      	b.n	800a7e0 <_printf_float+0x70>
 800a834:	6863      	ldr	r3, [r4, #4]
 800a836:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a83a:	9104      	str	r1, [sp, #16]
 800a83c:	1c59      	adds	r1, r3, #1
 800a83e:	d13c      	bne.n	800a8ba <_printf_float+0x14a>
 800a840:	2306      	movs	r3, #6
 800a842:	6063      	str	r3, [r4, #4]
 800a844:	2300      	movs	r3, #0
 800a846:	9303      	str	r3, [sp, #12]
 800a848:	ab08      	add	r3, sp, #32
 800a84a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a84e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a852:	ab07      	add	r3, sp, #28
 800a854:	6861      	ldr	r1, [r4, #4]
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	6022      	str	r2, [r4, #0]
 800a85a:	f10d 031b 	add.w	r3, sp, #27
 800a85e:	4628      	mov	r0, r5
 800a860:	f7ff fef6 	bl	800a650 <__cvt>
 800a864:	9b04      	ldr	r3, [sp, #16]
 800a866:	9907      	ldr	r1, [sp, #28]
 800a868:	2b47      	cmp	r3, #71	; 0x47
 800a86a:	4680      	mov	r8, r0
 800a86c:	d108      	bne.n	800a880 <_printf_float+0x110>
 800a86e:	1cc8      	adds	r0, r1, #3
 800a870:	db02      	blt.n	800a878 <_printf_float+0x108>
 800a872:	6863      	ldr	r3, [r4, #4]
 800a874:	4299      	cmp	r1, r3
 800a876:	dd41      	ble.n	800a8fc <_printf_float+0x18c>
 800a878:	f1a9 0902 	sub.w	r9, r9, #2
 800a87c:	fa5f f989 	uxtb.w	r9, r9
 800a880:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a884:	d820      	bhi.n	800a8c8 <_printf_float+0x158>
 800a886:	3901      	subs	r1, #1
 800a888:	464a      	mov	r2, r9
 800a88a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a88e:	9107      	str	r1, [sp, #28]
 800a890:	f7ff ff30 	bl	800a6f4 <__exponent>
 800a894:	9a08      	ldr	r2, [sp, #32]
 800a896:	9004      	str	r0, [sp, #16]
 800a898:	1813      	adds	r3, r2, r0
 800a89a:	2a01      	cmp	r2, #1
 800a89c:	6123      	str	r3, [r4, #16]
 800a89e:	dc02      	bgt.n	800a8a6 <_printf_float+0x136>
 800a8a0:	6822      	ldr	r2, [r4, #0]
 800a8a2:	07d2      	lsls	r2, r2, #31
 800a8a4:	d501      	bpl.n	800a8aa <_printf_float+0x13a>
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	6123      	str	r3, [r4, #16]
 800a8aa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d0a2      	beq.n	800a7f8 <_printf_float+0x88>
 800a8b2:	232d      	movs	r3, #45	; 0x2d
 800a8b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8b8:	e79e      	b.n	800a7f8 <_printf_float+0x88>
 800a8ba:	9904      	ldr	r1, [sp, #16]
 800a8bc:	2947      	cmp	r1, #71	; 0x47
 800a8be:	d1c1      	bne.n	800a844 <_printf_float+0xd4>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1bf      	bne.n	800a844 <_printf_float+0xd4>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e7bc      	b.n	800a842 <_printf_float+0xd2>
 800a8c8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a8cc:	d118      	bne.n	800a900 <_printf_float+0x190>
 800a8ce:	2900      	cmp	r1, #0
 800a8d0:	6863      	ldr	r3, [r4, #4]
 800a8d2:	dd0b      	ble.n	800a8ec <_printf_float+0x17c>
 800a8d4:	6121      	str	r1, [r4, #16]
 800a8d6:	b913      	cbnz	r3, 800a8de <_printf_float+0x16e>
 800a8d8:	6822      	ldr	r2, [r4, #0]
 800a8da:	07d0      	lsls	r0, r2, #31
 800a8dc:	d502      	bpl.n	800a8e4 <_printf_float+0x174>
 800a8de:	3301      	adds	r3, #1
 800a8e0:	440b      	add	r3, r1
 800a8e2:	6123      	str	r3, [r4, #16]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a8e8:	9304      	str	r3, [sp, #16]
 800a8ea:	e7de      	b.n	800a8aa <_printf_float+0x13a>
 800a8ec:	b913      	cbnz	r3, 800a8f4 <_printf_float+0x184>
 800a8ee:	6822      	ldr	r2, [r4, #0]
 800a8f0:	07d2      	lsls	r2, r2, #31
 800a8f2:	d501      	bpl.n	800a8f8 <_printf_float+0x188>
 800a8f4:	3302      	adds	r3, #2
 800a8f6:	e7f4      	b.n	800a8e2 <_printf_float+0x172>
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e7f2      	b.n	800a8e2 <_printf_float+0x172>
 800a8fc:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a900:	9b08      	ldr	r3, [sp, #32]
 800a902:	4299      	cmp	r1, r3
 800a904:	db05      	blt.n	800a912 <_printf_float+0x1a2>
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	6121      	str	r1, [r4, #16]
 800a90a:	07d8      	lsls	r0, r3, #31
 800a90c:	d5ea      	bpl.n	800a8e4 <_printf_float+0x174>
 800a90e:	1c4b      	adds	r3, r1, #1
 800a910:	e7e7      	b.n	800a8e2 <_printf_float+0x172>
 800a912:	2900      	cmp	r1, #0
 800a914:	bfd4      	ite	le
 800a916:	f1c1 0202 	rsble	r2, r1, #2
 800a91a:	2201      	movgt	r2, #1
 800a91c:	4413      	add	r3, r2
 800a91e:	e7e0      	b.n	800a8e2 <_printf_float+0x172>
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	055a      	lsls	r2, r3, #21
 800a924:	d407      	bmi.n	800a936 <_printf_float+0x1c6>
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	4642      	mov	r2, r8
 800a92a:	4631      	mov	r1, r6
 800a92c:	4628      	mov	r0, r5
 800a92e:	47b8      	blx	r7
 800a930:	3001      	adds	r0, #1
 800a932:	d12a      	bne.n	800a98a <_printf_float+0x21a>
 800a934:	e76a      	b.n	800a80c <_printf_float+0x9c>
 800a936:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a93a:	f240 80e2 	bls.w	800ab02 <_printf_float+0x392>
 800a93e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a942:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94a:	d133      	bne.n	800a9b4 <_printf_float+0x244>
 800a94c:	4a38      	ldr	r2, [pc, #224]	; (800aa30 <_printf_float+0x2c0>)
 800a94e:	2301      	movs	r3, #1
 800a950:	4631      	mov	r1, r6
 800a952:	4628      	mov	r0, r5
 800a954:	47b8      	blx	r7
 800a956:	3001      	adds	r0, #1
 800a958:	f43f af58 	beq.w	800a80c <_printf_float+0x9c>
 800a95c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a960:	429a      	cmp	r2, r3
 800a962:	db02      	blt.n	800a96a <_printf_float+0x1fa>
 800a964:	6823      	ldr	r3, [r4, #0]
 800a966:	07d8      	lsls	r0, r3, #31
 800a968:	d50f      	bpl.n	800a98a <_printf_float+0x21a>
 800a96a:	4653      	mov	r3, sl
 800a96c:	465a      	mov	r2, fp
 800a96e:	4631      	mov	r1, r6
 800a970:	4628      	mov	r0, r5
 800a972:	47b8      	blx	r7
 800a974:	3001      	adds	r0, #1
 800a976:	f43f af49 	beq.w	800a80c <_printf_float+0x9c>
 800a97a:	f04f 0800 	mov.w	r8, #0
 800a97e:	f104 091a 	add.w	r9, r4, #26
 800a982:	9b08      	ldr	r3, [sp, #32]
 800a984:	3b01      	subs	r3, #1
 800a986:	4543      	cmp	r3, r8
 800a988:	dc09      	bgt.n	800a99e <_printf_float+0x22e>
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	079b      	lsls	r3, r3, #30
 800a98e:	f100 8108 	bmi.w	800aba2 <_printf_float+0x432>
 800a992:	68e0      	ldr	r0, [r4, #12]
 800a994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a996:	4298      	cmp	r0, r3
 800a998:	bfb8      	it	lt
 800a99a:	4618      	movlt	r0, r3
 800a99c:	e738      	b.n	800a810 <_printf_float+0xa0>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	464a      	mov	r2, r9
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	47b8      	blx	r7
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	f43f af2f 	beq.w	800a80c <_printf_float+0x9c>
 800a9ae:	f108 0801 	add.w	r8, r8, #1
 800a9b2:	e7e6      	b.n	800a982 <_printf_float+0x212>
 800a9b4:	9b07      	ldr	r3, [sp, #28]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	dc3c      	bgt.n	800aa34 <_printf_float+0x2c4>
 800a9ba:	4a1d      	ldr	r2, [pc, #116]	; (800aa30 <_printf_float+0x2c0>)
 800a9bc:	2301      	movs	r3, #1
 800a9be:	4631      	mov	r1, r6
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	47b8      	blx	r7
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	f43f af21 	beq.w	800a80c <_printf_float+0x9c>
 800a9ca:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	d102      	bne.n	800a9d8 <_printf_float+0x268>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	07d9      	lsls	r1, r3, #31
 800a9d6:	d5d8      	bpl.n	800a98a <_printf_float+0x21a>
 800a9d8:	4653      	mov	r3, sl
 800a9da:	465a      	mov	r2, fp
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4628      	mov	r0, r5
 800a9e0:	47b8      	blx	r7
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	f43f af12 	beq.w	800a80c <_printf_float+0x9c>
 800a9e8:	f04f 0900 	mov.w	r9, #0
 800a9ec:	f104 0a1a 	add.w	sl, r4, #26
 800a9f0:	9b07      	ldr	r3, [sp, #28]
 800a9f2:	425b      	negs	r3, r3
 800a9f4:	454b      	cmp	r3, r9
 800a9f6:	dc01      	bgt.n	800a9fc <_printf_float+0x28c>
 800a9f8:	9b08      	ldr	r3, [sp, #32]
 800a9fa:	e795      	b.n	800a928 <_printf_float+0x1b8>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	4652      	mov	r2, sl
 800aa00:	4631      	mov	r1, r6
 800aa02:	4628      	mov	r0, r5
 800aa04:	47b8      	blx	r7
 800aa06:	3001      	adds	r0, #1
 800aa08:	f43f af00 	beq.w	800a80c <_printf_float+0x9c>
 800aa0c:	f109 0901 	add.w	r9, r9, #1
 800aa10:	e7ee      	b.n	800a9f0 <_printf_float+0x280>
 800aa12:	bf00      	nop
 800aa14:	f3af 8000 	nop.w
 800aa18:	ffffffff 	.word	0xffffffff
 800aa1c:	7fefffff 	.word	0x7fefffff
 800aa20:	0800d3c8 	.word	0x0800d3c8
 800aa24:	0800d3cc 	.word	0x0800d3cc
 800aa28:	0800d3d4 	.word	0x0800d3d4
 800aa2c:	0800d3d0 	.word	0x0800d3d0
 800aa30:	0800d3d8 	.word	0x0800d3d8
 800aa34:	9a08      	ldr	r2, [sp, #32]
 800aa36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	bfa8      	it	ge
 800aa3c:	461a      	movge	r2, r3
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	4691      	mov	r9, r2
 800aa42:	dc38      	bgt.n	800aab6 <_printf_float+0x346>
 800aa44:	2300      	movs	r3, #0
 800aa46:	9305      	str	r3, [sp, #20]
 800aa48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa4c:	f104 021a 	add.w	r2, r4, #26
 800aa50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa52:	9905      	ldr	r1, [sp, #20]
 800aa54:	9304      	str	r3, [sp, #16]
 800aa56:	eba3 0309 	sub.w	r3, r3, r9
 800aa5a:	428b      	cmp	r3, r1
 800aa5c:	dc33      	bgt.n	800aac6 <_printf_float+0x356>
 800aa5e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	db3c      	blt.n	800aae0 <_printf_float+0x370>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	07da      	lsls	r2, r3, #31
 800aa6a:	d439      	bmi.n	800aae0 <_printf_float+0x370>
 800aa6c:	9a08      	ldr	r2, [sp, #32]
 800aa6e:	9b04      	ldr	r3, [sp, #16]
 800aa70:	9907      	ldr	r1, [sp, #28]
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	eba2 0901 	sub.w	r9, r2, r1
 800aa78:	4599      	cmp	r9, r3
 800aa7a:	bfa8      	it	ge
 800aa7c:	4699      	movge	r9, r3
 800aa7e:	f1b9 0f00 	cmp.w	r9, #0
 800aa82:	dc35      	bgt.n	800aaf0 <_printf_float+0x380>
 800aa84:	f04f 0800 	mov.w	r8, #0
 800aa88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa8c:	f104 0a1a 	add.w	sl, r4, #26
 800aa90:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800aa94:	1a9b      	subs	r3, r3, r2
 800aa96:	eba3 0309 	sub.w	r3, r3, r9
 800aa9a:	4543      	cmp	r3, r8
 800aa9c:	f77f af75 	ble.w	800a98a <_printf_float+0x21a>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	4652      	mov	r2, sl
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	47b8      	blx	r7
 800aaaa:	3001      	adds	r0, #1
 800aaac:	f43f aeae 	beq.w	800a80c <_printf_float+0x9c>
 800aab0:	f108 0801 	add.w	r8, r8, #1
 800aab4:	e7ec      	b.n	800aa90 <_printf_float+0x320>
 800aab6:	4613      	mov	r3, r2
 800aab8:	4631      	mov	r1, r6
 800aaba:	4642      	mov	r2, r8
 800aabc:	4628      	mov	r0, r5
 800aabe:	47b8      	blx	r7
 800aac0:	3001      	adds	r0, #1
 800aac2:	d1bf      	bne.n	800aa44 <_printf_float+0x2d4>
 800aac4:	e6a2      	b.n	800a80c <_printf_float+0x9c>
 800aac6:	2301      	movs	r3, #1
 800aac8:	4631      	mov	r1, r6
 800aaca:	4628      	mov	r0, r5
 800aacc:	9204      	str	r2, [sp, #16]
 800aace:	47b8      	blx	r7
 800aad0:	3001      	adds	r0, #1
 800aad2:	f43f ae9b 	beq.w	800a80c <_printf_float+0x9c>
 800aad6:	9b05      	ldr	r3, [sp, #20]
 800aad8:	9a04      	ldr	r2, [sp, #16]
 800aada:	3301      	adds	r3, #1
 800aadc:	9305      	str	r3, [sp, #20]
 800aade:	e7b7      	b.n	800aa50 <_printf_float+0x2e0>
 800aae0:	4653      	mov	r3, sl
 800aae2:	465a      	mov	r2, fp
 800aae4:	4631      	mov	r1, r6
 800aae6:	4628      	mov	r0, r5
 800aae8:	47b8      	blx	r7
 800aaea:	3001      	adds	r0, #1
 800aaec:	d1be      	bne.n	800aa6c <_printf_float+0x2fc>
 800aaee:	e68d      	b.n	800a80c <_printf_float+0x9c>
 800aaf0:	9a04      	ldr	r2, [sp, #16]
 800aaf2:	464b      	mov	r3, r9
 800aaf4:	4442      	add	r2, r8
 800aaf6:	4631      	mov	r1, r6
 800aaf8:	4628      	mov	r0, r5
 800aafa:	47b8      	blx	r7
 800aafc:	3001      	adds	r0, #1
 800aafe:	d1c1      	bne.n	800aa84 <_printf_float+0x314>
 800ab00:	e684      	b.n	800a80c <_printf_float+0x9c>
 800ab02:	9a08      	ldr	r2, [sp, #32]
 800ab04:	2a01      	cmp	r2, #1
 800ab06:	dc01      	bgt.n	800ab0c <_printf_float+0x39c>
 800ab08:	07db      	lsls	r3, r3, #31
 800ab0a:	d537      	bpl.n	800ab7c <_printf_float+0x40c>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	4642      	mov	r2, r8
 800ab10:	4631      	mov	r1, r6
 800ab12:	4628      	mov	r0, r5
 800ab14:	47b8      	blx	r7
 800ab16:	3001      	adds	r0, #1
 800ab18:	f43f ae78 	beq.w	800a80c <_printf_float+0x9c>
 800ab1c:	4653      	mov	r3, sl
 800ab1e:	465a      	mov	r2, fp
 800ab20:	4631      	mov	r1, r6
 800ab22:	4628      	mov	r0, r5
 800ab24:	47b8      	blx	r7
 800ab26:	3001      	adds	r0, #1
 800ab28:	f43f ae70 	beq.w	800a80c <_printf_float+0x9c>
 800ab2c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ab30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab38:	d01b      	beq.n	800ab72 <_printf_float+0x402>
 800ab3a:	9b08      	ldr	r3, [sp, #32]
 800ab3c:	f108 0201 	add.w	r2, r8, #1
 800ab40:	3b01      	subs	r3, #1
 800ab42:	4631      	mov	r1, r6
 800ab44:	4628      	mov	r0, r5
 800ab46:	47b8      	blx	r7
 800ab48:	3001      	adds	r0, #1
 800ab4a:	d10e      	bne.n	800ab6a <_printf_float+0x3fa>
 800ab4c:	e65e      	b.n	800a80c <_printf_float+0x9c>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	464a      	mov	r2, r9
 800ab52:	4631      	mov	r1, r6
 800ab54:	4628      	mov	r0, r5
 800ab56:	47b8      	blx	r7
 800ab58:	3001      	adds	r0, #1
 800ab5a:	f43f ae57 	beq.w	800a80c <_printf_float+0x9c>
 800ab5e:	f108 0801 	add.w	r8, r8, #1
 800ab62:	9b08      	ldr	r3, [sp, #32]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	4543      	cmp	r3, r8
 800ab68:	dcf1      	bgt.n	800ab4e <_printf_float+0x3de>
 800ab6a:	9b04      	ldr	r3, [sp, #16]
 800ab6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab70:	e6db      	b.n	800a92a <_printf_float+0x1ba>
 800ab72:	f04f 0800 	mov.w	r8, #0
 800ab76:	f104 091a 	add.w	r9, r4, #26
 800ab7a:	e7f2      	b.n	800ab62 <_printf_float+0x3f2>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	4642      	mov	r2, r8
 800ab80:	e7df      	b.n	800ab42 <_printf_float+0x3d2>
 800ab82:	2301      	movs	r3, #1
 800ab84:	464a      	mov	r2, r9
 800ab86:	4631      	mov	r1, r6
 800ab88:	4628      	mov	r0, r5
 800ab8a:	47b8      	blx	r7
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	f43f ae3d 	beq.w	800a80c <_printf_float+0x9c>
 800ab92:	f108 0801 	add.w	r8, r8, #1
 800ab96:	68e3      	ldr	r3, [r4, #12]
 800ab98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab9a:	1a5b      	subs	r3, r3, r1
 800ab9c:	4543      	cmp	r3, r8
 800ab9e:	dcf0      	bgt.n	800ab82 <_printf_float+0x412>
 800aba0:	e6f7      	b.n	800a992 <_printf_float+0x222>
 800aba2:	f04f 0800 	mov.w	r8, #0
 800aba6:	f104 0919 	add.w	r9, r4, #25
 800abaa:	e7f4      	b.n	800ab96 <_printf_float+0x426>

0800abac <_printf_common>:
 800abac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb0:	4616      	mov	r6, r2
 800abb2:	4699      	mov	r9, r3
 800abb4:	688a      	ldr	r2, [r1, #8]
 800abb6:	690b      	ldr	r3, [r1, #16]
 800abb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abbc:	4293      	cmp	r3, r2
 800abbe:	bfb8      	it	lt
 800abc0:	4613      	movlt	r3, r2
 800abc2:	6033      	str	r3, [r6, #0]
 800abc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abc8:	4607      	mov	r7, r0
 800abca:	460c      	mov	r4, r1
 800abcc:	b10a      	cbz	r2, 800abd2 <_printf_common+0x26>
 800abce:	3301      	adds	r3, #1
 800abd0:	6033      	str	r3, [r6, #0]
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	0699      	lsls	r1, r3, #26
 800abd6:	bf42      	ittt	mi
 800abd8:	6833      	ldrmi	r3, [r6, #0]
 800abda:	3302      	addmi	r3, #2
 800abdc:	6033      	strmi	r3, [r6, #0]
 800abde:	6825      	ldr	r5, [r4, #0]
 800abe0:	f015 0506 	ands.w	r5, r5, #6
 800abe4:	d106      	bne.n	800abf4 <_printf_common+0x48>
 800abe6:	f104 0a19 	add.w	sl, r4, #25
 800abea:	68e3      	ldr	r3, [r4, #12]
 800abec:	6832      	ldr	r2, [r6, #0]
 800abee:	1a9b      	subs	r3, r3, r2
 800abf0:	42ab      	cmp	r3, r5
 800abf2:	dc26      	bgt.n	800ac42 <_printf_common+0x96>
 800abf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abf8:	1e13      	subs	r3, r2, #0
 800abfa:	6822      	ldr	r2, [r4, #0]
 800abfc:	bf18      	it	ne
 800abfe:	2301      	movne	r3, #1
 800ac00:	0692      	lsls	r2, r2, #26
 800ac02:	d42b      	bmi.n	800ac5c <_printf_common+0xb0>
 800ac04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac08:	4649      	mov	r1, r9
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	47c0      	blx	r8
 800ac0e:	3001      	adds	r0, #1
 800ac10:	d01e      	beq.n	800ac50 <_printf_common+0xa4>
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	68e5      	ldr	r5, [r4, #12]
 800ac16:	6832      	ldr	r2, [r6, #0]
 800ac18:	f003 0306 	and.w	r3, r3, #6
 800ac1c:	2b04      	cmp	r3, #4
 800ac1e:	bf08      	it	eq
 800ac20:	1aad      	subeq	r5, r5, r2
 800ac22:	68a3      	ldr	r3, [r4, #8]
 800ac24:	6922      	ldr	r2, [r4, #16]
 800ac26:	bf0c      	ite	eq
 800ac28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac2c:	2500      	movne	r5, #0
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	bfc4      	itt	gt
 800ac32:	1a9b      	subgt	r3, r3, r2
 800ac34:	18ed      	addgt	r5, r5, r3
 800ac36:	2600      	movs	r6, #0
 800ac38:	341a      	adds	r4, #26
 800ac3a:	42b5      	cmp	r5, r6
 800ac3c:	d11a      	bne.n	800ac74 <_printf_common+0xc8>
 800ac3e:	2000      	movs	r0, #0
 800ac40:	e008      	b.n	800ac54 <_printf_common+0xa8>
 800ac42:	2301      	movs	r3, #1
 800ac44:	4652      	mov	r2, sl
 800ac46:	4649      	mov	r1, r9
 800ac48:	4638      	mov	r0, r7
 800ac4a:	47c0      	blx	r8
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	d103      	bne.n	800ac58 <_printf_common+0xac>
 800ac50:	f04f 30ff 	mov.w	r0, #4294967295
 800ac54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac58:	3501      	adds	r5, #1
 800ac5a:	e7c6      	b.n	800abea <_printf_common+0x3e>
 800ac5c:	18e1      	adds	r1, r4, r3
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	2030      	movs	r0, #48	; 0x30
 800ac62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac66:	4422      	add	r2, r4
 800ac68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac70:	3302      	adds	r3, #2
 800ac72:	e7c7      	b.n	800ac04 <_printf_common+0x58>
 800ac74:	2301      	movs	r3, #1
 800ac76:	4622      	mov	r2, r4
 800ac78:	4649      	mov	r1, r9
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	47c0      	blx	r8
 800ac7e:	3001      	adds	r0, #1
 800ac80:	d0e6      	beq.n	800ac50 <_printf_common+0xa4>
 800ac82:	3601      	adds	r6, #1
 800ac84:	e7d9      	b.n	800ac3a <_printf_common+0x8e>
	...

0800ac88 <_printf_i>:
 800ac88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	4691      	mov	r9, r2
 800ac90:	7e27      	ldrb	r7, [r4, #24]
 800ac92:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ac94:	2f78      	cmp	r7, #120	; 0x78
 800ac96:	4680      	mov	r8, r0
 800ac98:	469a      	mov	sl, r3
 800ac9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac9e:	d807      	bhi.n	800acb0 <_printf_i+0x28>
 800aca0:	2f62      	cmp	r7, #98	; 0x62
 800aca2:	d80a      	bhi.n	800acba <_printf_i+0x32>
 800aca4:	2f00      	cmp	r7, #0
 800aca6:	f000 80d8 	beq.w	800ae5a <_printf_i+0x1d2>
 800acaa:	2f58      	cmp	r7, #88	; 0x58
 800acac:	f000 80a3 	beq.w	800adf6 <_printf_i+0x16e>
 800acb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800acb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acb8:	e03a      	b.n	800ad30 <_printf_i+0xa8>
 800acba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acbe:	2b15      	cmp	r3, #21
 800acc0:	d8f6      	bhi.n	800acb0 <_printf_i+0x28>
 800acc2:	a001      	add	r0, pc, #4	; (adr r0, 800acc8 <_printf_i+0x40>)
 800acc4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800acc8:	0800ad21 	.word	0x0800ad21
 800accc:	0800ad35 	.word	0x0800ad35
 800acd0:	0800acb1 	.word	0x0800acb1
 800acd4:	0800acb1 	.word	0x0800acb1
 800acd8:	0800acb1 	.word	0x0800acb1
 800acdc:	0800acb1 	.word	0x0800acb1
 800ace0:	0800ad35 	.word	0x0800ad35
 800ace4:	0800acb1 	.word	0x0800acb1
 800ace8:	0800acb1 	.word	0x0800acb1
 800acec:	0800acb1 	.word	0x0800acb1
 800acf0:	0800acb1 	.word	0x0800acb1
 800acf4:	0800ae41 	.word	0x0800ae41
 800acf8:	0800ad65 	.word	0x0800ad65
 800acfc:	0800ae23 	.word	0x0800ae23
 800ad00:	0800acb1 	.word	0x0800acb1
 800ad04:	0800acb1 	.word	0x0800acb1
 800ad08:	0800ae63 	.word	0x0800ae63
 800ad0c:	0800acb1 	.word	0x0800acb1
 800ad10:	0800ad65 	.word	0x0800ad65
 800ad14:	0800acb1 	.word	0x0800acb1
 800ad18:	0800acb1 	.word	0x0800acb1
 800ad1c:	0800ae2b 	.word	0x0800ae2b
 800ad20:	680b      	ldr	r3, [r1, #0]
 800ad22:	1d1a      	adds	r2, r3, #4
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	600a      	str	r2, [r1, #0]
 800ad28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ad2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad30:	2301      	movs	r3, #1
 800ad32:	e0a3      	b.n	800ae7c <_printf_i+0x1f4>
 800ad34:	6825      	ldr	r5, [r4, #0]
 800ad36:	6808      	ldr	r0, [r1, #0]
 800ad38:	062e      	lsls	r6, r5, #24
 800ad3a:	f100 0304 	add.w	r3, r0, #4
 800ad3e:	d50a      	bpl.n	800ad56 <_printf_i+0xce>
 800ad40:	6805      	ldr	r5, [r0, #0]
 800ad42:	600b      	str	r3, [r1, #0]
 800ad44:	2d00      	cmp	r5, #0
 800ad46:	da03      	bge.n	800ad50 <_printf_i+0xc8>
 800ad48:	232d      	movs	r3, #45	; 0x2d
 800ad4a:	426d      	negs	r5, r5
 800ad4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad50:	485e      	ldr	r0, [pc, #376]	; (800aecc <_printf_i+0x244>)
 800ad52:	230a      	movs	r3, #10
 800ad54:	e019      	b.n	800ad8a <_printf_i+0x102>
 800ad56:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ad5a:	6805      	ldr	r5, [r0, #0]
 800ad5c:	600b      	str	r3, [r1, #0]
 800ad5e:	bf18      	it	ne
 800ad60:	b22d      	sxthne	r5, r5
 800ad62:	e7ef      	b.n	800ad44 <_printf_i+0xbc>
 800ad64:	680b      	ldr	r3, [r1, #0]
 800ad66:	6825      	ldr	r5, [r4, #0]
 800ad68:	1d18      	adds	r0, r3, #4
 800ad6a:	6008      	str	r0, [r1, #0]
 800ad6c:	0628      	lsls	r0, r5, #24
 800ad6e:	d501      	bpl.n	800ad74 <_printf_i+0xec>
 800ad70:	681d      	ldr	r5, [r3, #0]
 800ad72:	e002      	b.n	800ad7a <_printf_i+0xf2>
 800ad74:	0669      	lsls	r1, r5, #25
 800ad76:	d5fb      	bpl.n	800ad70 <_printf_i+0xe8>
 800ad78:	881d      	ldrh	r5, [r3, #0]
 800ad7a:	4854      	ldr	r0, [pc, #336]	; (800aecc <_printf_i+0x244>)
 800ad7c:	2f6f      	cmp	r7, #111	; 0x6f
 800ad7e:	bf0c      	ite	eq
 800ad80:	2308      	moveq	r3, #8
 800ad82:	230a      	movne	r3, #10
 800ad84:	2100      	movs	r1, #0
 800ad86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad8a:	6866      	ldr	r6, [r4, #4]
 800ad8c:	60a6      	str	r6, [r4, #8]
 800ad8e:	2e00      	cmp	r6, #0
 800ad90:	bfa2      	ittt	ge
 800ad92:	6821      	ldrge	r1, [r4, #0]
 800ad94:	f021 0104 	bicge.w	r1, r1, #4
 800ad98:	6021      	strge	r1, [r4, #0]
 800ad9a:	b90d      	cbnz	r5, 800ada0 <_printf_i+0x118>
 800ad9c:	2e00      	cmp	r6, #0
 800ad9e:	d04d      	beq.n	800ae3c <_printf_i+0x1b4>
 800ada0:	4616      	mov	r6, r2
 800ada2:	fbb5 f1f3 	udiv	r1, r5, r3
 800ada6:	fb03 5711 	mls	r7, r3, r1, r5
 800adaa:	5dc7      	ldrb	r7, [r0, r7]
 800adac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800adb0:	462f      	mov	r7, r5
 800adb2:	42bb      	cmp	r3, r7
 800adb4:	460d      	mov	r5, r1
 800adb6:	d9f4      	bls.n	800ada2 <_printf_i+0x11a>
 800adb8:	2b08      	cmp	r3, #8
 800adba:	d10b      	bne.n	800add4 <_printf_i+0x14c>
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	07df      	lsls	r7, r3, #31
 800adc0:	d508      	bpl.n	800add4 <_printf_i+0x14c>
 800adc2:	6923      	ldr	r3, [r4, #16]
 800adc4:	6861      	ldr	r1, [r4, #4]
 800adc6:	4299      	cmp	r1, r3
 800adc8:	bfde      	ittt	le
 800adca:	2330      	movle	r3, #48	; 0x30
 800adcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800add0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800add4:	1b92      	subs	r2, r2, r6
 800add6:	6122      	str	r2, [r4, #16]
 800add8:	f8cd a000 	str.w	sl, [sp]
 800addc:	464b      	mov	r3, r9
 800adde:	aa03      	add	r2, sp, #12
 800ade0:	4621      	mov	r1, r4
 800ade2:	4640      	mov	r0, r8
 800ade4:	f7ff fee2 	bl	800abac <_printf_common>
 800ade8:	3001      	adds	r0, #1
 800adea:	d14c      	bne.n	800ae86 <_printf_i+0x1fe>
 800adec:	f04f 30ff 	mov.w	r0, #4294967295
 800adf0:	b004      	add	sp, #16
 800adf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf6:	4835      	ldr	r0, [pc, #212]	; (800aecc <_printf_i+0x244>)
 800adf8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	680e      	ldr	r6, [r1, #0]
 800ae00:	061f      	lsls	r7, r3, #24
 800ae02:	f856 5b04 	ldr.w	r5, [r6], #4
 800ae06:	600e      	str	r6, [r1, #0]
 800ae08:	d514      	bpl.n	800ae34 <_printf_i+0x1ac>
 800ae0a:	07d9      	lsls	r1, r3, #31
 800ae0c:	bf44      	itt	mi
 800ae0e:	f043 0320 	orrmi.w	r3, r3, #32
 800ae12:	6023      	strmi	r3, [r4, #0]
 800ae14:	b91d      	cbnz	r5, 800ae1e <_printf_i+0x196>
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	f023 0320 	bic.w	r3, r3, #32
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	2310      	movs	r3, #16
 800ae20:	e7b0      	b.n	800ad84 <_printf_i+0xfc>
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	f043 0320 	orr.w	r3, r3, #32
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	2378      	movs	r3, #120	; 0x78
 800ae2c:	4828      	ldr	r0, [pc, #160]	; (800aed0 <_printf_i+0x248>)
 800ae2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae32:	e7e3      	b.n	800adfc <_printf_i+0x174>
 800ae34:	065e      	lsls	r6, r3, #25
 800ae36:	bf48      	it	mi
 800ae38:	b2ad      	uxthmi	r5, r5
 800ae3a:	e7e6      	b.n	800ae0a <_printf_i+0x182>
 800ae3c:	4616      	mov	r6, r2
 800ae3e:	e7bb      	b.n	800adb8 <_printf_i+0x130>
 800ae40:	680b      	ldr	r3, [r1, #0]
 800ae42:	6826      	ldr	r6, [r4, #0]
 800ae44:	6960      	ldr	r0, [r4, #20]
 800ae46:	1d1d      	adds	r5, r3, #4
 800ae48:	600d      	str	r5, [r1, #0]
 800ae4a:	0635      	lsls	r5, r6, #24
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	d501      	bpl.n	800ae54 <_printf_i+0x1cc>
 800ae50:	6018      	str	r0, [r3, #0]
 800ae52:	e002      	b.n	800ae5a <_printf_i+0x1d2>
 800ae54:	0671      	lsls	r1, r6, #25
 800ae56:	d5fb      	bpl.n	800ae50 <_printf_i+0x1c8>
 800ae58:	8018      	strh	r0, [r3, #0]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	6123      	str	r3, [r4, #16]
 800ae5e:	4616      	mov	r6, r2
 800ae60:	e7ba      	b.n	800add8 <_printf_i+0x150>
 800ae62:	680b      	ldr	r3, [r1, #0]
 800ae64:	1d1a      	adds	r2, r3, #4
 800ae66:	600a      	str	r2, [r1, #0]
 800ae68:	681e      	ldr	r6, [r3, #0]
 800ae6a:	6862      	ldr	r2, [r4, #4]
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	4630      	mov	r0, r6
 800ae70:	f7f5 fa46 	bl	8000300 <memchr>
 800ae74:	b108      	cbz	r0, 800ae7a <_printf_i+0x1f2>
 800ae76:	1b80      	subs	r0, r0, r6
 800ae78:	6060      	str	r0, [r4, #4]
 800ae7a:	6863      	ldr	r3, [r4, #4]
 800ae7c:	6123      	str	r3, [r4, #16]
 800ae7e:	2300      	movs	r3, #0
 800ae80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae84:	e7a8      	b.n	800add8 <_printf_i+0x150>
 800ae86:	6923      	ldr	r3, [r4, #16]
 800ae88:	4632      	mov	r2, r6
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	47d0      	blx	sl
 800ae90:	3001      	adds	r0, #1
 800ae92:	d0ab      	beq.n	800adec <_printf_i+0x164>
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	079b      	lsls	r3, r3, #30
 800ae98:	d413      	bmi.n	800aec2 <_printf_i+0x23a>
 800ae9a:	68e0      	ldr	r0, [r4, #12]
 800ae9c:	9b03      	ldr	r3, [sp, #12]
 800ae9e:	4298      	cmp	r0, r3
 800aea0:	bfb8      	it	lt
 800aea2:	4618      	movlt	r0, r3
 800aea4:	e7a4      	b.n	800adf0 <_printf_i+0x168>
 800aea6:	2301      	movs	r3, #1
 800aea8:	4632      	mov	r2, r6
 800aeaa:	4649      	mov	r1, r9
 800aeac:	4640      	mov	r0, r8
 800aeae:	47d0      	blx	sl
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d09b      	beq.n	800adec <_printf_i+0x164>
 800aeb4:	3501      	adds	r5, #1
 800aeb6:	68e3      	ldr	r3, [r4, #12]
 800aeb8:	9903      	ldr	r1, [sp, #12]
 800aeba:	1a5b      	subs	r3, r3, r1
 800aebc:	42ab      	cmp	r3, r5
 800aebe:	dcf2      	bgt.n	800aea6 <_printf_i+0x21e>
 800aec0:	e7eb      	b.n	800ae9a <_printf_i+0x212>
 800aec2:	2500      	movs	r5, #0
 800aec4:	f104 0619 	add.w	r6, r4, #25
 800aec8:	e7f5      	b.n	800aeb6 <_printf_i+0x22e>
 800aeca:	bf00      	nop
 800aecc:	0800d3da 	.word	0x0800d3da
 800aed0:	0800d3eb 	.word	0x0800d3eb

0800aed4 <siprintf>:
 800aed4:	b40e      	push	{r1, r2, r3}
 800aed6:	b500      	push	{lr}
 800aed8:	b09c      	sub	sp, #112	; 0x70
 800aeda:	ab1d      	add	r3, sp, #116	; 0x74
 800aedc:	9002      	str	r0, [sp, #8]
 800aede:	9006      	str	r0, [sp, #24]
 800aee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aee4:	4809      	ldr	r0, [pc, #36]	; (800af0c <siprintf+0x38>)
 800aee6:	9107      	str	r1, [sp, #28]
 800aee8:	9104      	str	r1, [sp, #16]
 800aeea:	4909      	ldr	r1, [pc, #36]	; (800af10 <siprintf+0x3c>)
 800aeec:	f853 2b04 	ldr.w	r2, [r3], #4
 800aef0:	9105      	str	r1, [sp, #20]
 800aef2:	6800      	ldr	r0, [r0, #0]
 800aef4:	9301      	str	r3, [sp, #4]
 800aef6:	a902      	add	r1, sp, #8
 800aef8:	f001 faca 	bl	800c490 <_svfiprintf_r>
 800aefc:	9b02      	ldr	r3, [sp, #8]
 800aefe:	2200      	movs	r2, #0
 800af00:	701a      	strb	r2, [r3, #0]
 800af02:	b01c      	add	sp, #112	; 0x70
 800af04:	f85d eb04 	ldr.w	lr, [sp], #4
 800af08:	b003      	add	sp, #12
 800af0a:	4770      	bx	lr
 800af0c:	24000010 	.word	0x24000010
 800af10:	ffff0208 	.word	0xffff0208

0800af14 <quorem>:
 800af14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af18:	6903      	ldr	r3, [r0, #16]
 800af1a:	690c      	ldr	r4, [r1, #16]
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	4607      	mov	r7, r0
 800af20:	f2c0 8081 	blt.w	800b026 <quorem+0x112>
 800af24:	3c01      	subs	r4, #1
 800af26:	f101 0814 	add.w	r8, r1, #20
 800af2a:	f100 0514 	add.w	r5, r0, #20
 800af2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af32:	9301      	str	r3, [sp, #4]
 800af34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af3c:	3301      	adds	r3, #1
 800af3e:	429a      	cmp	r2, r3
 800af40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af48:	fbb2 f6f3 	udiv	r6, r2, r3
 800af4c:	d331      	bcc.n	800afb2 <quorem+0x9e>
 800af4e:	f04f 0e00 	mov.w	lr, #0
 800af52:	4640      	mov	r0, r8
 800af54:	46ac      	mov	ip, r5
 800af56:	46f2      	mov	sl, lr
 800af58:	f850 2b04 	ldr.w	r2, [r0], #4
 800af5c:	b293      	uxth	r3, r2
 800af5e:	fb06 e303 	mla	r3, r6, r3, lr
 800af62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af66:	b29b      	uxth	r3, r3
 800af68:	ebaa 0303 	sub.w	r3, sl, r3
 800af6c:	0c12      	lsrs	r2, r2, #16
 800af6e:	f8dc a000 	ldr.w	sl, [ip]
 800af72:	fb06 e202 	mla	r2, r6, r2, lr
 800af76:	fa13 f38a 	uxtah	r3, r3, sl
 800af7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af7e:	fa1f fa82 	uxth.w	sl, r2
 800af82:	f8dc 2000 	ldr.w	r2, [ip]
 800af86:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800af8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af8e:	b29b      	uxth	r3, r3
 800af90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af94:	4581      	cmp	r9, r0
 800af96:	f84c 3b04 	str.w	r3, [ip], #4
 800af9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af9e:	d2db      	bcs.n	800af58 <quorem+0x44>
 800afa0:	f855 300b 	ldr.w	r3, [r5, fp]
 800afa4:	b92b      	cbnz	r3, 800afb2 <quorem+0x9e>
 800afa6:	9b01      	ldr	r3, [sp, #4]
 800afa8:	3b04      	subs	r3, #4
 800afaa:	429d      	cmp	r5, r3
 800afac:	461a      	mov	r2, r3
 800afae:	d32e      	bcc.n	800b00e <quorem+0xfa>
 800afb0:	613c      	str	r4, [r7, #16]
 800afb2:	4638      	mov	r0, r7
 800afb4:	f001 f856 	bl	800c064 <__mcmp>
 800afb8:	2800      	cmp	r0, #0
 800afba:	db24      	blt.n	800b006 <quorem+0xf2>
 800afbc:	3601      	adds	r6, #1
 800afbe:	4628      	mov	r0, r5
 800afc0:	f04f 0c00 	mov.w	ip, #0
 800afc4:	f858 2b04 	ldr.w	r2, [r8], #4
 800afc8:	f8d0 e000 	ldr.w	lr, [r0]
 800afcc:	b293      	uxth	r3, r2
 800afce:	ebac 0303 	sub.w	r3, ip, r3
 800afd2:	0c12      	lsrs	r2, r2, #16
 800afd4:	fa13 f38e 	uxtah	r3, r3, lr
 800afd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800afdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afe6:	45c1      	cmp	r9, r8
 800afe8:	f840 3b04 	str.w	r3, [r0], #4
 800afec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aff0:	d2e8      	bcs.n	800afc4 <quorem+0xb0>
 800aff2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800affa:	b922      	cbnz	r2, 800b006 <quorem+0xf2>
 800affc:	3b04      	subs	r3, #4
 800affe:	429d      	cmp	r5, r3
 800b000:	461a      	mov	r2, r3
 800b002:	d30a      	bcc.n	800b01a <quorem+0x106>
 800b004:	613c      	str	r4, [r7, #16]
 800b006:	4630      	mov	r0, r6
 800b008:	b003      	add	sp, #12
 800b00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00e:	6812      	ldr	r2, [r2, #0]
 800b010:	3b04      	subs	r3, #4
 800b012:	2a00      	cmp	r2, #0
 800b014:	d1cc      	bne.n	800afb0 <quorem+0x9c>
 800b016:	3c01      	subs	r4, #1
 800b018:	e7c7      	b.n	800afaa <quorem+0x96>
 800b01a:	6812      	ldr	r2, [r2, #0]
 800b01c:	3b04      	subs	r3, #4
 800b01e:	2a00      	cmp	r2, #0
 800b020:	d1f0      	bne.n	800b004 <quorem+0xf0>
 800b022:	3c01      	subs	r4, #1
 800b024:	e7eb      	b.n	800affe <quorem+0xea>
 800b026:	2000      	movs	r0, #0
 800b028:	e7ee      	b.n	800b008 <quorem+0xf4>
 800b02a:	0000      	movs	r0, r0
 800b02c:	0000      	movs	r0, r0
	...

0800b030 <_dtoa_r>:
 800b030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b034:	ec59 8b10 	vmov	r8, r9, d0
 800b038:	b095      	sub	sp, #84	; 0x54
 800b03a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b03c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b03e:	9107      	str	r1, [sp, #28]
 800b040:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b044:	4606      	mov	r6, r0
 800b046:	9209      	str	r2, [sp, #36]	; 0x24
 800b048:	9310      	str	r3, [sp, #64]	; 0x40
 800b04a:	b975      	cbnz	r5, 800b06a <_dtoa_r+0x3a>
 800b04c:	2010      	movs	r0, #16
 800b04e:	f000 fd75 	bl	800bb3c <malloc>
 800b052:	4602      	mov	r2, r0
 800b054:	6270      	str	r0, [r6, #36]	; 0x24
 800b056:	b920      	cbnz	r0, 800b062 <_dtoa_r+0x32>
 800b058:	4bab      	ldr	r3, [pc, #684]	; (800b308 <_dtoa_r+0x2d8>)
 800b05a:	21ea      	movs	r1, #234	; 0xea
 800b05c:	48ab      	ldr	r0, [pc, #684]	; (800b30c <_dtoa_r+0x2dc>)
 800b05e:	f001 fb27 	bl	800c6b0 <__assert_func>
 800b062:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b066:	6005      	str	r5, [r0, #0]
 800b068:	60c5      	str	r5, [r0, #12]
 800b06a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b06c:	6819      	ldr	r1, [r3, #0]
 800b06e:	b151      	cbz	r1, 800b086 <_dtoa_r+0x56>
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	604a      	str	r2, [r1, #4]
 800b074:	2301      	movs	r3, #1
 800b076:	4093      	lsls	r3, r2
 800b078:	608b      	str	r3, [r1, #8]
 800b07a:	4630      	mov	r0, r6
 800b07c:	f000 fdb4 	bl	800bbe8 <_Bfree>
 800b080:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]
 800b086:	f1b9 0300 	subs.w	r3, r9, #0
 800b08a:	bfbb      	ittet	lt
 800b08c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b090:	9303      	strlt	r3, [sp, #12]
 800b092:	2300      	movge	r3, #0
 800b094:	2201      	movlt	r2, #1
 800b096:	bfac      	ite	ge
 800b098:	6023      	strge	r3, [r4, #0]
 800b09a:	6022      	strlt	r2, [r4, #0]
 800b09c:	4b9c      	ldr	r3, [pc, #624]	; (800b310 <_dtoa_r+0x2e0>)
 800b09e:	9c03      	ldr	r4, [sp, #12]
 800b0a0:	43a3      	bics	r3, r4
 800b0a2:	d11a      	bne.n	800b0da <_dtoa_r+0xaa>
 800b0a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b0a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0aa:	6013      	str	r3, [r2, #0]
 800b0ac:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b0b0:	ea53 0308 	orrs.w	r3, r3, r8
 800b0b4:	f000 8512 	beq.w	800badc <_dtoa_r+0xaac>
 800b0b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b0ba:	b953      	cbnz	r3, 800b0d2 <_dtoa_r+0xa2>
 800b0bc:	4b95      	ldr	r3, [pc, #596]	; (800b314 <_dtoa_r+0x2e4>)
 800b0be:	e01f      	b.n	800b100 <_dtoa_r+0xd0>
 800b0c0:	4b95      	ldr	r3, [pc, #596]	; (800b318 <_dtoa_r+0x2e8>)
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b0c8:	6013      	str	r3, [r2, #0]
 800b0ca:	9800      	ldr	r0, [sp, #0]
 800b0cc:	b015      	add	sp, #84	; 0x54
 800b0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d2:	4b90      	ldr	r3, [pc, #576]	; (800b314 <_dtoa_r+0x2e4>)
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	3303      	adds	r3, #3
 800b0d8:	e7f5      	b.n	800b0c6 <_dtoa_r+0x96>
 800b0da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b0ea:	d10b      	bne.n	800b104 <_dtoa_r+0xd4>
 800b0ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	6013      	str	r3, [r2, #0]
 800b0f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 84ee 	beq.w	800bad6 <_dtoa_r+0xaa6>
 800b0fa:	4888      	ldr	r0, [pc, #544]	; (800b31c <_dtoa_r+0x2ec>)
 800b0fc:	6018      	str	r0, [r3, #0]
 800b0fe:	1e43      	subs	r3, r0, #1
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	e7e2      	b.n	800b0ca <_dtoa_r+0x9a>
 800b104:	a913      	add	r1, sp, #76	; 0x4c
 800b106:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b10a:	aa12      	add	r2, sp, #72	; 0x48
 800b10c:	4630      	mov	r0, r6
 800b10e:	f001 f84d 	bl	800c1ac <__d2b>
 800b112:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800b116:	4605      	mov	r5, r0
 800b118:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b11a:	2900      	cmp	r1, #0
 800b11c:	d047      	beq.n	800b1ae <_dtoa_r+0x17e>
 800b11e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b120:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b124:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b128:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800b12c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b130:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b134:	2400      	movs	r4, #0
 800b136:	ec43 2b16 	vmov	d6, r2, r3
 800b13a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b13e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800b2f0 <_dtoa_r+0x2c0>
 800b142:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b146:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800b2f8 <_dtoa_r+0x2c8>
 800b14a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b14e:	eeb0 7b46 	vmov.f64	d7, d6
 800b152:	ee06 1a90 	vmov	s13, r1
 800b156:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800b15a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800b300 <_dtoa_r+0x2d0>
 800b15e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b162:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b166:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b16e:	ee16 ba90 	vmov	fp, s13
 800b172:	9411      	str	r4, [sp, #68]	; 0x44
 800b174:	d508      	bpl.n	800b188 <_dtoa_r+0x158>
 800b176:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b17a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b182:	bf18      	it	ne
 800b184:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b188:	f1bb 0f16 	cmp.w	fp, #22
 800b18c:	d832      	bhi.n	800b1f4 <_dtoa_r+0x1c4>
 800b18e:	4b64      	ldr	r3, [pc, #400]	; (800b320 <_dtoa_r+0x2f0>)
 800b190:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b194:	ed93 7b00 	vldr	d7, [r3]
 800b198:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800b19c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a4:	d501      	bpl.n	800b1aa <_dtoa_r+0x17a>
 800b1a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	e023      	b.n	800b1f6 <_dtoa_r+0x1c6>
 800b1ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b1b0:	4401      	add	r1, r0
 800b1b2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800b1b6:	2b20      	cmp	r3, #32
 800b1b8:	bfc3      	ittte	gt
 800b1ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b1be:	fa04 f303 	lslgt.w	r3, r4, r3
 800b1c2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800b1c6:	f1c3 0320 	rsble	r3, r3, #32
 800b1ca:	bfc6      	itte	gt
 800b1cc:	fa28 f804 	lsrgt.w	r8, r8, r4
 800b1d0:	ea43 0308 	orrgt.w	r3, r3, r8
 800b1d4:	fa08 f303 	lslle.w	r3, r8, r3
 800b1d8:	ee07 3a90 	vmov	s15, r3
 800b1dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b1e0:	3901      	subs	r1, #1
 800b1e2:	ed8d 7b00 	vstr	d7, [sp]
 800b1e6:	9c01      	ldr	r4, [sp, #4]
 800b1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1ec:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800b1f0:	2401      	movs	r4, #1
 800b1f2:	e7a0      	b.n	800b136 <_dtoa_r+0x106>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1f8:	1a43      	subs	r3, r0, r1
 800b1fa:	1e5a      	subs	r2, r3, #1
 800b1fc:	bf45      	ittet	mi
 800b1fe:	f1c3 0301 	rsbmi	r3, r3, #1
 800b202:	9305      	strmi	r3, [sp, #20]
 800b204:	2300      	movpl	r3, #0
 800b206:	2300      	movmi	r3, #0
 800b208:	9206      	str	r2, [sp, #24]
 800b20a:	bf54      	ite	pl
 800b20c:	9305      	strpl	r3, [sp, #20]
 800b20e:	9306      	strmi	r3, [sp, #24]
 800b210:	f1bb 0f00 	cmp.w	fp, #0
 800b214:	db18      	blt.n	800b248 <_dtoa_r+0x218>
 800b216:	9b06      	ldr	r3, [sp, #24]
 800b218:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b21c:	445b      	add	r3, fp
 800b21e:	9306      	str	r3, [sp, #24]
 800b220:	2300      	movs	r3, #0
 800b222:	9a07      	ldr	r2, [sp, #28]
 800b224:	2a09      	cmp	r2, #9
 800b226:	d849      	bhi.n	800b2bc <_dtoa_r+0x28c>
 800b228:	2a05      	cmp	r2, #5
 800b22a:	bfc4      	itt	gt
 800b22c:	3a04      	subgt	r2, #4
 800b22e:	9207      	strgt	r2, [sp, #28]
 800b230:	9a07      	ldr	r2, [sp, #28]
 800b232:	f1a2 0202 	sub.w	r2, r2, #2
 800b236:	bfcc      	ite	gt
 800b238:	2400      	movgt	r4, #0
 800b23a:	2401      	movle	r4, #1
 800b23c:	2a03      	cmp	r2, #3
 800b23e:	d848      	bhi.n	800b2d2 <_dtoa_r+0x2a2>
 800b240:	e8df f002 	tbb	[pc, r2]
 800b244:	3a2c2e0b 	.word	0x3a2c2e0b
 800b248:	9b05      	ldr	r3, [sp, #20]
 800b24a:	2200      	movs	r2, #0
 800b24c:	eba3 030b 	sub.w	r3, r3, fp
 800b250:	9305      	str	r3, [sp, #20]
 800b252:	920e      	str	r2, [sp, #56]	; 0x38
 800b254:	f1cb 0300 	rsb	r3, fp, #0
 800b258:	e7e3      	b.n	800b222 <_dtoa_r+0x1f2>
 800b25a:	2200      	movs	r2, #0
 800b25c:	9208      	str	r2, [sp, #32]
 800b25e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b260:	2a00      	cmp	r2, #0
 800b262:	dc39      	bgt.n	800b2d8 <_dtoa_r+0x2a8>
 800b264:	f04f 0a01 	mov.w	sl, #1
 800b268:	46d1      	mov	r9, sl
 800b26a:	4652      	mov	r2, sl
 800b26c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b270:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800b272:	2100      	movs	r1, #0
 800b274:	6079      	str	r1, [r7, #4]
 800b276:	2004      	movs	r0, #4
 800b278:	f100 0c14 	add.w	ip, r0, #20
 800b27c:	4594      	cmp	ip, r2
 800b27e:	6879      	ldr	r1, [r7, #4]
 800b280:	d92f      	bls.n	800b2e2 <_dtoa_r+0x2b2>
 800b282:	4630      	mov	r0, r6
 800b284:	930c      	str	r3, [sp, #48]	; 0x30
 800b286:	f000 fc6f 	bl	800bb68 <_Balloc>
 800b28a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b28c:	9000      	str	r0, [sp, #0]
 800b28e:	4602      	mov	r2, r0
 800b290:	2800      	cmp	r0, #0
 800b292:	d149      	bne.n	800b328 <_dtoa_r+0x2f8>
 800b294:	4b23      	ldr	r3, [pc, #140]	; (800b324 <_dtoa_r+0x2f4>)
 800b296:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b29a:	e6df      	b.n	800b05c <_dtoa_r+0x2c>
 800b29c:	2201      	movs	r2, #1
 800b29e:	e7dd      	b.n	800b25c <_dtoa_r+0x22c>
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	9208      	str	r2, [sp, #32]
 800b2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a6:	eb0b 0a02 	add.w	sl, fp, r2
 800b2aa:	f10a 0901 	add.w	r9, sl, #1
 800b2ae:	464a      	mov	r2, r9
 800b2b0:	2a01      	cmp	r2, #1
 800b2b2:	bfb8      	it	lt
 800b2b4:	2201      	movlt	r2, #1
 800b2b6:	e7db      	b.n	800b270 <_dtoa_r+0x240>
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	e7f2      	b.n	800b2a2 <_dtoa_r+0x272>
 800b2bc:	2401      	movs	r4, #1
 800b2be:	2200      	movs	r2, #0
 800b2c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b2c4:	f04f 3aff 	mov.w	sl, #4294967295
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	46d1      	mov	r9, sl
 800b2cc:	2212      	movs	r2, #18
 800b2ce:	9109      	str	r1, [sp, #36]	; 0x24
 800b2d0:	e7ce      	b.n	800b270 <_dtoa_r+0x240>
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	9208      	str	r2, [sp, #32]
 800b2d6:	e7f5      	b.n	800b2c4 <_dtoa_r+0x294>
 800b2d8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800b2dc:	46d1      	mov	r9, sl
 800b2de:	4652      	mov	r2, sl
 800b2e0:	e7c6      	b.n	800b270 <_dtoa_r+0x240>
 800b2e2:	3101      	adds	r1, #1
 800b2e4:	6079      	str	r1, [r7, #4]
 800b2e6:	0040      	lsls	r0, r0, #1
 800b2e8:	e7c6      	b.n	800b278 <_dtoa_r+0x248>
 800b2ea:	bf00      	nop
 800b2ec:	f3af 8000 	nop.w
 800b2f0:	636f4361 	.word	0x636f4361
 800b2f4:	3fd287a7 	.word	0x3fd287a7
 800b2f8:	8b60c8b3 	.word	0x8b60c8b3
 800b2fc:	3fc68a28 	.word	0x3fc68a28
 800b300:	509f79fb 	.word	0x509f79fb
 800b304:	3fd34413 	.word	0x3fd34413
 800b308:	0800d409 	.word	0x0800d409
 800b30c:	0800d420 	.word	0x0800d420
 800b310:	7ff00000 	.word	0x7ff00000
 800b314:	0800d405 	.word	0x0800d405
 800b318:	0800d3fc 	.word	0x0800d3fc
 800b31c:	0800d3d9 	.word	0x0800d3d9
 800b320:	0800d518 	.word	0x0800d518
 800b324:	0800d47f 	.word	0x0800d47f
 800b328:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b32a:	9900      	ldr	r1, [sp, #0]
 800b32c:	6011      	str	r1, [r2, #0]
 800b32e:	f1b9 0f0e 	cmp.w	r9, #14
 800b332:	d872      	bhi.n	800b41a <_dtoa_r+0x3ea>
 800b334:	2c00      	cmp	r4, #0
 800b336:	d070      	beq.n	800b41a <_dtoa_r+0x3ea>
 800b338:	f1bb 0f00 	cmp.w	fp, #0
 800b33c:	f340 80a6 	ble.w	800b48c <_dtoa_r+0x45c>
 800b340:	49ca      	ldr	r1, [pc, #808]	; (800b66c <_dtoa_r+0x63c>)
 800b342:	f00b 020f 	and.w	r2, fp, #15
 800b346:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b34a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b34e:	ed92 7b00 	vldr	d7, [r2]
 800b352:	ea4f 112b 	mov.w	r1, fp, asr #4
 800b356:	f000 808d 	beq.w	800b474 <_dtoa_r+0x444>
 800b35a:	4ac5      	ldr	r2, [pc, #788]	; (800b670 <_dtoa_r+0x640>)
 800b35c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800b360:	ed92 6b08 	vldr	d6, [r2, #32]
 800b364:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800b368:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b36c:	f001 010f 	and.w	r1, r1, #15
 800b370:	2203      	movs	r2, #3
 800b372:	48bf      	ldr	r0, [pc, #764]	; (800b670 <_dtoa_r+0x640>)
 800b374:	2900      	cmp	r1, #0
 800b376:	d17f      	bne.n	800b478 <_dtoa_r+0x448>
 800b378:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b37c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b380:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b384:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b386:	2900      	cmp	r1, #0
 800b388:	f000 80b2 	beq.w	800b4f0 <_dtoa_r+0x4c0>
 800b38c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b390:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b394:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b39c:	f140 80a8 	bpl.w	800b4f0 <_dtoa_r+0x4c0>
 800b3a0:	f1b9 0f00 	cmp.w	r9, #0
 800b3a4:	f000 80a4 	beq.w	800b4f0 <_dtoa_r+0x4c0>
 800b3a8:	f1ba 0f00 	cmp.w	sl, #0
 800b3ac:	dd31      	ble.n	800b412 <_dtoa_r+0x3e2>
 800b3ae:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b3b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b3b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b3ba:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b3be:	3201      	adds	r2, #1
 800b3c0:	4650      	mov	r0, sl
 800b3c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b3c6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b3ca:	ee07 2a90 	vmov	s15, r2
 800b3ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b3d2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b3d6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800b3da:	9c03      	ldr	r4, [sp, #12]
 800b3dc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b3e0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	f040 8086 	bne.w	800b4f6 <_dtoa_r+0x4c6>
 800b3ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b3ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b3f2:	ec42 1b17 	vmov	d7, r1, r2
 800b3f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3fe:	f300 8272 	bgt.w	800b8e6 <_dtoa_r+0x8b6>
 800b402:	eeb1 7b47 	vneg.f64	d7, d7
 800b406:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b40e:	f100 8267 	bmi.w	800b8e0 <_dtoa_r+0x8b0>
 800b412:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800b416:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b41a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b41c:	2a00      	cmp	r2, #0
 800b41e:	f2c0 8129 	blt.w	800b674 <_dtoa_r+0x644>
 800b422:	f1bb 0f0e 	cmp.w	fp, #14
 800b426:	f300 8125 	bgt.w	800b674 <_dtoa_r+0x644>
 800b42a:	4b90      	ldr	r3, [pc, #576]	; (800b66c <_dtoa_r+0x63c>)
 800b42c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b430:	ed93 6b00 	vldr	d6, [r3]
 800b434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b436:	2b00      	cmp	r3, #0
 800b438:	f280 80c3 	bge.w	800b5c2 <_dtoa_r+0x592>
 800b43c:	f1b9 0f00 	cmp.w	r9, #0
 800b440:	f300 80bf 	bgt.w	800b5c2 <_dtoa_r+0x592>
 800b444:	f040 824c 	bne.w	800b8e0 <_dtoa_r+0x8b0>
 800b448:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b44c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b450:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b454:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b45c:	464c      	mov	r4, r9
 800b45e:	464f      	mov	r7, r9
 800b460:	f280 8222 	bge.w	800b8a8 <_dtoa_r+0x878>
 800b464:	f8dd 8000 	ldr.w	r8, [sp]
 800b468:	2331      	movs	r3, #49	; 0x31
 800b46a:	f808 3b01 	strb.w	r3, [r8], #1
 800b46e:	f10b 0b01 	add.w	fp, fp, #1
 800b472:	e21e      	b.n	800b8b2 <_dtoa_r+0x882>
 800b474:	2202      	movs	r2, #2
 800b476:	e77c      	b.n	800b372 <_dtoa_r+0x342>
 800b478:	07cc      	lsls	r4, r1, #31
 800b47a:	d504      	bpl.n	800b486 <_dtoa_r+0x456>
 800b47c:	ed90 6b00 	vldr	d6, [r0]
 800b480:	3201      	adds	r2, #1
 800b482:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b486:	1049      	asrs	r1, r1, #1
 800b488:	3008      	adds	r0, #8
 800b48a:	e773      	b.n	800b374 <_dtoa_r+0x344>
 800b48c:	d02e      	beq.n	800b4ec <_dtoa_r+0x4bc>
 800b48e:	f1cb 0100 	rsb	r1, fp, #0
 800b492:	4a76      	ldr	r2, [pc, #472]	; (800b66c <_dtoa_r+0x63c>)
 800b494:	f001 000f 	and.w	r0, r1, #15
 800b498:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b49c:	ed92 7b00 	vldr	d7, [r2]
 800b4a0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800b4a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b4a8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b4ac:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800b4b0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800b4b4:	486e      	ldr	r0, [pc, #440]	; (800b670 <_dtoa_r+0x640>)
 800b4b6:	1109      	asrs	r1, r1, #4
 800b4b8:	2400      	movs	r4, #0
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	b939      	cbnz	r1, 800b4ce <_dtoa_r+0x49e>
 800b4be:	2c00      	cmp	r4, #0
 800b4c0:	f43f af60 	beq.w	800b384 <_dtoa_r+0x354>
 800b4c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b4c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4cc:	e75a      	b.n	800b384 <_dtoa_r+0x354>
 800b4ce:	07cf      	lsls	r7, r1, #31
 800b4d0:	d509      	bpl.n	800b4e6 <_dtoa_r+0x4b6>
 800b4d2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800b4d6:	ed90 7b00 	vldr	d7, [r0]
 800b4da:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b4de:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b4e2:	3201      	adds	r2, #1
 800b4e4:	2401      	movs	r4, #1
 800b4e6:	1049      	asrs	r1, r1, #1
 800b4e8:	3008      	adds	r0, #8
 800b4ea:	e7e7      	b.n	800b4bc <_dtoa_r+0x48c>
 800b4ec:	2202      	movs	r2, #2
 800b4ee:	e749      	b.n	800b384 <_dtoa_r+0x354>
 800b4f0:	465f      	mov	r7, fp
 800b4f2:	4648      	mov	r0, r9
 800b4f4:	e765      	b.n	800b3c2 <_dtoa_r+0x392>
 800b4f6:	ec42 1b17 	vmov	d7, r1, r2
 800b4fa:	4a5c      	ldr	r2, [pc, #368]	; (800b66c <_dtoa_r+0x63c>)
 800b4fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b500:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b504:	9a00      	ldr	r2, [sp, #0]
 800b506:	1814      	adds	r4, r2, r0
 800b508:	9a08      	ldr	r2, [sp, #32]
 800b50a:	b352      	cbz	r2, 800b562 <_dtoa_r+0x532>
 800b50c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b510:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b514:	f8dd 8000 	ldr.w	r8, [sp]
 800b518:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b51c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b520:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b524:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b528:	ee14 2a90 	vmov	r2, s9
 800b52c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b530:	3230      	adds	r2, #48	; 0x30
 800b532:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b536:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b53e:	f808 2b01 	strb.w	r2, [r8], #1
 800b542:	d439      	bmi.n	800b5b8 <_dtoa_r+0x588>
 800b544:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b548:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b550:	d472      	bmi.n	800b638 <_dtoa_r+0x608>
 800b552:	45a0      	cmp	r8, r4
 800b554:	f43f af5d 	beq.w	800b412 <_dtoa_r+0x3e2>
 800b558:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b55c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b560:	e7e0      	b.n	800b524 <_dtoa_r+0x4f4>
 800b562:	f8dd 8000 	ldr.w	r8, [sp]
 800b566:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b56a:	4621      	mov	r1, r4
 800b56c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b570:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b574:	ee14 2a90 	vmov	r2, s9
 800b578:	3230      	adds	r2, #48	; 0x30
 800b57a:	f808 2b01 	strb.w	r2, [r8], #1
 800b57e:	45a0      	cmp	r8, r4
 800b580:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b584:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b588:	d118      	bne.n	800b5bc <_dtoa_r+0x58c>
 800b58a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b58e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b592:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59a:	dc4d      	bgt.n	800b638 <_dtoa_r+0x608>
 800b59c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b5a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a8:	f57f af33 	bpl.w	800b412 <_dtoa_r+0x3e2>
 800b5ac:	4688      	mov	r8, r1
 800b5ae:	3901      	subs	r1, #1
 800b5b0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b5b4:	2b30      	cmp	r3, #48	; 0x30
 800b5b6:	d0f9      	beq.n	800b5ac <_dtoa_r+0x57c>
 800b5b8:	46bb      	mov	fp, r7
 800b5ba:	e02a      	b.n	800b612 <_dtoa_r+0x5e2>
 800b5bc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b5c0:	e7d6      	b.n	800b570 <_dtoa_r+0x540>
 800b5c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b5c6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b5ca:	f8dd 8000 	ldr.w	r8, [sp]
 800b5ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b5d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b5d6:	ee15 3a10 	vmov	r3, s10
 800b5da:	3330      	adds	r3, #48	; 0x30
 800b5dc:	f808 3b01 	strb.w	r3, [r8], #1
 800b5e0:	9b00      	ldr	r3, [sp, #0]
 800b5e2:	eba8 0303 	sub.w	r3, r8, r3
 800b5e6:	4599      	cmp	r9, r3
 800b5e8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b5ec:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b5f0:	d133      	bne.n	800b65a <_dtoa_r+0x62a>
 800b5f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b5f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5fe:	dc1a      	bgt.n	800b636 <_dtoa_r+0x606>
 800b600:	eeb4 7b46 	vcmp.f64	d7, d6
 800b604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b608:	d103      	bne.n	800b612 <_dtoa_r+0x5e2>
 800b60a:	ee15 3a10 	vmov	r3, s10
 800b60e:	07d9      	lsls	r1, r3, #31
 800b610:	d411      	bmi.n	800b636 <_dtoa_r+0x606>
 800b612:	4629      	mov	r1, r5
 800b614:	4630      	mov	r0, r6
 800b616:	f000 fae7 	bl	800bbe8 <_Bfree>
 800b61a:	2300      	movs	r3, #0
 800b61c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b61e:	f888 3000 	strb.w	r3, [r8]
 800b622:	f10b 0301 	add.w	r3, fp, #1
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f43f ad4d 	beq.w	800b0ca <_dtoa_r+0x9a>
 800b630:	f8c3 8000 	str.w	r8, [r3]
 800b634:	e549      	b.n	800b0ca <_dtoa_r+0x9a>
 800b636:	465f      	mov	r7, fp
 800b638:	4643      	mov	r3, r8
 800b63a:	4698      	mov	r8, r3
 800b63c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b640:	2a39      	cmp	r2, #57	; 0x39
 800b642:	d106      	bne.n	800b652 <_dtoa_r+0x622>
 800b644:	9a00      	ldr	r2, [sp, #0]
 800b646:	429a      	cmp	r2, r3
 800b648:	d1f7      	bne.n	800b63a <_dtoa_r+0x60a>
 800b64a:	9900      	ldr	r1, [sp, #0]
 800b64c:	2230      	movs	r2, #48	; 0x30
 800b64e:	3701      	adds	r7, #1
 800b650:	700a      	strb	r2, [r1, #0]
 800b652:	781a      	ldrb	r2, [r3, #0]
 800b654:	3201      	adds	r2, #1
 800b656:	701a      	strb	r2, [r3, #0]
 800b658:	e7ae      	b.n	800b5b8 <_dtoa_r+0x588>
 800b65a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b65e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b666:	d1b2      	bne.n	800b5ce <_dtoa_r+0x59e>
 800b668:	e7d3      	b.n	800b612 <_dtoa_r+0x5e2>
 800b66a:	bf00      	nop
 800b66c:	0800d518 	.word	0x0800d518
 800b670:	0800d4f0 	.word	0x0800d4f0
 800b674:	9908      	ldr	r1, [sp, #32]
 800b676:	2900      	cmp	r1, #0
 800b678:	f000 80d1 	beq.w	800b81e <_dtoa_r+0x7ee>
 800b67c:	9907      	ldr	r1, [sp, #28]
 800b67e:	2901      	cmp	r1, #1
 800b680:	f300 80b4 	bgt.w	800b7ec <_dtoa_r+0x7bc>
 800b684:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b686:	2900      	cmp	r1, #0
 800b688:	f000 80ac 	beq.w	800b7e4 <_dtoa_r+0x7b4>
 800b68c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b690:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b694:	461c      	mov	r4, r3
 800b696:	930a      	str	r3, [sp, #40]	; 0x28
 800b698:	9b05      	ldr	r3, [sp, #20]
 800b69a:	4413      	add	r3, r2
 800b69c:	9305      	str	r3, [sp, #20]
 800b69e:	9b06      	ldr	r3, [sp, #24]
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	4413      	add	r3, r2
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	9306      	str	r3, [sp, #24]
 800b6a8:	f000 fb5a 	bl	800bd60 <__i2b>
 800b6ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ae:	4607      	mov	r7, r0
 800b6b0:	f1b8 0f00 	cmp.w	r8, #0
 800b6b4:	dd0d      	ble.n	800b6d2 <_dtoa_r+0x6a2>
 800b6b6:	9a06      	ldr	r2, [sp, #24]
 800b6b8:	2a00      	cmp	r2, #0
 800b6ba:	dd0a      	ble.n	800b6d2 <_dtoa_r+0x6a2>
 800b6bc:	4542      	cmp	r2, r8
 800b6be:	9905      	ldr	r1, [sp, #20]
 800b6c0:	bfa8      	it	ge
 800b6c2:	4642      	movge	r2, r8
 800b6c4:	1a89      	subs	r1, r1, r2
 800b6c6:	9105      	str	r1, [sp, #20]
 800b6c8:	9906      	ldr	r1, [sp, #24]
 800b6ca:	eba8 0802 	sub.w	r8, r8, r2
 800b6ce:	1a8a      	subs	r2, r1, r2
 800b6d0:	9206      	str	r2, [sp, #24]
 800b6d2:	b303      	cbz	r3, 800b716 <_dtoa_r+0x6e6>
 800b6d4:	9a08      	ldr	r2, [sp, #32]
 800b6d6:	2a00      	cmp	r2, #0
 800b6d8:	f000 80a6 	beq.w	800b828 <_dtoa_r+0x7f8>
 800b6dc:	2c00      	cmp	r4, #0
 800b6de:	dd13      	ble.n	800b708 <_dtoa_r+0x6d8>
 800b6e0:	4639      	mov	r1, r7
 800b6e2:	4622      	mov	r2, r4
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	930c      	str	r3, [sp, #48]	; 0x30
 800b6e8:	f000 fbf6 	bl	800bed8 <__pow5mult>
 800b6ec:	462a      	mov	r2, r5
 800b6ee:	4601      	mov	r1, r0
 800b6f0:	4607      	mov	r7, r0
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f000 fb4a 	bl	800bd8c <__multiply>
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	900a      	str	r0, [sp, #40]	; 0x28
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f000 fa73 	bl	800bbe8 <_Bfree>
 800b702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b706:	4615      	mov	r5, r2
 800b708:	1b1a      	subs	r2, r3, r4
 800b70a:	d004      	beq.n	800b716 <_dtoa_r+0x6e6>
 800b70c:	4629      	mov	r1, r5
 800b70e:	4630      	mov	r0, r6
 800b710:	f000 fbe2 	bl	800bed8 <__pow5mult>
 800b714:	4605      	mov	r5, r0
 800b716:	2101      	movs	r1, #1
 800b718:	4630      	mov	r0, r6
 800b71a:	f000 fb21 	bl	800bd60 <__i2b>
 800b71e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b720:	2b00      	cmp	r3, #0
 800b722:	4604      	mov	r4, r0
 800b724:	f340 8082 	ble.w	800b82c <_dtoa_r+0x7fc>
 800b728:	461a      	mov	r2, r3
 800b72a:	4601      	mov	r1, r0
 800b72c:	4630      	mov	r0, r6
 800b72e:	f000 fbd3 	bl	800bed8 <__pow5mult>
 800b732:	9b07      	ldr	r3, [sp, #28]
 800b734:	2b01      	cmp	r3, #1
 800b736:	4604      	mov	r4, r0
 800b738:	dd7b      	ble.n	800b832 <_dtoa_r+0x802>
 800b73a:	2300      	movs	r3, #0
 800b73c:	930a      	str	r3, [sp, #40]	; 0x28
 800b73e:	6922      	ldr	r2, [r4, #16]
 800b740:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b744:	6910      	ldr	r0, [r2, #16]
 800b746:	f000 fabb 	bl	800bcc0 <__hi0bits>
 800b74a:	f1c0 0020 	rsb	r0, r0, #32
 800b74e:	9b06      	ldr	r3, [sp, #24]
 800b750:	4418      	add	r0, r3
 800b752:	f010 001f 	ands.w	r0, r0, #31
 800b756:	f000 808d 	beq.w	800b874 <_dtoa_r+0x844>
 800b75a:	f1c0 0220 	rsb	r2, r0, #32
 800b75e:	2a04      	cmp	r2, #4
 800b760:	f340 8086 	ble.w	800b870 <_dtoa_r+0x840>
 800b764:	f1c0 001c 	rsb	r0, r0, #28
 800b768:	9b05      	ldr	r3, [sp, #20]
 800b76a:	4403      	add	r3, r0
 800b76c:	9305      	str	r3, [sp, #20]
 800b76e:	9b06      	ldr	r3, [sp, #24]
 800b770:	4403      	add	r3, r0
 800b772:	4480      	add	r8, r0
 800b774:	9306      	str	r3, [sp, #24]
 800b776:	9b05      	ldr	r3, [sp, #20]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	dd05      	ble.n	800b788 <_dtoa_r+0x758>
 800b77c:	4629      	mov	r1, r5
 800b77e:	461a      	mov	r2, r3
 800b780:	4630      	mov	r0, r6
 800b782:	f000 fc03 	bl	800bf8c <__lshift>
 800b786:	4605      	mov	r5, r0
 800b788:	9b06      	ldr	r3, [sp, #24]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	dd05      	ble.n	800b79a <_dtoa_r+0x76a>
 800b78e:	4621      	mov	r1, r4
 800b790:	461a      	mov	r2, r3
 800b792:	4630      	mov	r0, r6
 800b794:	f000 fbfa 	bl	800bf8c <__lshift>
 800b798:	4604      	mov	r4, r0
 800b79a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d06b      	beq.n	800b878 <_dtoa_r+0x848>
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f000 fc5e 	bl	800c064 <__mcmp>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	da65      	bge.n	800b878 <_dtoa_r+0x848>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	220a      	movs	r2, #10
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f000 fa3a 	bl	800bc2c <__multadd>
 800b7b8:	9b08      	ldr	r3, [sp, #32]
 800b7ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b7be:	4605      	mov	r5, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f000 8192 	beq.w	800baea <_dtoa_r+0xaba>
 800b7c6:	4639      	mov	r1, r7
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	220a      	movs	r2, #10
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f000 fa2d 	bl	800bc2c <__multadd>
 800b7d2:	f1ba 0f00 	cmp.w	sl, #0
 800b7d6:	4607      	mov	r7, r0
 800b7d8:	f300 808e 	bgt.w	800b8f8 <_dtoa_r+0x8c8>
 800b7dc:	9b07      	ldr	r3, [sp, #28]
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	dc51      	bgt.n	800b886 <_dtoa_r+0x856>
 800b7e2:	e089      	b.n	800b8f8 <_dtoa_r+0x8c8>
 800b7e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b7ea:	e751      	b.n	800b690 <_dtoa_r+0x660>
 800b7ec:	f109 34ff 	add.w	r4, r9, #4294967295
 800b7f0:	42a3      	cmp	r3, r4
 800b7f2:	bfbf      	itttt	lt
 800b7f4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b7f6:	1ae3      	sublt	r3, r4, r3
 800b7f8:	18d2      	addlt	r2, r2, r3
 800b7fa:	4613      	movlt	r3, r2
 800b7fc:	bfb7      	itett	lt
 800b7fe:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b800:	1b1c      	subge	r4, r3, r4
 800b802:	4623      	movlt	r3, r4
 800b804:	2400      	movlt	r4, #0
 800b806:	f1b9 0f00 	cmp.w	r9, #0
 800b80a:	bfb5      	itete	lt
 800b80c:	9a05      	ldrlt	r2, [sp, #20]
 800b80e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800b812:	eba2 0809 	sublt.w	r8, r2, r9
 800b816:	464a      	movge	r2, r9
 800b818:	bfb8      	it	lt
 800b81a:	2200      	movlt	r2, #0
 800b81c:	e73b      	b.n	800b696 <_dtoa_r+0x666>
 800b81e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b822:	9f08      	ldr	r7, [sp, #32]
 800b824:	461c      	mov	r4, r3
 800b826:	e743      	b.n	800b6b0 <_dtoa_r+0x680>
 800b828:	461a      	mov	r2, r3
 800b82a:	e76f      	b.n	800b70c <_dtoa_r+0x6dc>
 800b82c:	9b07      	ldr	r3, [sp, #28]
 800b82e:	2b01      	cmp	r3, #1
 800b830:	dc18      	bgt.n	800b864 <_dtoa_r+0x834>
 800b832:	9b02      	ldr	r3, [sp, #8]
 800b834:	b9b3      	cbnz	r3, 800b864 <_dtoa_r+0x834>
 800b836:	9b03      	ldr	r3, [sp, #12]
 800b838:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b83c:	b9a2      	cbnz	r2, 800b868 <_dtoa_r+0x838>
 800b83e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b842:	0d12      	lsrs	r2, r2, #20
 800b844:	0512      	lsls	r2, r2, #20
 800b846:	b18a      	cbz	r2, 800b86c <_dtoa_r+0x83c>
 800b848:	9b05      	ldr	r3, [sp, #20]
 800b84a:	3301      	adds	r3, #1
 800b84c:	9305      	str	r3, [sp, #20]
 800b84e:	9b06      	ldr	r3, [sp, #24]
 800b850:	3301      	adds	r3, #1
 800b852:	9306      	str	r3, [sp, #24]
 800b854:	2301      	movs	r3, #1
 800b856:	930a      	str	r3, [sp, #40]	; 0x28
 800b858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f47f af6f 	bne.w	800b73e <_dtoa_r+0x70e>
 800b860:	2001      	movs	r0, #1
 800b862:	e774      	b.n	800b74e <_dtoa_r+0x71e>
 800b864:	2300      	movs	r3, #0
 800b866:	e7f6      	b.n	800b856 <_dtoa_r+0x826>
 800b868:	9b02      	ldr	r3, [sp, #8]
 800b86a:	e7f4      	b.n	800b856 <_dtoa_r+0x826>
 800b86c:	920a      	str	r2, [sp, #40]	; 0x28
 800b86e:	e7f3      	b.n	800b858 <_dtoa_r+0x828>
 800b870:	d081      	beq.n	800b776 <_dtoa_r+0x746>
 800b872:	4610      	mov	r0, r2
 800b874:	301c      	adds	r0, #28
 800b876:	e777      	b.n	800b768 <_dtoa_r+0x738>
 800b878:	f1b9 0f00 	cmp.w	r9, #0
 800b87c:	dc37      	bgt.n	800b8ee <_dtoa_r+0x8be>
 800b87e:	9b07      	ldr	r3, [sp, #28]
 800b880:	2b02      	cmp	r3, #2
 800b882:	dd34      	ble.n	800b8ee <_dtoa_r+0x8be>
 800b884:	46ca      	mov	sl, r9
 800b886:	f1ba 0f00 	cmp.w	sl, #0
 800b88a:	d10d      	bne.n	800b8a8 <_dtoa_r+0x878>
 800b88c:	4621      	mov	r1, r4
 800b88e:	4653      	mov	r3, sl
 800b890:	2205      	movs	r2, #5
 800b892:	4630      	mov	r0, r6
 800b894:	f000 f9ca 	bl	800bc2c <__multadd>
 800b898:	4601      	mov	r1, r0
 800b89a:	4604      	mov	r4, r0
 800b89c:	4628      	mov	r0, r5
 800b89e:	f000 fbe1 	bl	800c064 <__mcmp>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	f73f adde 	bgt.w	800b464 <_dtoa_r+0x434>
 800b8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8aa:	f8dd 8000 	ldr.w	r8, [sp]
 800b8ae:	ea6f 0b03 	mvn.w	fp, r3
 800b8b2:	f04f 0900 	mov.w	r9, #0
 800b8b6:	4621      	mov	r1, r4
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	f000 f995 	bl	800bbe8 <_Bfree>
 800b8be:	2f00      	cmp	r7, #0
 800b8c0:	f43f aea7 	beq.w	800b612 <_dtoa_r+0x5e2>
 800b8c4:	f1b9 0f00 	cmp.w	r9, #0
 800b8c8:	d005      	beq.n	800b8d6 <_dtoa_r+0x8a6>
 800b8ca:	45b9      	cmp	r9, r7
 800b8cc:	d003      	beq.n	800b8d6 <_dtoa_r+0x8a6>
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f000 f989 	bl	800bbe8 <_Bfree>
 800b8d6:	4639      	mov	r1, r7
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f000 f985 	bl	800bbe8 <_Bfree>
 800b8de:	e698      	b.n	800b612 <_dtoa_r+0x5e2>
 800b8e0:	2400      	movs	r4, #0
 800b8e2:	4627      	mov	r7, r4
 800b8e4:	e7e0      	b.n	800b8a8 <_dtoa_r+0x878>
 800b8e6:	46bb      	mov	fp, r7
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	4607      	mov	r7, r0
 800b8ec:	e5ba      	b.n	800b464 <_dtoa_r+0x434>
 800b8ee:	9b08      	ldr	r3, [sp, #32]
 800b8f0:	46ca      	mov	sl, r9
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f000 8100 	beq.w	800baf8 <_dtoa_r+0xac8>
 800b8f8:	f1b8 0f00 	cmp.w	r8, #0
 800b8fc:	dd05      	ble.n	800b90a <_dtoa_r+0x8da>
 800b8fe:	4639      	mov	r1, r7
 800b900:	4642      	mov	r2, r8
 800b902:	4630      	mov	r0, r6
 800b904:	f000 fb42 	bl	800bf8c <__lshift>
 800b908:	4607      	mov	r7, r0
 800b90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d05d      	beq.n	800b9cc <_dtoa_r+0x99c>
 800b910:	6879      	ldr	r1, [r7, #4]
 800b912:	4630      	mov	r0, r6
 800b914:	f000 f928 	bl	800bb68 <_Balloc>
 800b918:	4680      	mov	r8, r0
 800b91a:	b928      	cbnz	r0, 800b928 <_dtoa_r+0x8f8>
 800b91c:	4b82      	ldr	r3, [pc, #520]	; (800bb28 <_dtoa_r+0xaf8>)
 800b91e:	4602      	mov	r2, r0
 800b920:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b924:	f7ff bb9a 	b.w	800b05c <_dtoa_r+0x2c>
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	3202      	adds	r2, #2
 800b92c:	0092      	lsls	r2, r2, #2
 800b92e:	f107 010c 	add.w	r1, r7, #12
 800b932:	300c      	adds	r0, #12
 800b934:	f000 f90a 	bl	800bb4c <memcpy>
 800b938:	2201      	movs	r2, #1
 800b93a:	4641      	mov	r1, r8
 800b93c:	4630      	mov	r0, r6
 800b93e:	f000 fb25 	bl	800bf8c <__lshift>
 800b942:	9b00      	ldr	r3, [sp, #0]
 800b944:	3301      	adds	r3, #1
 800b946:	9305      	str	r3, [sp, #20]
 800b948:	9b00      	ldr	r3, [sp, #0]
 800b94a:	4453      	add	r3, sl
 800b94c:	9309      	str	r3, [sp, #36]	; 0x24
 800b94e:	9b02      	ldr	r3, [sp, #8]
 800b950:	f003 0301 	and.w	r3, r3, #1
 800b954:	46b9      	mov	r9, r7
 800b956:	9308      	str	r3, [sp, #32]
 800b958:	4607      	mov	r7, r0
 800b95a:	9b05      	ldr	r3, [sp, #20]
 800b95c:	4621      	mov	r1, r4
 800b95e:	3b01      	subs	r3, #1
 800b960:	4628      	mov	r0, r5
 800b962:	9302      	str	r3, [sp, #8]
 800b964:	f7ff fad6 	bl	800af14 <quorem>
 800b968:	4603      	mov	r3, r0
 800b96a:	3330      	adds	r3, #48	; 0x30
 800b96c:	9006      	str	r0, [sp, #24]
 800b96e:	4649      	mov	r1, r9
 800b970:	4628      	mov	r0, r5
 800b972:	930a      	str	r3, [sp, #40]	; 0x28
 800b974:	f000 fb76 	bl	800c064 <__mcmp>
 800b978:	463a      	mov	r2, r7
 800b97a:	4682      	mov	sl, r0
 800b97c:	4621      	mov	r1, r4
 800b97e:	4630      	mov	r0, r6
 800b980:	f000 fb8c 	bl	800c09c <__mdiff>
 800b984:	68c2      	ldr	r2, [r0, #12]
 800b986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b988:	4680      	mov	r8, r0
 800b98a:	bb0a      	cbnz	r2, 800b9d0 <_dtoa_r+0x9a0>
 800b98c:	4601      	mov	r1, r0
 800b98e:	4628      	mov	r0, r5
 800b990:	f000 fb68 	bl	800c064 <__mcmp>
 800b994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b996:	4602      	mov	r2, r0
 800b998:	4641      	mov	r1, r8
 800b99a:	4630      	mov	r0, r6
 800b99c:	920e      	str	r2, [sp, #56]	; 0x38
 800b99e:	930a      	str	r3, [sp, #40]	; 0x28
 800b9a0:	f000 f922 	bl	800bbe8 <_Bfree>
 800b9a4:	9b07      	ldr	r3, [sp, #28]
 800b9a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9a8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b9ac:	ea43 0102 	orr.w	r1, r3, r2
 800b9b0:	9b08      	ldr	r3, [sp, #32]
 800b9b2:	430b      	orrs	r3, r1
 800b9b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9b6:	d10d      	bne.n	800b9d4 <_dtoa_r+0x9a4>
 800b9b8:	2b39      	cmp	r3, #57	; 0x39
 800b9ba:	d029      	beq.n	800ba10 <_dtoa_r+0x9e0>
 800b9bc:	f1ba 0f00 	cmp.w	sl, #0
 800b9c0:	dd01      	ble.n	800b9c6 <_dtoa_r+0x996>
 800b9c2:	9b06      	ldr	r3, [sp, #24]
 800b9c4:	3331      	adds	r3, #49	; 0x31
 800b9c6:	9a02      	ldr	r2, [sp, #8]
 800b9c8:	7013      	strb	r3, [r2, #0]
 800b9ca:	e774      	b.n	800b8b6 <_dtoa_r+0x886>
 800b9cc:	4638      	mov	r0, r7
 800b9ce:	e7b8      	b.n	800b942 <_dtoa_r+0x912>
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	e7e1      	b.n	800b998 <_dtoa_r+0x968>
 800b9d4:	f1ba 0f00 	cmp.w	sl, #0
 800b9d8:	db06      	blt.n	800b9e8 <_dtoa_r+0x9b8>
 800b9da:	9907      	ldr	r1, [sp, #28]
 800b9dc:	ea41 0a0a 	orr.w	sl, r1, sl
 800b9e0:	9908      	ldr	r1, [sp, #32]
 800b9e2:	ea5a 0101 	orrs.w	r1, sl, r1
 800b9e6:	d120      	bne.n	800ba2a <_dtoa_r+0x9fa>
 800b9e8:	2a00      	cmp	r2, #0
 800b9ea:	ddec      	ble.n	800b9c6 <_dtoa_r+0x996>
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	9305      	str	r3, [sp, #20]
 800b9f4:	f000 faca 	bl	800bf8c <__lshift>
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	4605      	mov	r5, r0
 800b9fc:	f000 fb32 	bl	800c064 <__mcmp>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	9b05      	ldr	r3, [sp, #20]
 800ba04:	dc02      	bgt.n	800ba0c <_dtoa_r+0x9dc>
 800ba06:	d1de      	bne.n	800b9c6 <_dtoa_r+0x996>
 800ba08:	07da      	lsls	r2, r3, #31
 800ba0a:	d5dc      	bpl.n	800b9c6 <_dtoa_r+0x996>
 800ba0c:	2b39      	cmp	r3, #57	; 0x39
 800ba0e:	d1d8      	bne.n	800b9c2 <_dtoa_r+0x992>
 800ba10:	9a02      	ldr	r2, [sp, #8]
 800ba12:	2339      	movs	r3, #57	; 0x39
 800ba14:	7013      	strb	r3, [r2, #0]
 800ba16:	4643      	mov	r3, r8
 800ba18:	4698      	mov	r8, r3
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ba20:	2a39      	cmp	r2, #57	; 0x39
 800ba22:	d051      	beq.n	800bac8 <_dtoa_r+0xa98>
 800ba24:	3201      	adds	r2, #1
 800ba26:	701a      	strb	r2, [r3, #0]
 800ba28:	e745      	b.n	800b8b6 <_dtoa_r+0x886>
 800ba2a:	2a00      	cmp	r2, #0
 800ba2c:	dd03      	ble.n	800ba36 <_dtoa_r+0xa06>
 800ba2e:	2b39      	cmp	r3, #57	; 0x39
 800ba30:	d0ee      	beq.n	800ba10 <_dtoa_r+0x9e0>
 800ba32:	3301      	adds	r3, #1
 800ba34:	e7c7      	b.n	800b9c6 <_dtoa_r+0x996>
 800ba36:	9a05      	ldr	r2, [sp, #20]
 800ba38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba3a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ba3e:	428a      	cmp	r2, r1
 800ba40:	d02b      	beq.n	800ba9a <_dtoa_r+0xa6a>
 800ba42:	4629      	mov	r1, r5
 800ba44:	2300      	movs	r3, #0
 800ba46:	220a      	movs	r2, #10
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f000 f8ef 	bl	800bc2c <__multadd>
 800ba4e:	45b9      	cmp	r9, r7
 800ba50:	4605      	mov	r5, r0
 800ba52:	f04f 0300 	mov.w	r3, #0
 800ba56:	f04f 020a 	mov.w	r2, #10
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	d107      	bne.n	800ba70 <_dtoa_r+0xa40>
 800ba60:	f000 f8e4 	bl	800bc2c <__multadd>
 800ba64:	4681      	mov	r9, r0
 800ba66:	4607      	mov	r7, r0
 800ba68:	9b05      	ldr	r3, [sp, #20]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	9305      	str	r3, [sp, #20]
 800ba6e:	e774      	b.n	800b95a <_dtoa_r+0x92a>
 800ba70:	f000 f8dc 	bl	800bc2c <__multadd>
 800ba74:	4639      	mov	r1, r7
 800ba76:	4681      	mov	r9, r0
 800ba78:	2300      	movs	r3, #0
 800ba7a:	220a      	movs	r2, #10
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	f000 f8d5 	bl	800bc2c <__multadd>
 800ba82:	4607      	mov	r7, r0
 800ba84:	e7f0      	b.n	800ba68 <_dtoa_r+0xa38>
 800ba86:	f1ba 0f00 	cmp.w	sl, #0
 800ba8a:	9a00      	ldr	r2, [sp, #0]
 800ba8c:	bfcc      	ite	gt
 800ba8e:	46d0      	movgt	r8, sl
 800ba90:	f04f 0801 	movle.w	r8, #1
 800ba94:	4490      	add	r8, r2
 800ba96:	f04f 0900 	mov.w	r9, #0
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	4630      	mov	r0, r6
 800baa0:	9302      	str	r3, [sp, #8]
 800baa2:	f000 fa73 	bl	800bf8c <__lshift>
 800baa6:	4621      	mov	r1, r4
 800baa8:	4605      	mov	r5, r0
 800baaa:	f000 fadb 	bl	800c064 <__mcmp>
 800baae:	2800      	cmp	r0, #0
 800bab0:	dcb1      	bgt.n	800ba16 <_dtoa_r+0x9e6>
 800bab2:	d102      	bne.n	800baba <_dtoa_r+0xa8a>
 800bab4:	9b02      	ldr	r3, [sp, #8]
 800bab6:	07db      	lsls	r3, r3, #31
 800bab8:	d4ad      	bmi.n	800ba16 <_dtoa_r+0x9e6>
 800baba:	4643      	mov	r3, r8
 800babc:	4698      	mov	r8, r3
 800babe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bac2:	2a30      	cmp	r2, #48	; 0x30
 800bac4:	d0fa      	beq.n	800babc <_dtoa_r+0xa8c>
 800bac6:	e6f6      	b.n	800b8b6 <_dtoa_r+0x886>
 800bac8:	9a00      	ldr	r2, [sp, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d1a4      	bne.n	800ba18 <_dtoa_r+0x9e8>
 800bace:	f10b 0b01 	add.w	fp, fp, #1
 800bad2:	2331      	movs	r3, #49	; 0x31
 800bad4:	e778      	b.n	800b9c8 <_dtoa_r+0x998>
 800bad6:	4b15      	ldr	r3, [pc, #84]	; (800bb2c <_dtoa_r+0xafc>)
 800bad8:	f7ff bb12 	b.w	800b100 <_dtoa_r+0xd0>
 800badc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f47f aaee 	bne.w	800b0c0 <_dtoa_r+0x90>
 800bae4:	4b12      	ldr	r3, [pc, #72]	; (800bb30 <_dtoa_r+0xb00>)
 800bae6:	f7ff bb0b 	b.w	800b100 <_dtoa_r+0xd0>
 800baea:	f1ba 0f00 	cmp.w	sl, #0
 800baee:	dc03      	bgt.n	800baf8 <_dtoa_r+0xac8>
 800baf0:	9b07      	ldr	r3, [sp, #28]
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	f73f aec7 	bgt.w	800b886 <_dtoa_r+0x856>
 800baf8:	f8dd 8000 	ldr.w	r8, [sp]
 800bafc:	4621      	mov	r1, r4
 800bafe:	4628      	mov	r0, r5
 800bb00:	f7ff fa08 	bl	800af14 <quorem>
 800bb04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bb08:	f808 3b01 	strb.w	r3, [r8], #1
 800bb0c:	9a00      	ldr	r2, [sp, #0]
 800bb0e:	eba8 0202 	sub.w	r2, r8, r2
 800bb12:	4592      	cmp	sl, r2
 800bb14:	ddb7      	ble.n	800ba86 <_dtoa_r+0xa56>
 800bb16:	4629      	mov	r1, r5
 800bb18:	2300      	movs	r3, #0
 800bb1a:	220a      	movs	r2, #10
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f000 f885 	bl	800bc2c <__multadd>
 800bb22:	4605      	mov	r5, r0
 800bb24:	e7ea      	b.n	800bafc <_dtoa_r+0xacc>
 800bb26:	bf00      	nop
 800bb28:	0800d47f 	.word	0x0800d47f
 800bb2c:	0800d3d8 	.word	0x0800d3d8
 800bb30:	0800d3fc 	.word	0x0800d3fc

0800bb34 <_localeconv_r>:
 800bb34:	4800      	ldr	r0, [pc, #0]	; (800bb38 <_localeconv_r+0x4>)
 800bb36:	4770      	bx	lr
 800bb38:	24000164 	.word	0x24000164

0800bb3c <malloc>:
 800bb3c:	4b02      	ldr	r3, [pc, #8]	; (800bb48 <malloc+0xc>)
 800bb3e:	4601      	mov	r1, r0
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	f000 bbef 	b.w	800c324 <_malloc_r>
 800bb46:	bf00      	nop
 800bb48:	24000010 	.word	0x24000010

0800bb4c <memcpy>:
 800bb4c:	440a      	add	r2, r1
 800bb4e:	4291      	cmp	r1, r2
 800bb50:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb54:	d100      	bne.n	800bb58 <memcpy+0xc>
 800bb56:	4770      	bx	lr
 800bb58:	b510      	push	{r4, lr}
 800bb5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb62:	4291      	cmp	r1, r2
 800bb64:	d1f9      	bne.n	800bb5a <memcpy+0xe>
 800bb66:	bd10      	pop	{r4, pc}

0800bb68 <_Balloc>:
 800bb68:	b570      	push	{r4, r5, r6, lr}
 800bb6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	460d      	mov	r5, r1
 800bb70:	b976      	cbnz	r6, 800bb90 <_Balloc+0x28>
 800bb72:	2010      	movs	r0, #16
 800bb74:	f7ff ffe2 	bl	800bb3c <malloc>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	6260      	str	r0, [r4, #36]	; 0x24
 800bb7c:	b920      	cbnz	r0, 800bb88 <_Balloc+0x20>
 800bb7e:	4b18      	ldr	r3, [pc, #96]	; (800bbe0 <_Balloc+0x78>)
 800bb80:	4818      	ldr	r0, [pc, #96]	; (800bbe4 <_Balloc+0x7c>)
 800bb82:	2166      	movs	r1, #102	; 0x66
 800bb84:	f000 fd94 	bl	800c6b0 <__assert_func>
 800bb88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb8c:	6006      	str	r6, [r0, #0]
 800bb8e:	60c6      	str	r6, [r0, #12]
 800bb90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb92:	68f3      	ldr	r3, [r6, #12]
 800bb94:	b183      	cbz	r3, 800bbb8 <_Balloc+0x50>
 800bb96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb9e:	b9b8      	cbnz	r0, 800bbd0 <_Balloc+0x68>
 800bba0:	2101      	movs	r1, #1
 800bba2:	fa01 f605 	lsl.w	r6, r1, r5
 800bba6:	1d72      	adds	r2, r6, #5
 800bba8:	0092      	lsls	r2, r2, #2
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f000 fb5a 	bl	800c264 <_calloc_r>
 800bbb0:	b160      	cbz	r0, 800bbcc <_Balloc+0x64>
 800bbb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbb6:	e00e      	b.n	800bbd6 <_Balloc+0x6e>
 800bbb8:	2221      	movs	r2, #33	; 0x21
 800bbba:	2104      	movs	r1, #4
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f000 fb51 	bl	800c264 <_calloc_r>
 800bbc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbc4:	60f0      	str	r0, [r6, #12]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1e4      	bne.n	800bb96 <_Balloc+0x2e>
 800bbcc:	2000      	movs	r0, #0
 800bbce:	bd70      	pop	{r4, r5, r6, pc}
 800bbd0:	6802      	ldr	r2, [r0, #0]
 800bbd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbdc:	e7f7      	b.n	800bbce <_Balloc+0x66>
 800bbde:	bf00      	nop
 800bbe0:	0800d409 	.word	0x0800d409
 800bbe4:	0800d490 	.word	0x0800d490

0800bbe8 <_Bfree>:
 800bbe8:	b570      	push	{r4, r5, r6, lr}
 800bbea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbec:	4605      	mov	r5, r0
 800bbee:	460c      	mov	r4, r1
 800bbf0:	b976      	cbnz	r6, 800bc10 <_Bfree+0x28>
 800bbf2:	2010      	movs	r0, #16
 800bbf4:	f7ff ffa2 	bl	800bb3c <malloc>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	6268      	str	r0, [r5, #36]	; 0x24
 800bbfc:	b920      	cbnz	r0, 800bc08 <_Bfree+0x20>
 800bbfe:	4b09      	ldr	r3, [pc, #36]	; (800bc24 <_Bfree+0x3c>)
 800bc00:	4809      	ldr	r0, [pc, #36]	; (800bc28 <_Bfree+0x40>)
 800bc02:	218a      	movs	r1, #138	; 0x8a
 800bc04:	f000 fd54 	bl	800c6b0 <__assert_func>
 800bc08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc0c:	6006      	str	r6, [r0, #0]
 800bc0e:	60c6      	str	r6, [r0, #12]
 800bc10:	b13c      	cbz	r4, 800bc22 <_Bfree+0x3a>
 800bc12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc14:	6862      	ldr	r2, [r4, #4]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc1c:	6021      	str	r1, [r4, #0]
 800bc1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc22:	bd70      	pop	{r4, r5, r6, pc}
 800bc24:	0800d409 	.word	0x0800d409
 800bc28:	0800d490 	.word	0x0800d490

0800bc2c <__multadd>:
 800bc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc30:	690e      	ldr	r6, [r1, #16]
 800bc32:	4607      	mov	r7, r0
 800bc34:	4698      	mov	r8, r3
 800bc36:	460c      	mov	r4, r1
 800bc38:	f101 0014 	add.w	r0, r1, #20
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	6805      	ldr	r5, [r0, #0]
 800bc40:	b2a9      	uxth	r1, r5
 800bc42:	fb02 8101 	mla	r1, r2, r1, r8
 800bc46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bc4a:	0c2d      	lsrs	r5, r5, #16
 800bc4c:	fb02 c505 	mla	r5, r2, r5, ip
 800bc50:	b289      	uxth	r1, r1
 800bc52:	3301      	adds	r3, #1
 800bc54:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bc58:	429e      	cmp	r6, r3
 800bc5a:	f840 1b04 	str.w	r1, [r0], #4
 800bc5e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bc62:	dcec      	bgt.n	800bc3e <__multadd+0x12>
 800bc64:	f1b8 0f00 	cmp.w	r8, #0
 800bc68:	d022      	beq.n	800bcb0 <__multadd+0x84>
 800bc6a:	68a3      	ldr	r3, [r4, #8]
 800bc6c:	42b3      	cmp	r3, r6
 800bc6e:	dc19      	bgt.n	800bca4 <__multadd+0x78>
 800bc70:	6861      	ldr	r1, [r4, #4]
 800bc72:	4638      	mov	r0, r7
 800bc74:	3101      	adds	r1, #1
 800bc76:	f7ff ff77 	bl	800bb68 <_Balloc>
 800bc7a:	4605      	mov	r5, r0
 800bc7c:	b928      	cbnz	r0, 800bc8a <__multadd+0x5e>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	4b0d      	ldr	r3, [pc, #52]	; (800bcb8 <__multadd+0x8c>)
 800bc82:	480e      	ldr	r0, [pc, #56]	; (800bcbc <__multadd+0x90>)
 800bc84:	21b5      	movs	r1, #181	; 0xb5
 800bc86:	f000 fd13 	bl	800c6b0 <__assert_func>
 800bc8a:	6922      	ldr	r2, [r4, #16]
 800bc8c:	3202      	adds	r2, #2
 800bc8e:	f104 010c 	add.w	r1, r4, #12
 800bc92:	0092      	lsls	r2, r2, #2
 800bc94:	300c      	adds	r0, #12
 800bc96:	f7ff ff59 	bl	800bb4c <memcpy>
 800bc9a:	4621      	mov	r1, r4
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	f7ff ffa3 	bl	800bbe8 <_Bfree>
 800bca2:	462c      	mov	r4, r5
 800bca4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bca8:	3601      	adds	r6, #1
 800bcaa:	f8c3 8014 	str.w	r8, [r3, #20]
 800bcae:	6126      	str	r6, [r4, #16]
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb6:	bf00      	nop
 800bcb8:	0800d47f 	.word	0x0800d47f
 800bcbc:	0800d490 	.word	0x0800d490

0800bcc0 <__hi0bits>:
 800bcc0:	0c03      	lsrs	r3, r0, #16
 800bcc2:	041b      	lsls	r3, r3, #16
 800bcc4:	b9d3      	cbnz	r3, 800bcfc <__hi0bits+0x3c>
 800bcc6:	0400      	lsls	r0, r0, #16
 800bcc8:	2310      	movs	r3, #16
 800bcca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bcce:	bf04      	itt	eq
 800bcd0:	0200      	lsleq	r0, r0, #8
 800bcd2:	3308      	addeq	r3, #8
 800bcd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bcd8:	bf04      	itt	eq
 800bcda:	0100      	lsleq	r0, r0, #4
 800bcdc:	3304      	addeq	r3, #4
 800bcde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bce2:	bf04      	itt	eq
 800bce4:	0080      	lsleq	r0, r0, #2
 800bce6:	3302      	addeq	r3, #2
 800bce8:	2800      	cmp	r0, #0
 800bcea:	db05      	blt.n	800bcf8 <__hi0bits+0x38>
 800bcec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bcf0:	f103 0301 	add.w	r3, r3, #1
 800bcf4:	bf08      	it	eq
 800bcf6:	2320      	moveq	r3, #32
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	4770      	bx	lr
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	e7e4      	b.n	800bcca <__hi0bits+0xa>

0800bd00 <__lo0bits>:
 800bd00:	6803      	ldr	r3, [r0, #0]
 800bd02:	f013 0207 	ands.w	r2, r3, #7
 800bd06:	4601      	mov	r1, r0
 800bd08:	d00b      	beq.n	800bd22 <__lo0bits+0x22>
 800bd0a:	07da      	lsls	r2, r3, #31
 800bd0c:	d424      	bmi.n	800bd58 <__lo0bits+0x58>
 800bd0e:	0798      	lsls	r0, r3, #30
 800bd10:	bf49      	itett	mi
 800bd12:	085b      	lsrmi	r3, r3, #1
 800bd14:	089b      	lsrpl	r3, r3, #2
 800bd16:	2001      	movmi	r0, #1
 800bd18:	600b      	strmi	r3, [r1, #0]
 800bd1a:	bf5c      	itt	pl
 800bd1c:	600b      	strpl	r3, [r1, #0]
 800bd1e:	2002      	movpl	r0, #2
 800bd20:	4770      	bx	lr
 800bd22:	b298      	uxth	r0, r3
 800bd24:	b9b0      	cbnz	r0, 800bd54 <__lo0bits+0x54>
 800bd26:	0c1b      	lsrs	r3, r3, #16
 800bd28:	2010      	movs	r0, #16
 800bd2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bd2e:	bf04      	itt	eq
 800bd30:	0a1b      	lsreq	r3, r3, #8
 800bd32:	3008      	addeq	r0, #8
 800bd34:	071a      	lsls	r2, r3, #28
 800bd36:	bf04      	itt	eq
 800bd38:	091b      	lsreq	r3, r3, #4
 800bd3a:	3004      	addeq	r0, #4
 800bd3c:	079a      	lsls	r2, r3, #30
 800bd3e:	bf04      	itt	eq
 800bd40:	089b      	lsreq	r3, r3, #2
 800bd42:	3002      	addeq	r0, #2
 800bd44:	07da      	lsls	r2, r3, #31
 800bd46:	d403      	bmi.n	800bd50 <__lo0bits+0x50>
 800bd48:	085b      	lsrs	r3, r3, #1
 800bd4a:	f100 0001 	add.w	r0, r0, #1
 800bd4e:	d005      	beq.n	800bd5c <__lo0bits+0x5c>
 800bd50:	600b      	str	r3, [r1, #0]
 800bd52:	4770      	bx	lr
 800bd54:	4610      	mov	r0, r2
 800bd56:	e7e8      	b.n	800bd2a <__lo0bits+0x2a>
 800bd58:	2000      	movs	r0, #0
 800bd5a:	4770      	bx	lr
 800bd5c:	2020      	movs	r0, #32
 800bd5e:	4770      	bx	lr

0800bd60 <__i2b>:
 800bd60:	b510      	push	{r4, lr}
 800bd62:	460c      	mov	r4, r1
 800bd64:	2101      	movs	r1, #1
 800bd66:	f7ff feff 	bl	800bb68 <_Balloc>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	b928      	cbnz	r0, 800bd7a <__i2b+0x1a>
 800bd6e:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <__i2b+0x24>)
 800bd70:	4805      	ldr	r0, [pc, #20]	; (800bd88 <__i2b+0x28>)
 800bd72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd76:	f000 fc9b 	bl	800c6b0 <__assert_func>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	6144      	str	r4, [r0, #20]
 800bd7e:	6103      	str	r3, [r0, #16]
 800bd80:	bd10      	pop	{r4, pc}
 800bd82:	bf00      	nop
 800bd84:	0800d47f 	.word	0x0800d47f
 800bd88:	0800d490 	.word	0x0800d490

0800bd8c <__multiply>:
 800bd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd90:	4614      	mov	r4, r2
 800bd92:	690a      	ldr	r2, [r1, #16]
 800bd94:	6923      	ldr	r3, [r4, #16]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	bfb8      	it	lt
 800bd9a:	460b      	movlt	r3, r1
 800bd9c:	460d      	mov	r5, r1
 800bd9e:	bfbc      	itt	lt
 800bda0:	4625      	movlt	r5, r4
 800bda2:	461c      	movlt	r4, r3
 800bda4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bda8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bdac:	68ab      	ldr	r3, [r5, #8]
 800bdae:	6869      	ldr	r1, [r5, #4]
 800bdb0:	eb0a 0709 	add.w	r7, sl, r9
 800bdb4:	42bb      	cmp	r3, r7
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	bfb8      	it	lt
 800bdba:	3101      	addlt	r1, #1
 800bdbc:	f7ff fed4 	bl	800bb68 <_Balloc>
 800bdc0:	b930      	cbnz	r0, 800bdd0 <__multiply+0x44>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	4b42      	ldr	r3, [pc, #264]	; (800bed0 <__multiply+0x144>)
 800bdc6:	4843      	ldr	r0, [pc, #268]	; (800bed4 <__multiply+0x148>)
 800bdc8:	f240 115d 	movw	r1, #349	; 0x15d
 800bdcc:	f000 fc70 	bl	800c6b0 <__assert_func>
 800bdd0:	f100 0614 	add.w	r6, r0, #20
 800bdd4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bdd8:	4633      	mov	r3, r6
 800bdda:	2200      	movs	r2, #0
 800bddc:	4543      	cmp	r3, r8
 800bdde:	d31e      	bcc.n	800be1e <__multiply+0x92>
 800bde0:	f105 0c14 	add.w	ip, r5, #20
 800bde4:	f104 0314 	add.w	r3, r4, #20
 800bde8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bdec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bdf0:	9202      	str	r2, [sp, #8]
 800bdf2:	ebac 0205 	sub.w	r2, ip, r5
 800bdf6:	3a15      	subs	r2, #21
 800bdf8:	f022 0203 	bic.w	r2, r2, #3
 800bdfc:	3204      	adds	r2, #4
 800bdfe:	f105 0115 	add.w	r1, r5, #21
 800be02:	458c      	cmp	ip, r1
 800be04:	bf38      	it	cc
 800be06:	2204      	movcc	r2, #4
 800be08:	9201      	str	r2, [sp, #4]
 800be0a:	9a02      	ldr	r2, [sp, #8]
 800be0c:	9303      	str	r3, [sp, #12]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d808      	bhi.n	800be24 <__multiply+0x98>
 800be12:	2f00      	cmp	r7, #0
 800be14:	dc55      	bgt.n	800bec2 <__multiply+0x136>
 800be16:	6107      	str	r7, [r0, #16]
 800be18:	b005      	add	sp, #20
 800be1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1e:	f843 2b04 	str.w	r2, [r3], #4
 800be22:	e7db      	b.n	800bddc <__multiply+0x50>
 800be24:	f8b3 a000 	ldrh.w	sl, [r3]
 800be28:	f1ba 0f00 	cmp.w	sl, #0
 800be2c:	d020      	beq.n	800be70 <__multiply+0xe4>
 800be2e:	f105 0e14 	add.w	lr, r5, #20
 800be32:	46b1      	mov	r9, r6
 800be34:	2200      	movs	r2, #0
 800be36:	f85e 4b04 	ldr.w	r4, [lr], #4
 800be3a:	f8d9 b000 	ldr.w	fp, [r9]
 800be3e:	b2a1      	uxth	r1, r4
 800be40:	fa1f fb8b 	uxth.w	fp, fp
 800be44:	fb0a b101 	mla	r1, sl, r1, fp
 800be48:	4411      	add	r1, r2
 800be4a:	f8d9 2000 	ldr.w	r2, [r9]
 800be4e:	0c24      	lsrs	r4, r4, #16
 800be50:	0c12      	lsrs	r2, r2, #16
 800be52:	fb0a 2404 	mla	r4, sl, r4, r2
 800be56:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800be5a:	b289      	uxth	r1, r1
 800be5c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800be60:	45f4      	cmp	ip, lr
 800be62:	f849 1b04 	str.w	r1, [r9], #4
 800be66:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800be6a:	d8e4      	bhi.n	800be36 <__multiply+0xaa>
 800be6c:	9901      	ldr	r1, [sp, #4]
 800be6e:	5072      	str	r2, [r6, r1]
 800be70:	9a03      	ldr	r2, [sp, #12]
 800be72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be76:	3304      	adds	r3, #4
 800be78:	f1b9 0f00 	cmp.w	r9, #0
 800be7c:	d01f      	beq.n	800bebe <__multiply+0x132>
 800be7e:	6834      	ldr	r4, [r6, #0]
 800be80:	f105 0114 	add.w	r1, r5, #20
 800be84:	46b6      	mov	lr, r6
 800be86:	f04f 0a00 	mov.w	sl, #0
 800be8a:	880a      	ldrh	r2, [r1, #0]
 800be8c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800be90:	fb09 b202 	mla	r2, r9, r2, fp
 800be94:	4492      	add	sl, r2
 800be96:	b2a4      	uxth	r4, r4
 800be98:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800be9c:	f84e 4b04 	str.w	r4, [lr], #4
 800bea0:	f851 4b04 	ldr.w	r4, [r1], #4
 800bea4:	f8be 2000 	ldrh.w	r2, [lr]
 800bea8:	0c24      	lsrs	r4, r4, #16
 800beaa:	fb09 2404 	mla	r4, r9, r4, r2
 800beae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800beb2:	458c      	cmp	ip, r1
 800beb4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800beb8:	d8e7      	bhi.n	800be8a <__multiply+0xfe>
 800beba:	9a01      	ldr	r2, [sp, #4]
 800bebc:	50b4      	str	r4, [r6, r2]
 800bebe:	3604      	adds	r6, #4
 800bec0:	e7a3      	b.n	800be0a <__multiply+0x7e>
 800bec2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1a5      	bne.n	800be16 <__multiply+0x8a>
 800beca:	3f01      	subs	r7, #1
 800becc:	e7a1      	b.n	800be12 <__multiply+0x86>
 800bece:	bf00      	nop
 800bed0:	0800d47f 	.word	0x0800d47f
 800bed4:	0800d490 	.word	0x0800d490

0800bed8 <__pow5mult>:
 800bed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bedc:	4615      	mov	r5, r2
 800bede:	f012 0203 	ands.w	r2, r2, #3
 800bee2:	4606      	mov	r6, r0
 800bee4:	460f      	mov	r7, r1
 800bee6:	d007      	beq.n	800bef8 <__pow5mult+0x20>
 800bee8:	4c25      	ldr	r4, [pc, #148]	; (800bf80 <__pow5mult+0xa8>)
 800beea:	3a01      	subs	r2, #1
 800beec:	2300      	movs	r3, #0
 800beee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bef2:	f7ff fe9b 	bl	800bc2c <__multadd>
 800bef6:	4607      	mov	r7, r0
 800bef8:	10ad      	asrs	r5, r5, #2
 800befa:	d03d      	beq.n	800bf78 <__pow5mult+0xa0>
 800befc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800befe:	b97c      	cbnz	r4, 800bf20 <__pow5mult+0x48>
 800bf00:	2010      	movs	r0, #16
 800bf02:	f7ff fe1b 	bl	800bb3c <malloc>
 800bf06:	4602      	mov	r2, r0
 800bf08:	6270      	str	r0, [r6, #36]	; 0x24
 800bf0a:	b928      	cbnz	r0, 800bf18 <__pow5mult+0x40>
 800bf0c:	4b1d      	ldr	r3, [pc, #116]	; (800bf84 <__pow5mult+0xac>)
 800bf0e:	481e      	ldr	r0, [pc, #120]	; (800bf88 <__pow5mult+0xb0>)
 800bf10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bf14:	f000 fbcc 	bl	800c6b0 <__assert_func>
 800bf18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf1c:	6004      	str	r4, [r0, #0]
 800bf1e:	60c4      	str	r4, [r0, #12]
 800bf20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bf24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf28:	b94c      	cbnz	r4, 800bf3e <__pow5mult+0x66>
 800bf2a:	f240 2171 	movw	r1, #625	; 0x271
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f7ff ff16 	bl	800bd60 <__i2b>
 800bf34:	2300      	movs	r3, #0
 800bf36:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	6003      	str	r3, [r0, #0]
 800bf3e:	f04f 0900 	mov.w	r9, #0
 800bf42:	07eb      	lsls	r3, r5, #31
 800bf44:	d50a      	bpl.n	800bf5c <__pow5mult+0x84>
 800bf46:	4639      	mov	r1, r7
 800bf48:	4622      	mov	r2, r4
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f7ff ff1e 	bl	800bd8c <__multiply>
 800bf50:	4639      	mov	r1, r7
 800bf52:	4680      	mov	r8, r0
 800bf54:	4630      	mov	r0, r6
 800bf56:	f7ff fe47 	bl	800bbe8 <_Bfree>
 800bf5a:	4647      	mov	r7, r8
 800bf5c:	106d      	asrs	r5, r5, #1
 800bf5e:	d00b      	beq.n	800bf78 <__pow5mult+0xa0>
 800bf60:	6820      	ldr	r0, [r4, #0]
 800bf62:	b938      	cbnz	r0, 800bf74 <__pow5mult+0x9c>
 800bf64:	4622      	mov	r2, r4
 800bf66:	4621      	mov	r1, r4
 800bf68:	4630      	mov	r0, r6
 800bf6a:	f7ff ff0f 	bl	800bd8c <__multiply>
 800bf6e:	6020      	str	r0, [r4, #0]
 800bf70:	f8c0 9000 	str.w	r9, [r0]
 800bf74:	4604      	mov	r4, r0
 800bf76:	e7e4      	b.n	800bf42 <__pow5mult+0x6a>
 800bf78:	4638      	mov	r0, r7
 800bf7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf7e:	bf00      	nop
 800bf80:	0800d5e0 	.word	0x0800d5e0
 800bf84:	0800d409 	.word	0x0800d409
 800bf88:	0800d490 	.word	0x0800d490

0800bf8c <__lshift>:
 800bf8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf90:	460c      	mov	r4, r1
 800bf92:	6849      	ldr	r1, [r1, #4]
 800bf94:	6923      	ldr	r3, [r4, #16]
 800bf96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf9a:	68a3      	ldr	r3, [r4, #8]
 800bf9c:	4607      	mov	r7, r0
 800bf9e:	4691      	mov	r9, r2
 800bfa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bfa4:	f108 0601 	add.w	r6, r8, #1
 800bfa8:	42b3      	cmp	r3, r6
 800bfaa:	db0b      	blt.n	800bfc4 <__lshift+0x38>
 800bfac:	4638      	mov	r0, r7
 800bfae:	f7ff fddb 	bl	800bb68 <_Balloc>
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	b948      	cbnz	r0, 800bfca <__lshift+0x3e>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	4b28      	ldr	r3, [pc, #160]	; (800c05c <__lshift+0xd0>)
 800bfba:	4829      	ldr	r0, [pc, #164]	; (800c060 <__lshift+0xd4>)
 800bfbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bfc0:	f000 fb76 	bl	800c6b0 <__assert_func>
 800bfc4:	3101      	adds	r1, #1
 800bfc6:	005b      	lsls	r3, r3, #1
 800bfc8:	e7ee      	b.n	800bfa8 <__lshift+0x1c>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f100 0114 	add.w	r1, r0, #20
 800bfd0:	f100 0210 	add.w	r2, r0, #16
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	4553      	cmp	r3, sl
 800bfd8:	db33      	blt.n	800c042 <__lshift+0xb6>
 800bfda:	6920      	ldr	r0, [r4, #16]
 800bfdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfe0:	f104 0314 	add.w	r3, r4, #20
 800bfe4:	f019 091f 	ands.w	r9, r9, #31
 800bfe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bff0:	d02b      	beq.n	800c04a <__lshift+0xbe>
 800bff2:	f1c9 0e20 	rsb	lr, r9, #32
 800bff6:	468a      	mov	sl, r1
 800bff8:	2200      	movs	r2, #0
 800bffa:	6818      	ldr	r0, [r3, #0]
 800bffc:	fa00 f009 	lsl.w	r0, r0, r9
 800c000:	4302      	orrs	r2, r0
 800c002:	f84a 2b04 	str.w	r2, [sl], #4
 800c006:	f853 2b04 	ldr.w	r2, [r3], #4
 800c00a:	459c      	cmp	ip, r3
 800c00c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c010:	d8f3      	bhi.n	800bffa <__lshift+0x6e>
 800c012:	ebac 0304 	sub.w	r3, ip, r4
 800c016:	3b15      	subs	r3, #21
 800c018:	f023 0303 	bic.w	r3, r3, #3
 800c01c:	3304      	adds	r3, #4
 800c01e:	f104 0015 	add.w	r0, r4, #21
 800c022:	4584      	cmp	ip, r0
 800c024:	bf38      	it	cc
 800c026:	2304      	movcc	r3, #4
 800c028:	50ca      	str	r2, [r1, r3]
 800c02a:	b10a      	cbz	r2, 800c030 <__lshift+0xa4>
 800c02c:	f108 0602 	add.w	r6, r8, #2
 800c030:	3e01      	subs	r6, #1
 800c032:	4638      	mov	r0, r7
 800c034:	612e      	str	r6, [r5, #16]
 800c036:	4621      	mov	r1, r4
 800c038:	f7ff fdd6 	bl	800bbe8 <_Bfree>
 800c03c:	4628      	mov	r0, r5
 800c03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c042:	f842 0f04 	str.w	r0, [r2, #4]!
 800c046:	3301      	adds	r3, #1
 800c048:	e7c5      	b.n	800bfd6 <__lshift+0x4a>
 800c04a:	3904      	subs	r1, #4
 800c04c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c050:	f841 2f04 	str.w	r2, [r1, #4]!
 800c054:	459c      	cmp	ip, r3
 800c056:	d8f9      	bhi.n	800c04c <__lshift+0xc0>
 800c058:	e7ea      	b.n	800c030 <__lshift+0xa4>
 800c05a:	bf00      	nop
 800c05c:	0800d47f 	.word	0x0800d47f
 800c060:	0800d490 	.word	0x0800d490

0800c064 <__mcmp>:
 800c064:	b530      	push	{r4, r5, lr}
 800c066:	6902      	ldr	r2, [r0, #16]
 800c068:	690c      	ldr	r4, [r1, #16]
 800c06a:	1b12      	subs	r2, r2, r4
 800c06c:	d10e      	bne.n	800c08c <__mcmp+0x28>
 800c06e:	f100 0314 	add.w	r3, r0, #20
 800c072:	3114      	adds	r1, #20
 800c074:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c078:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c07c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c080:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c084:	42a5      	cmp	r5, r4
 800c086:	d003      	beq.n	800c090 <__mcmp+0x2c>
 800c088:	d305      	bcc.n	800c096 <__mcmp+0x32>
 800c08a:	2201      	movs	r2, #1
 800c08c:	4610      	mov	r0, r2
 800c08e:	bd30      	pop	{r4, r5, pc}
 800c090:	4283      	cmp	r3, r0
 800c092:	d3f3      	bcc.n	800c07c <__mcmp+0x18>
 800c094:	e7fa      	b.n	800c08c <__mcmp+0x28>
 800c096:	f04f 32ff 	mov.w	r2, #4294967295
 800c09a:	e7f7      	b.n	800c08c <__mcmp+0x28>

0800c09c <__mdiff>:
 800c09c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a0:	460c      	mov	r4, r1
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	4617      	mov	r7, r2
 800c0aa:	f7ff ffdb 	bl	800c064 <__mcmp>
 800c0ae:	1e05      	subs	r5, r0, #0
 800c0b0:	d110      	bne.n	800c0d4 <__mdiff+0x38>
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	f7ff fd57 	bl	800bb68 <_Balloc>
 800c0ba:	b930      	cbnz	r0, 800c0ca <__mdiff+0x2e>
 800c0bc:	4b39      	ldr	r3, [pc, #228]	; (800c1a4 <__mdiff+0x108>)
 800c0be:	4602      	mov	r2, r0
 800c0c0:	f240 2132 	movw	r1, #562	; 0x232
 800c0c4:	4838      	ldr	r0, [pc, #224]	; (800c1a8 <__mdiff+0x10c>)
 800c0c6:	f000 faf3 	bl	800c6b0 <__assert_func>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c0d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d4:	bfa4      	itt	ge
 800c0d6:	463b      	movge	r3, r7
 800c0d8:	4627      	movge	r7, r4
 800c0da:	4630      	mov	r0, r6
 800c0dc:	6879      	ldr	r1, [r7, #4]
 800c0de:	bfa6      	itte	ge
 800c0e0:	461c      	movge	r4, r3
 800c0e2:	2500      	movge	r5, #0
 800c0e4:	2501      	movlt	r5, #1
 800c0e6:	f7ff fd3f 	bl	800bb68 <_Balloc>
 800c0ea:	b920      	cbnz	r0, 800c0f6 <__mdiff+0x5a>
 800c0ec:	4b2d      	ldr	r3, [pc, #180]	; (800c1a4 <__mdiff+0x108>)
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c0f4:	e7e6      	b.n	800c0c4 <__mdiff+0x28>
 800c0f6:	693e      	ldr	r6, [r7, #16]
 800c0f8:	60c5      	str	r5, [r0, #12]
 800c0fa:	6925      	ldr	r5, [r4, #16]
 800c0fc:	f107 0114 	add.w	r1, r7, #20
 800c100:	f104 0914 	add.w	r9, r4, #20
 800c104:	f100 0e14 	add.w	lr, r0, #20
 800c108:	f107 0210 	add.w	r2, r7, #16
 800c10c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c110:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c114:	46f2      	mov	sl, lr
 800c116:	2700      	movs	r7, #0
 800c118:	f859 3b04 	ldr.w	r3, [r9], #4
 800c11c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c120:	fa1f f883 	uxth.w	r8, r3
 800c124:	fa17 f78b 	uxtah	r7, r7, fp
 800c128:	0c1b      	lsrs	r3, r3, #16
 800c12a:	eba7 0808 	sub.w	r8, r7, r8
 800c12e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c132:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c136:	fa1f f888 	uxth.w	r8, r8
 800c13a:	141f      	asrs	r7, r3, #16
 800c13c:	454d      	cmp	r5, r9
 800c13e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c142:	f84a 3b04 	str.w	r3, [sl], #4
 800c146:	d8e7      	bhi.n	800c118 <__mdiff+0x7c>
 800c148:	1b2b      	subs	r3, r5, r4
 800c14a:	3b15      	subs	r3, #21
 800c14c:	f023 0303 	bic.w	r3, r3, #3
 800c150:	3304      	adds	r3, #4
 800c152:	3415      	adds	r4, #21
 800c154:	42a5      	cmp	r5, r4
 800c156:	bf38      	it	cc
 800c158:	2304      	movcc	r3, #4
 800c15a:	4419      	add	r1, r3
 800c15c:	4473      	add	r3, lr
 800c15e:	469e      	mov	lr, r3
 800c160:	460d      	mov	r5, r1
 800c162:	4565      	cmp	r5, ip
 800c164:	d30e      	bcc.n	800c184 <__mdiff+0xe8>
 800c166:	f10c 0203 	add.w	r2, ip, #3
 800c16a:	1a52      	subs	r2, r2, r1
 800c16c:	f022 0203 	bic.w	r2, r2, #3
 800c170:	3903      	subs	r1, #3
 800c172:	458c      	cmp	ip, r1
 800c174:	bf38      	it	cc
 800c176:	2200      	movcc	r2, #0
 800c178:	441a      	add	r2, r3
 800c17a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c17e:	b17b      	cbz	r3, 800c1a0 <__mdiff+0x104>
 800c180:	6106      	str	r6, [r0, #16]
 800c182:	e7a5      	b.n	800c0d0 <__mdiff+0x34>
 800c184:	f855 8b04 	ldr.w	r8, [r5], #4
 800c188:	fa17 f488 	uxtah	r4, r7, r8
 800c18c:	1422      	asrs	r2, r4, #16
 800c18e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c192:	b2a4      	uxth	r4, r4
 800c194:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c198:	f84e 4b04 	str.w	r4, [lr], #4
 800c19c:	1417      	asrs	r7, r2, #16
 800c19e:	e7e0      	b.n	800c162 <__mdiff+0xc6>
 800c1a0:	3e01      	subs	r6, #1
 800c1a2:	e7ea      	b.n	800c17a <__mdiff+0xde>
 800c1a4:	0800d47f 	.word	0x0800d47f
 800c1a8:	0800d490 	.word	0x0800d490

0800c1ac <__d2b>:
 800c1ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1b0:	4689      	mov	r9, r1
 800c1b2:	2101      	movs	r1, #1
 800c1b4:	ec57 6b10 	vmov	r6, r7, d0
 800c1b8:	4690      	mov	r8, r2
 800c1ba:	f7ff fcd5 	bl	800bb68 <_Balloc>
 800c1be:	4604      	mov	r4, r0
 800c1c0:	b930      	cbnz	r0, 800c1d0 <__d2b+0x24>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	4b25      	ldr	r3, [pc, #148]	; (800c25c <__d2b+0xb0>)
 800c1c6:	4826      	ldr	r0, [pc, #152]	; (800c260 <__d2b+0xb4>)
 800c1c8:	f240 310a 	movw	r1, #778	; 0x30a
 800c1cc:	f000 fa70 	bl	800c6b0 <__assert_func>
 800c1d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c1d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1d8:	bb35      	cbnz	r5, 800c228 <__d2b+0x7c>
 800c1da:	2e00      	cmp	r6, #0
 800c1dc:	9301      	str	r3, [sp, #4]
 800c1de:	d028      	beq.n	800c232 <__d2b+0x86>
 800c1e0:	4668      	mov	r0, sp
 800c1e2:	9600      	str	r6, [sp, #0]
 800c1e4:	f7ff fd8c 	bl	800bd00 <__lo0bits>
 800c1e8:	9900      	ldr	r1, [sp, #0]
 800c1ea:	b300      	cbz	r0, 800c22e <__d2b+0x82>
 800c1ec:	9a01      	ldr	r2, [sp, #4]
 800c1ee:	f1c0 0320 	rsb	r3, r0, #32
 800c1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f6:	430b      	orrs	r3, r1
 800c1f8:	40c2      	lsrs	r2, r0
 800c1fa:	6163      	str	r3, [r4, #20]
 800c1fc:	9201      	str	r2, [sp, #4]
 800c1fe:	9b01      	ldr	r3, [sp, #4]
 800c200:	61a3      	str	r3, [r4, #24]
 800c202:	2b00      	cmp	r3, #0
 800c204:	bf14      	ite	ne
 800c206:	2202      	movne	r2, #2
 800c208:	2201      	moveq	r2, #1
 800c20a:	6122      	str	r2, [r4, #16]
 800c20c:	b1d5      	cbz	r5, 800c244 <__d2b+0x98>
 800c20e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c212:	4405      	add	r5, r0
 800c214:	f8c9 5000 	str.w	r5, [r9]
 800c218:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c21c:	f8c8 0000 	str.w	r0, [r8]
 800c220:	4620      	mov	r0, r4
 800c222:	b003      	add	sp, #12
 800c224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c22c:	e7d5      	b.n	800c1da <__d2b+0x2e>
 800c22e:	6161      	str	r1, [r4, #20]
 800c230:	e7e5      	b.n	800c1fe <__d2b+0x52>
 800c232:	a801      	add	r0, sp, #4
 800c234:	f7ff fd64 	bl	800bd00 <__lo0bits>
 800c238:	9b01      	ldr	r3, [sp, #4]
 800c23a:	6163      	str	r3, [r4, #20]
 800c23c:	2201      	movs	r2, #1
 800c23e:	6122      	str	r2, [r4, #16]
 800c240:	3020      	adds	r0, #32
 800c242:	e7e3      	b.n	800c20c <__d2b+0x60>
 800c244:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c248:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c24c:	f8c9 0000 	str.w	r0, [r9]
 800c250:	6918      	ldr	r0, [r3, #16]
 800c252:	f7ff fd35 	bl	800bcc0 <__hi0bits>
 800c256:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c25a:	e7df      	b.n	800c21c <__d2b+0x70>
 800c25c:	0800d47f 	.word	0x0800d47f
 800c260:	0800d490 	.word	0x0800d490

0800c264 <_calloc_r>:
 800c264:	b513      	push	{r0, r1, r4, lr}
 800c266:	434a      	muls	r2, r1
 800c268:	4611      	mov	r1, r2
 800c26a:	9201      	str	r2, [sp, #4]
 800c26c:	f000 f85a 	bl	800c324 <_malloc_r>
 800c270:	4604      	mov	r4, r0
 800c272:	b118      	cbz	r0, 800c27c <_calloc_r+0x18>
 800c274:	9a01      	ldr	r2, [sp, #4]
 800c276:	2100      	movs	r1, #0
 800c278:	f7fe f9e2 	bl	800a640 <memset>
 800c27c:	4620      	mov	r0, r4
 800c27e:	b002      	add	sp, #8
 800c280:	bd10      	pop	{r4, pc}
	...

0800c284 <_free_r>:
 800c284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c286:	2900      	cmp	r1, #0
 800c288:	d048      	beq.n	800c31c <_free_r+0x98>
 800c28a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c28e:	9001      	str	r0, [sp, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	f1a1 0404 	sub.w	r4, r1, #4
 800c296:	bfb8      	it	lt
 800c298:	18e4      	addlt	r4, r4, r3
 800c29a:	f000 fa65 	bl	800c768 <__malloc_lock>
 800c29e:	4a20      	ldr	r2, [pc, #128]	; (800c320 <_free_r+0x9c>)
 800c2a0:	9801      	ldr	r0, [sp, #4]
 800c2a2:	6813      	ldr	r3, [r2, #0]
 800c2a4:	4615      	mov	r5, r2
 800c2a6:	b933      	cbnz	r3, 800c2b6 <_free_r+0x32>
 800c2a8:	6063      	str	r3, [r4, #4]
 800c2aa:	6014      	str	r4, [r2, #0]
 800c2ac:	b003      	add	sp, #12
 800c2ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2b2:	f000 ba5f 	b.w	800c774 <__malloc_unlock>
 800c2b6:	42a3      	cmp	r3, r4
 800c2b8:	d90b      	bls.n	800c2d2 <_free_r+0x4e>
 800c2ba:	6821      	ldr	r1, [r4, #0]
 800c2bc:	1862      	adds	r2, r4, r1
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	bf04      	itt	eq
 800c2c2:	681a      	ldreq	r2, [r3, #0]
 800c2c4:	685b      	ldreq	r3, [r3, #4]
 800c2c6:	6063      	str	r3, [r4, #4]
 800c2c8:	bf04      	itt	eq
 800c2ca:	1852      	addeq	r2, r2, r1
 800c2cc:	6022      	streq	r2, [r4, #0]
 800c2ce:	602c      	str	r4, [r5, #0]
 800c2d0:	e7ec      	b.n	800c2ac <_free_r+0x28>
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	b10b      	cbz	r3, 800c2dc <_free_r+0x58>
 800c2d8:	42a3      	cmp	r3, r4
 800c2da:	d9fa      	bls.n	800c2d2 <_free_r+0x4e>
 800c2dc:	6811      	ldr	r1, [r2, #0]
 800c2de:	1855      	adds	r5, r2, r1
 800c2e0:	42a5      	cmp	r5, r4
 800c2e2:	d10b      	bne.n	800c2fc <_free_r+0x78>
 800c2e4:	6824      	ldr	r4, [r4, #0]
 800c2e6:	4421      	add	r1, r4
 800c2e8:	1854      	adds	r4, r2, r1
 800c2ea:	42a3      	cmp	r3, r4
 800c2ec:	6011      	str	r1, [r2, #0]
 800c2ee:	d1dd      	bne.n	800c2ac <_free_r+0x28>
 800c2f0:	681c      	ldr	r4, [r3, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	6053      	str	r3, [r2, #4]
 800c2f6:	4421      	add	r1, r4
 800c2f8:	6011      	str	r1, [r2, #0]
 800c2fa:	e7d7      	b.n	800c2ac <_free_r+0x28>
 800c2fc:	d902      	bls.n	800c304 <_free_r+0x80>
 800c2fe:	230c      	movs	r3, #12
 800c300:	6003      	str	r3, [r0, #0]
 800c302:	e7d3      	b.n	800c2ac <_free_r+0x28>
 800c304:	6825      	ldr	r5, [r4, #0]
 800c306:	1961      	adds	r1, r4, r5
 800c308:	428b      	cmp	r3, r1
 800c30a:	bf04      	itt	eq
 800c30c:	6819      	ldreq	r1, [r3, #0]
 800c30e:	685b      	ldreq	r3, [r3, #4]
 800c310:	6063      	str	r3, [r4, #4]
 800c312:	bf04      	itt	eq
 800c314:	1949      	addeq	r1, r1, r5
 800c316:	6021      	streq	r1, [r4, #0]
 800c318:	6054      	str	r4, [r2, #4]
 800c31a:	e7c7      	b.n	800c2ac <_free_r+0x28>
 800c31c:	b003      	add	sp, #12
 800c31e:	bd30      	pop	{r4, r5, pc}
 800c320:	24000288 	.word	0x24000288

0800c324 <_malloc_r>:
 800c324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c326:	1ccd      	adds	r5, r1, #3
 800c328:	f025 0503 	bic.w	r5, r5, #3
 800c32c:	3508      	adds	r5, #8
 800c32e:	2d0c      	cmp	r5, #12
 800c330:	bf38      	it	cc
 800c332:	250c      	movcc	r5, #12
 800c334:	2d00      	cmp	r5, #0
 800c336:	4606      	mov	r6, r0
 800c338:	db01      	blt.n	800c33e <_malloc_r+0x1a>
 800c33a:	42a9      	cmp	r1, r5
 800c33c:	d903      	bls.n	800c346 <_malloc_r+0x22>
 800c33e:	230c      	movs	r3, #12
 800c340:	6033      	str	r3, [r6, #0]
 800c342:	2000      	movs	r0, #0
 800c344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c346:	f000 fa0f 	bl	800c768 <__malloc_lock>
 800c34a:	4921      	ldr	r1, [pc, #132]	; (800c3d0 <_malloc_r+0xac>)
 800c34c:	680a      	ldr	r2, [r1, #0]
 800c34e:	4614      	mov	r4, r2
 800c350:	b99c      	cbnz	r4, 800c37a <_malloc_r+0x56>
 800c352:	4f20      	ldr	r7, [pc, #128]	; (800c3d4 <_malloc_r+0xb0>)
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	b923      	cbnz	r3, 800c362 <_malloc_r+0x3e>
 800c358:	4621      	mov	r1, r4
 800c35a:	4630      	mov	r0, r6
 800c35c:	f000 f998 	bl	800c690 <_sbrk_r>
 800c360:	6038      	str	r0, [r7, #0]
 800c362:	4629      	mov	r1, r5
 800c364:	4630      	mov	r0, r6
 800c366:	f000 f993 	bl	800c690 <_sbrk_r>
 800c36a:	1c43      	adds	r3, r0, #1
 800c36c:	d123      	bne.n	800c3b6 <_malloc_r+0x92>
 800c36e:	230c      	movs	r3, #12
 800c370:	6033      	str	r3, [r6, #0]
 800c372:	4630      	mov	r0, r6
 800c374:	f000 f9fe 	bl	800c774 <__malloc_unlock>
 800c378:	e7e3      	b.n	800c342 <_malloc_r+0x1e>
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	1b5b      	subs	r3, r3, r5
 800c37e:	d417      	bmi.n	800c3b0 <_malloc_r+0x8c>
 800c380:	2b0b      	cmp	r3, #11
 800c382:	d903      	bls.n	800c38c <_malloc_r+0x68>
 800c384:	6023      	str	r3, [r4, #0]
 800c386:	441c      	add	r4, r3
 800c388:	6025      	str	r5, [r4, #0]
 800c38a:	e004      	b.n	800c396 <_malloc_r+0x72>
 800c38c:	6863      	ldr	r3, [r4, #4]
 800c38e:	42a2      	cmp	r2, r4
 800c390:	bf0c      	ite	eq
 800c392:	600b      	streq	r3, [r1, #0]
 800c394:	6053      	strne	r3, [r2, #4]
 800c396:	4630      	mov	r0, r6
 800c398:	f000 f9ec 	bl	800c774 <__malloc_unlock>
 800c39c:	f104 000b 	add.w	r0, r4, #11
 800c3a0:	1d23      	adds	r3, r4, #4
 800c3a2:	f020 0007 	bic.w	r0, r0, #7
 800c3a6:	1ac2      	subs	r2, r0, r3
 800c3a8:	d0cc      	beq.n	800c344 <_malloc_r+0x20>
 800c3aa:	1a1b      	subs	r3, r3, r0
 800c3ac:	50a3      	str	r3, [r4, r2]
 800c3ae:	e7c9      	b.n	800c344 <_malloc_r+0x20>
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	6864      	ldr	r4, [r4, #4]
 800c3b4:	e7cc      	b.n	800c350 <_malloc_r+0x2c>
 800c3b6:	1cc4      	adds	r4, r0, #3
 800c3b8:	f024 0403 	bic.w	r4, r4, #3
 800c3bc:	42a0      	cmp	r0, r4
 800c3be:	d0e3      	beq.n	800c388 <_malloc_r+0x64>
 800c3c0:	1a21      	subs	r1, r4, r0
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	f000 f964 	bl	800c690 <_sbrk_r>
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	d1dd      	bne.n	800c388 <_malloc_r+0x64>
 800c3cc:	e7cf      	b.n	800c36e <_malloc_r+0x4a>
 800c3ce:	bf00      	nop
 800c3d0:	24000288 	.word	0x24000288
 800c3d4:	2400028c 	.word	0x2400028c

0800c3d8 <__ssputs_r>:
 800c3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3dc:	688e      	ldr	r6, [r1, #8]
 800c3de:	429e      	cmp	r6, r3
 800c3e0:	4682      	mov	sl, r0
 800c3e2:	460c      	mov	r4, r1
 800c3e4:	4690      	mov	r8, r2
 800c3e6:	461f      	mov	r7, r3
 800c3e8:	d838      	bhi.n	800c45c <__ssputs_r+0x84>
 800c3ea:	898a      	ldrh	r2, [r1, #12]
 800c3ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3f0:	d032      	beq.n	800c458 <__ssputs_r+0x80>
 800c3f2:	6825      	ldr	r5, [r4, #0]
 800c3f4:	6909      	ldr	r1, [r1, #16]
 800c3f6:	eba5 0901 	sub.w	r9, r5, r1
 800c3fa:	6965      	ldr	r5, [r4, #20]
 800c3fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c400:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c404:	3301      	adds	r3, #1
 800c406:	444b      	add	r3, r9
 800c408:	106d      	asrs	r5, r5, #1
 800c40a:	429d      	cmp	r5, r3
 800c40c:	bf38      	it	cc
 800c40e:	461d      	movcc	r5, r3
 800c410:	0553      	lsls	r3, r2, #21
 800c412:	d531      	bpl.n	800c478 <__ssputs_r+0xa0>
 800c414:	4629      	mov	r1, r5
 800c416:	f7ff ff85 	bl	800c324 <_malloc_r>
 800c41a:	4606      	mov	r6, r0
 800c41c:	b950      	cbnz	r0, 800c434 <__ssputs_r+0x5c>
 800c41e:	230c      	movs	r3, #12
 800c420:	f8ca 3000 	str.w	r3, [sl]
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c42a:	81a3      	strh	r3, [r4, #12]
 800c42c:	f04f 30ff 	mov.w	r0, #4294967295
 800c430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c434:	6921      	ldr	r1, [r4, #16]
 800c436:	464a      	mov	r2, r9
 800c438:	f7ff fb88 	bl	800bb4c <memcpy>
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c446:	81a3      	strh	r3, [r4, #12]
 800c448:	6126      	str	r6, [r4, #16]
 800c44a:	6165      	str	r5, [r4, #20]
 800c44c:	444e      	add	r6, r9
 800c44e:	eba5 0509 	sub.w	r5, r5, r9
 800c452:	6026      	str	r6, [r4, #0]
 800c454:	60a5      	str	r5, [r4, #8]
 800c456:	463e      	mov	r6, r7
 800c458:	42be      	cmp	r6, r7
 800c45a:	d900      	bls.n	800c45e <__ssputs_r+0x86>
 800c45c:	463e      	mov	r6, r7
 800c45e:	4632      	mov	r2, r6
 800c460:	6820      	ldr	r0, [r4, #0]
 800c462:	4641      	mov	r1, r8
 800c464:	f000 f966 	bl	800c734 <memmove>
 800c468:	68a3      	ldr	r3, [r4, #8]
 800c46a:	6822      	ldr	r2, [r4, #0]
 800c46c:	1b9b      	subs	r3, r3, r6
 800c46e:	4432      	add	r2, r6
 800c470:	60a3      	str	r3, [r4, #8]
 800c472:	6022      	str	r2, [r4, #0]
 800c474:	2000      	movs	r0, #0
 800c476:	e7db      	b.n	800c430 <__ssputs_r+0x58>
 800c478:	462a      	mov	r2, r5
 800c47a:	f000 f981 	bl	800c780 <_realloc_r>
 800c47e:	4606      	mov	r6, r0
 800c480:	2800      	cmp	r0, #0
 800c482:	d1e1      	bne.n	800c448 <__ssputs_r+0x70>
 800c484:	6921      	ldr	r1, [r4, #16]
 800c486:	4650      	mov	r0, sl
 800c488:	f7ff fefc 	bl	800c284 <_free_r>
 800c48c:	e7c7      	b.n	800c41e <__ssputs_r+0x46>
	...

0800c490 <_svfiprintf_r>:
 800c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c494:	4698      	mov	r8, r3
 800c496:	898b      	ldrh	r3, [r1, #12]
 800c498:	061b      	lsls	r3, r3, #24
 800c49a:	b09d      	sub	sp, #116	; 0x74
 800c49c:	4607      	mov	r7, r0
 800c49e:	460d      	mov	r5, r1
 800c4a0:	4614      	mov	r4, r2
 800c4a2:	d50e      	bpl.n	800c4c2 <_svfiprintf_r+0x32>
 800c4a4:	690b      	ldr	r3, [r1, #16]
 800c4a6:	b963      	cbnz	r3, 800c4c2 <_svfiprintf_r+0x32>
 800c4a8:	2140      	movs	r1, #64	; 0x40
 800c4aa:	f7ff ff3b 	bl	800c324 <_malloc_r>
 800c4ae:	6028      	str	r0, [r5, #0]
 800c4b0:	6128      	str	r0, [r5, #16]
 800c4b2:	b920      	cbnz	r0, 800c4be <_svfiprintf_r+0x2e>
 800c4b4:	230c      	movs	r3, #12
 800c4b6:	603b      	str	r3, [r7, #0]
 800c4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4bc:	e0d1      	b.n	800c662 <_svfiprintf_r+0x1d2>
 800c4be:	2340      	movs	r3, #64	; 0x40
 800c4c0:	616b      	str	r3, [r5, #20]
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c4c6:	2320      	movs	r3, #32
 800c4c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4d0:	2330      	movs	r3, #48	; 0x30
 800c4d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c67c <_svfiprintf_r+0x1ec>
 800c4d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4da:	f04f 0901 	mov.w	r9, #1
 800c4de:	4623      	mov	r3, r4
 800c4e0:	469a      	mov	sl, r3
 800c4e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4e6:	b10a      	cbz	r2, 800c4ec <_svfiprintf_r+0x5c>
 800c4e8:	2a25      	cmp	r2, #37	; 0x25
 800c4ea:	d1f9      	bne.n	800c4e0 <_svfiprintf_r+0x50>
 800c4ec:	ebba 0b04 	subs.w	fp, sl, r4
 800c4f0:	d00b      	beq.n	800c50a <_svfiprintf_r+0x7a>
 800c4f2:	465b      	mov	r3, fp
 800c4f4:	4622      	mov	r2, r4
 800c4f6:	4629      	mov	r1, r5
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	f7ff ff6d 	bl	800c3d8 <__ssputs_r>
 800c4fe:	3001      	adds	r0, #1
 800c500:	f000 80aa 	beq.w	800c658 <_svfiprintf_r+0x1c8>
 800c504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c506:	445a      	add	r2, fp
 800c508:	9209      	str	r2, [sp, #36]	; 0x24
 800c50a:	f89a 3000 	ldrb.w	r3, [sl]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f000 80a2 	beq.w	800c658 <_svfiprintf_r+0x1c8>
 800c514:	2300      	movs	r3, #0
 800c516:	f04f 32ff 	mov.w	r2, #4294967295
 800c51a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c51e:	f10a 0a01 	add.w	sl, sl, #1
 800c522:	9304      	str	r3, [sp, #16]
 800c524:	9307      	str	r3, [sp, #28]
 800c526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c52a:	931a      	str	r3, [sp, #104]	; 0x68
 800c52c:	4654      	mov	r4, sl
 800c52e:	2205      	movs	r2, #5
 800c530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c534:	4851      	ldr	r0, [pc, #324]	; (800c67c <_svfiprintf_r+0x1ec>)
 800c536:	f7f3 fee3 	bl	8000300 <memchr>
 800c53a:	9a04      	ldr	r2, [sp, #16]
 800c53c:	b9d8      	cbnz	r0, 800c576 <_svfiprintf_r+0xe6>
 800c53e:	06d0      	lsls	r0, r2, #27
 800c540:	bf44      	itt	mi
 800c542:	2320      	movmi	r3, #32
 800c544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c548:	0711      	lsls	r1, r2, #28
 800c54a:	bf44      	itt	mi
 800c54c:	232b      	movmi	r3, #43	; 0x2b
 800c54e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c552:	f89a 3000 	ldrb.w	r3, [sl]
 800c556:	2b2a      	cmp	r3, #42	; 0x2a
 800c558:	d015      	beq.n	800c586 <_svfiprintf_r+0xf6>
 800c55a:	9a07      	ldr	r2, [sp, #28]
 800c55c:	4654      	mov	r4, sl
 800c55e:	2000      	movs	r0, #0
 800c560:	f04f 0c0a 	mov.w	ip, #10
 800c564:	4621      	mov	r1, r4
 800c566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c56a:	3b30      	subs	r3, #48	; 0x30
 800c56c:	2b09      	cmp	r3, #9
 800c56e:	d94e      	bls.n	800c60e <_svfiprintf_r+0x17e>
 800c570:	b1b0      	cbz	r0, 800c5a0 <_svfiprintf_r+0x110>
 800c572:	9207      	str	r2, [sp, #28]
 800c574:	e014      	b.n	800c5a0 <_svfiprintf_r+0x110>
 800c576:	eba0 0308 	sub.w	r3, r0, r8
 800c57a:	fa09 f303 	lsl.w	r3, r9, r3
 800c57e:	4313      	orrs	r3, r2
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	46a2      	mov	sl, r4
 800c584:	e7d2      	b.n	800c52c <_svfiprintf_r+0x9c>
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	1d19      	adds	r1, r3, #4
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	9103      	str	r1, [sp, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	bfbb      	ittet	lt
 800c592:	425b      	neglt	r3, r3
 800c594:	f042 0202 	orrlt.w	r2, r2, #2
 800c598:	9307      	strge	r3, [sp, #28]
 800c59a:	9307      	strlt	r3, [sp, #28]
 800c59c:	bfb8      	it	lt
 800c59e:	9204      	strlt	r2, [sp, #16]
 800c5a0:	7823      	ldrb	r3, [r4, #0]
 800c5a2:	2b2e      	cmp	r3, #46	; 0x2e
 800c5a4:	d10c      	bne.n	800c5c0 <_svfiprintf_r+0x130>
 800c5a6:	7863      	ldrb	r3, [r4, #1]
 800c5a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c5aa:	d135      	bne.n	800c618 <_svfiprintf_r+0x188>
 800c5ac:	9b03      	ldr	r3, [sp, #12]
 800c5ae:	1d1a      	adds	r2, r3, #4
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	9203      	str	r2, [sp, #12]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	bfb8      	it	lt
 800c5b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5bc:	3402      	adds	r4, #2
 800c5be:	9305      	str	r3, [sp, #20]
 800c5c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c68c <_svfiprintf_r+0x1fc>
 800c5c4:	7821      	ldrb	r1, [r4, #0]
 800c5c6:	2203      	movs	r2, #3
 800c5c8:	4650      	mov	r0, sl
 800c5ca:	f7f3 fe99 	bl	8000300 <memchr>
 800c5ce:	b140      	cbz	r0, 800c5e2 <_svfiprintf_r+0x152>
 800c5d0:	2340      	movs	r3, #64	; 0x40
 800c5d2:	eba0 000a 	sub.w	r0, r0, sl
 800c5d6:	fa03 f000 	lsl.w	r0, r3, r0
 800c5da:	9b04      	ldr	r3, [sp, #16]
 800c5dc:	4303      	orrs	r3, r0
 800c5de:	3401      	adds	r4, #1
 800c5e0:	9304      	str	r3, [sp, #16]
 800c5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e6:	4826      	ldr	r0, [pc, #152]	; (800c680 <_svfiprintf_r+0x1f0>)
 800c5e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5ec:	2206      	movs	r2, #6
 800c5ee:	f7f3 fe87 	bl	8000300 <memchr>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d038      	beq.n	800c668 <_svfiprintf_r+0x1d8>
 800c5f6:	4b23      	ldr	r3, [pc, #140]	; (800c684 <_svfiprintf_r+0x1f4>)
 800c5f8:	bb1b      	cbnz	r3, 800c642 <_svfiprintf_r+0x1b2>
 800c5fa:	9b03      	ldr	r3, [sp, #12]
 800c5fc:	3307      	adds	r3, #7
 800c5fe:	f023 0307 	bic.w	r3, r3, #7
 800c602:	3308      	adds	r3, #8
 800c604:	9303      	str	r3, [sp, #12]
 800c606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c608:	4433      	add	r3, r6
 800c60a:	9309      	str	r3, [sp, #36]	; 0x24
 800c60c:	e767      	b.n	800c4de <_svfiprintf_r+0x4e>
 800c60e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c612:	460c      	mov	r4, r1
 800c614:	2001      	movs	r0, #1
 800c616:	e7a5      	b.n	800c564 <_svfiprintf_r+0xd4>
 800c618:	2300      	movs	r3, #0
 800c61a:	3401      	adds	r4, #1
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	4619      	mov	r1, r3
 800c620:	f04f 0c0a 	mov.w	ip, #10
 800c624:	4620      	mov	r0, r4
 800c626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c62a:	3a30      	subs	r2, #48	; 0x30
 800c62c:	2a09      	cmp	r2, #9
 800c62e:	d903      	bls.n	800c638 <_svfiprintf_r+0x1a8>
 800c630:	2b00      	cmp	r3, #0
 800c632:	d0c5      	beq.n	800c5c0 <_svfiprintf_r+0x130>
 800c634:	9105      	str	r1, [sp, #20]
 800c636:	e7c3      	b.n	800c5c0 <_svfiprintf_r+0x130>
 800c638:	fb0c 2101 	mla	r1, ip, r1, r2
 800c63c:	4604      	mov	r4, r0
 800c63e:	2301      	movs	r3, #1
 800c640:	e7f0      	b.n	800c624 <_svfiprintf_r+0x194>
 800c642:	ab03      	add	r3, sp, #12
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	462a      	mov	r2, r5
 800c648:	4b0f      	ldr	r3, [pc, #60]	; (800c688 <_svfiprintf_r+0x1f8>)
 800c64a:	a904      	add	r1, sp, #16
 800c64c:	4638      	mov	r0, r7
 800c64e:	f7fe f88f 	bl	800a770 <_printf_float>
 800c652:	1c42      	adds	r2, r0, #1
 800c654:	4606      	mov	r6, r0
 800c656:	d1d6      	bne.n	800c606 <_svfiprintf_r+0x176>
 800c658:	89ab      	ldrh	r3, [r5, #12]
 800c65a:	065b      	lsls	r3, r3, #25
 800c65c:	f53f af2c 	bmi.w	800c4b8 <_svfiprintf_r+0x28>
 800c660:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c662:	b01d      	add	sp, #116	; 0x74
 800c664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c668:	ab03      	add	r3, sp, #12
 800c66a:	9300      	str	r3, [sp, #0]
 800c66c:	462a      	mov	r2, r5
 800c66e:	4b06      	ldr	r3, [pc, #24]	; (800c688 <_svfiprintf_r+0x1f8>)
 800c670:	a904      	add	r1, sp, #16
 800c672:	4638      	mov	r0, r7
 800c674:	f7fe fb08 	bl	800ac88 <_printf_i>
 800c678:	e7eb      	b.n	800c652 <_svfiprintf_r+0x1c2>
 800c67a:	bf00      	nop
 800c67c:	0800d5ec 	.word	0x0800d5ec
 800c680:	0800d5f6 	.word	0x0800d5f6
 800c684:	0800a771 	.word	0x0800a771
 800c688:	0800c3d9 	.word	0x0800c3d9
 800c68c:	0800d5f2 	.word	0x0800d5f2

0800c690 <_sbrk_r>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	4d06      	ldr	r5, [pc, #24]	; (800c6ac <_sbrk_r+0x1c>)
 800c694:	2300      	movs	r3, #0
 800c696:	4604      	mov	r4, r0
 800c698:	4608      	mov	r0, r1
 800c69a:	602b      	str	r3, [r5, #0]
 800c69c:	f7f4 ff36 	bl	800150c <_sbrk>
 800c6a0:	1c43      	adds	r3, r0, #1
 800c6a2:	d102      	bne.n	800c6aa <_sbrk_r+0x1a>
 800c6a4:	682b      	ldr	r3, [r5, #0]
 800c6a6:	b103      	cbz	r3, 800c6aa <_sbrk_r+0x1a>
 800c6a8:	6023      	str	r3, [r4, #0]
 800c6aa:	bd38      	pop	{r3, r4, r5, pc}
 800c6ac:	240126b0 	.word	0x240126b0

0800c6b0 <__assert_func>:
 800c6b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6b2:	4614      	mov	r4, r2
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	4b09      	ldr	r3, [pc, #36]	; (800c6dc <__assert_func+0x2c>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4605      	mov	r5, r0
 800c6bc:	68d8      	ldr	r0, [r3, #12]
 800c6be:	b14c      	cbz	r4, 800c6d4 <__assert_func+0x24>
 800c6c0:	4b07      	ldr	r3, [pc, #28]	; (800c6e0 <__assert_func+0x30>)
 800c6c2:	9100      	str	r1, [sp, #0]
 800c6c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6c8:	4906      	ldr	r1, [pc, #24]	; (800c6e4 <__assert_func+0x34>)
 800c6ca:	462b      	mov	r3, r5
 800c6cc:	f000 f80e 	bl	800c6ec <fiprintf>
 800c6d0:	f000 faa4 	bl	800cc1c <abort>
 800c6d4:	4b04      	ldr	r3, [pc, #16]	; (800c6e8 <__assert_func+0x38>)
 800c6d6:	461c      	mov	r4, r3
 800c6d8:	e7f3      	b.n	800c6c2 <__assert_func+0x12>
 800c6da:	bf00      	nop
 800c6dc:	24000010 	.word	0x24000010
 800c6e0:	0800d5fd 	.word	0x0800d5fd
 800c6e4:	0800d60a 	.word	0x0800d60a
 800c6e8:	0800d638 	.word	0x0800d638

0800c6ec <fiprintf>:
 800c6ec:	b40e      	push	{r1, r2, r3}
 800c6ee:	b503      	push	{r0, r1, lr}
 800c6f0:	4601      	mov	r1, r0
 800c6f2:	ab03      	add	r3, sp, #12
 800c6f4:	4805      	ldr	r0, [pc, #20]	; (800c70c <fiprintf+0x20>)
 800c6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6fa:	6800      	ldr	r0, [r0, #0]
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	f000 f88f 	bl	800c820 <_vfiprintf_r>
 800c702:	b002      	add	sp, #8
 800c704:	f85d eb04 	ldr.w	lr, [sp], #4
 800c708:	b003      	add	sp, #12
 800c70a:	4770      	bx	lr
 800c70c:	24000010 	.word	0x24000010

0800c710 <__ascii_mbtowc>:
 800c710:	b082      	sub	sp, #8
 800c712:	b901      	cbnz	r1, 800c716 <__ascii_mbtowc+0x6>
 800c714:	a901      	add	r1, sp, #4
 800c716:	b142      	cbz	r2, 800c72a <__ascii_mbtowc+0x1a>
 800c718:	b14b      	cbz	r3, 800c72e <__ascii_mbtowc+0x1e>
 800c71a:	7813      	ldrb	r3, [r2, #0]
 800c71c:	600b      	str	r3, [r1, #0]
 800c71e:	7812      	ldrb	r2, [r2, #0]
 800c720:	1e10      	subs	r0, r2, #0
 800c722:	bf18      	it	ne
 800c724:	2001      	movne	r0, #1
 800c726:	b002      	add	sp, #8
 800c728:	4770      	bx	lr
 800c72a:	4610      	mov	r0, r2
 800c72c:	e7fb      	b.n	800c726 <__ascii_mbtowc+0x16>
 800c72e:	f06f 0001 	mvn.w	r0, #1
 800c732:	e7f8      	b.n	800c726 <__ascii_mbtowc+0x16>

0800c734 <memmove>:
 800c734:	4288      	cmp	r0, r1
 800c736:	b510      	push	{r4, lr}
 800c738:	eb01 0402 	add.w	r4, r1, r2
 800c73c:	d902      	bls.n	800c744 <memmove+0x10>
 800c73e:	4284      	cmp	r4, r0
 800c740:	4623      	mov	r3, r4
 800c742:	d807      	bhi.n	800c754 <memmove+0x20>
 800c744:	1e43      	subs	r3, r0, #1
 800c746:	42a1      	cmp	r1, r4
 800c748:	d008      	beq.n	800c75c <memmove+0x28>
 800c74a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c74e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c752:	e7f8      	b.n	800c746 <memmove+0x12>
 800c754:	4402      	add	r2, r0
 800c756:	4601      	mov	r1, r0
 800c758:	428a      	cmp	r2, r1
 800c75a:	d100      	bne.n	800c75e <memmove+0x2a>
 800c75c:	bd10      	pop	{r4, pc}
 800c75e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c766:	e7f7      	b.n	800c758 <memmove+0x24>

0800c768 <__malloc_lock>:
 800c768:	4801      	ldr	r0, [pc, #4]	; (800c770 <__malloc_lock+0x8>)
 800c76a:	f000 bc17 	b.w	800cf9c <__retarget_lock_acquire_recursive>
 800c76e:	bf00      	nop
 800c770:	240126b8 	.word	0x240126b8

0800c774 <__malloc_unlock>:
 800c774:	4801      	ldr	r0, [pc, #4]	; (800c77c <__malloc_unlock+0x8>)
 800c776:	f000 bc12 	b.w	800cf9e <__retarget_lock_release_recursive>
 800c77a:	bf00      	nop
 800c77c:	240126b8 	.word	0x240126b8

0800c780 <_realloc_r>:
 800c780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c782:	4607      	mov	r7, r0
 800c784:	4614      	mov	r4, r2
 800c786:	460e      	mov	r6, r1
 800c788:	b921      	cbnz	r1, 800c794 <_realloc_r+0x14>
 800c78a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c78e:	4611      	mov	r1, r2
 800c790:	f7ff bdc8 	b.w	800c324 <_malloc_r>
 800c794:	b922      	cbnz	r2, 800c7a0 <_realloc_r+0x20>
 800c796:	f7ff fd75 	bl	800c284 <_free_r>
 800c79a:	4625      	mov	r5, r4
 800c79c:	4628      	mov	r0, r5
 800c79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7a0:	f000 fc62 	bl	800d068 <_malloc_usable_size_r>
 800c7a4:	42a0      	cmp	r0, r4
 800c7a6:	d20f      	bcs.n	800c7c8 <_realloc_r+0x48>
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	4638      	mov	r0, r7
 800c7ac:	f7ff fdba 	bl	800c324 <_malloc_r>
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d0f2      	beq.n	800c79c <_realloc_r+0x1c>
 800c7b6:	4631      	mov	r1, r6
 800c7b8:	4622      	mov	r2, r4
 800c7ba:	f7ff f9c7 	bl	800bb4c <memcpy>
 800c7be:	4631      	mov	r1, r6
 800c7c0:	4638      	mov	r0, r7
 800c7c2:	f7ff fd5f 	bl	800c284 <_free_r>
 800c7c6:	e7e9      	b.n	800c79c <_realloc_r+0x1c>
 800c7c8:	4635      	mov	r5, r6
 800c7ca:	e7e7      	b.n	800c79c <_realloc_r+0x1c>

0800c7cc <__sfputc_r>:
 800c7cc:	6893      	ldr	r3, [r2, #8]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	b410      	push	{r4}
 800c7d4:	6093      	str	r3, [r2, #8]
 800c7d6:	da08      	bge.n	800c7ea <__sfputc_r+0x1e>
 800c7d8:	6994      	ldr	r4, [r2, #24]
 800c7da:	42a3      	cmp	r3, r4
 800c7dc:	db01      	blt.n	800c7e2 <__sfputc_r+0x16>
 800c7de:	290a      	cmp	r1, #10
 800c7e0:	d103      	bne.n	800c7ea <__sfputc_r+0x1e>
 800c7e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7e6:	f000 b94b 	b.w	800ca80 <__swbuf_r>
 800c7ea:	6813      	ldr	r3, [r2, #0]
 800c7ec:	1c58      	adds	r0, r3, #1
 800c7ee:	6010      	str	r0, [r2, #0]
 800c7f0:	7019      	strb	r1, [r3, #0]
 800c7f2:	4608      	mov	r0, r1
 800c7f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7f8:	4770      	bx	lr

0800c7fa <__sfputs_r>:
 800c7fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	460f      	mov	r7, r1
 800c800:	4614      	mov	r4, r2
 800c802:	18d5      	adds	r5, r2, r3
 800c804:	42ac      	cmp	r4, r5
 800c806:	d101      	bne.n	800c80c <__sfputs_r+0x12>
 800c808:	2000      	movs	r0, #0
 800c80a:	e007      	b.n	800c81c <__sfputs_r+0x22>
 800c80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c810:	463a      	mov	r2, r7
 800c812:	4630      	mov	r0, r6
 800c814:	f7ff ffda 	bl	800c7cc <__sfputc_r>
 800c818:	1c43      	adds	r3, r0, #1
 800c81a:	d1f3      	bne.n	800c804 <__sfputs_r+0xa>
 800c81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c820 <_vfiprintf_r>:
 800c820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c824:	460d      	mov	r5, r1
 800c826:	b09d      	sub	sp, #116	; 0x74
 800c828:	4614      	mov	r4, r2
 800c82a:	4698      	mov	r8, r3
 800c82c:	4606      	mov	r6, r0
 800c82e:	b118      	cbz	r0, 800c838 <_vfiprintf_r+0x18>
 800c830:	6983      	ldr	r3, [r0, #24]
 800c832:	b90b      	cbnz	r3, 800c838 <_vfiprintf_r+0x18>
 800c834:	f000 fb14 	bl	800ce60 <__sinit>
 800c838:	4b89      	ldr	r3, [pc, #548]	; (800ca60 <_vfiprintf_r+0x240>)
 800c83a:	429d      	cmp	r5, r3
 800c83c:	d11b      	bne.n	800c876 <_vfiprintf_r+0x56>
 800c83e:	6875      	ldr	r5, [r6, #4]
 800c840:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c842:	07d9      	lsls	r1, r3, #31
 800c844:	d405      	bmi.n	800c852 <_vfiprintf_r+0x32>
 800c846:	89ab      	ldrh	r3, [r5, #12]
 800c848:	059a      	lsls	r2, r3, #22
 800c84a:	d402      	bmi.n	800c852 <_vfiprintf_r+0x32>
 800c84c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c84e:	f000 fba5 	bl	800cf9c <__retarget_lock_acquire_recursive>
 800c852:	89ab      	ldrh	r3, [r5, #12]
 800c854:	071b      	lsls	r3, r3, #28
 800c856:	d501      	bpl.n	800c85c <_vfiprintf_r+0x3c>
 800c858:	692b      	ldr	r3, [r5, #16]
 800c85a:	b9eb      	cbnz	r3, 800c898 <_vfiprintf_r+0x78>
 800c85c:	4629      	mov	r1, r5
 800c85e:	4630      	mov	r0, r6
 800c860:	f000 f96e 	bl	800cb40 <__swsetup_r>
 800c864:	b1c0      	cbz	r0, 800c898 <_vfiprintf_r+0x78>
 800c866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c868:	07dc      	lsls	r4, r3, #31
 800c86a:	d50e      	bpl.n	800c88a <_vfiprintf_r+0x6a>
 800c86c:	f04f 30ff 	mov.w	r0, #4294967295
 800c870:	b01d      	add	sp, #116	; 0x74
 800c872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c876:	4b7b      	ldr	r3, [pc, #492]	; (800ca64 <_vfiprintf_r+0x244>)
 800c878:	429d      	cmp	r5, r3
 800c87a:	d101      	bne.n	800c880 <_vfiprintf_r+0x60>
 800c87c:	68b5      	ldr	r5, [r6, #8]
 800c87e:	e7df      	b.n	800c840 <_vfiprintf_r+0x20>
 800c880:	4b79      	ldr	r3, [pc, #484]	; (800ca68 <_vfiprintf_r+0x248>)
 800c882:	429d      	cmp	r5, r3
 800c884:	bf08      	it	eq
 800c886:	68f5      	ldreq	r5, [r6, #12]
 800c888:	e7da      	b.n	800c840 <_vfiprintf_r+0x20>
 800c88a:	89ab      	ldrh	r3, [r5, #12]
 800c88c:	0598      	lsls	r0, r3, #22
 800c88e:	d4ed      	bmi.n	800c86c <_vfiprintf_r+0x4c>
 800c890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c892:	f000 fb84 	bl	800cf9e <__retarget_lock_release_recursive>
 800c896:	e7e9      	b.n	800c86c <_vfiprintf_r+0x4c>
 800c898:	2300      	movs	r3, #0
 800c89a:	9309      	str	r3, [sp, #36]	; 0x24
 800c89c:	2320      	movs	r3, #32
 800c89e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8a6:	2330      	movs	r3, #48	; 0x30
 800c8a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca6c <_vfiprintf_r+0x24c>
 800c8ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8b0:	f04f 0901 	mov.w	r9, #1
 800c8b4:	4623      	mov	r3, r4
 800c8b6:	469a      	mov	sl, r3
 800c8b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8bc:	b10a      	cbz	r2, 800c8c2 <_vfiprintf_r+0xa2>
 800c8be:	2a25      	cmp	r2, #37	; 0x25
 800c8c0:	d1f9      	bne.n	800c8b6 <_vfiprintf_r+0x96>
 800c8c2:	ebba 0b04 	subs.w	fp, sl, r4
 800c8c6:	d00b      	beq.n	800c8e0 <_vfiprintf_r+0xc0>
 800c8c8:	465b      	mov	r3, fp
 800c8ca:	4622      	mov	r2, r4
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f7ff ff93 	bl	800c7fa <__sfputs_r>
 800c8d4:	3001      	adds	r0, #1
 800c8d6:	f000 80aa 	beq.w	800ca2e <_vfiprintf_r+0x20e>
 800c8da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8dc:	445a      	add	r2, fp
 800c8de:	9209      	str	r2, [sp, #36]	; 0x24
 800c8e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f000 80a2 	beq.w	800ca2e <_vfiprintf_r+0x20e>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8f4:	f10a 0a01 	add.w	sl, sl, #1
 800c8f8:	9304      	str	r3, [sp, #16]
 800c8fa:	9307      	str	r3, [sp, #28]
 800c8fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c900:	931a      	str	r3, [sp, #104]	; 0x68
 800c902:	4654      	mov	r4, sl
 800c904:	2205      	movs	r2, #5
 800c906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c90a:	4858      	ldr	r0, [pc, #352]	; (800ca6c <_vfiprintf_r+0x24c>)
 800c90c:	f7f3 fcf8 	bl	8000300 <memchr>
 800c910:	9a04      	ldr	r2, [sp, #16]
 800c912:	b9d8      	cbnz	r0, 800c94c <_vfiprintf_r+0x12c>
 800c914:	06d1      	lsls	r1, r2, #27
 800c916:	bf44      	itt	mi
 800c918:	2320      	movmi	r3, #32
 800c91a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c91e:	0713      	lsls	r3, r2, #28
 800c920:	bf44      	itt	mi
 800c922:	232b      	movmi	r3, #43	; 0x2b
 800c924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c928:	f89a 3000 	ldrb.w	r3, [sl]
 800c92c:	2b2a      	cmp	r3, #42	; 0x2a
 800c92e:	d015      	beq.n	800c95c <_vfiprintf_r+0x13c>
 800c930:	9a07      	ldr	r2, [sp, #28]
 800c932:	4654      	mov	r4, sl
 800c934:	2000      	movs	r0, #0
 800c936:	f04f 0c0a 	mov.w	ip, #10
 800c93a:	4621      	mov	r1, r4
 800c93c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c940:	3b30      	subs	r3, #48	; 0x30
 800c942:	2b09      	cmp	r3, #9
 800c944:	d94e      	bls.n	800c9e4 <_vfiprintf_r+0x1c4>
 800c946:	b1b0      	cbz	r0, 800c976 <_vfiprintf_r+0x156>
 800c948:	9207      	str	r2, [sp, #28]
 800c94a:	e014      	b.n	800c976 <_vfiprintf_r+0x156>
 800c94c:	eba0 0308 	sub.w	r3, r0, r8
 800c950:	fa09 f303 	lsl.w	r3, r9, r3
 800c954:	4313      	orrs	r3, r2
 800c956:	9304      	str	r3, [sp, #16]
 800c958:	46a2      	mov	sl, r4
 800c95a:	e7d2      	b.n	800c902 <_vfiprintf_r+0xe2>
 800c95c:	9b03      	ldr	r3, [sp, #12]
 800c95e:	1d19      	adds	r1, r3, #4
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	9103      	str	r1, [sp, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	bfbb      	ittet	lt
 800c968:	425b      	neglt	r3, r3
 800c96a:	f042 0202 	orrlt.w	r2, r2, #2
 800c96e:	9307      	strge	r3, [sp, #28]
 800c970:	9307      	strlt	r3, [sp, #28]
 800c972:	bfb8      	it	lt
 800c974:	9204      	strlt	r2, [sp, #16]
 800c976:	7823      	ldrb	r3, [r4, #0]
 800c978:	2b2e      	cmp	r3, #46	; 0x2e
 800c97a:	d10c      	bne.n	800c996 <_vfiprintf_r+0x176>
 800c97c:	7863      	ldrb	r3, [r4, #1]
 800c97e:	2b2a      	cmp	r3, #42	; 0x2a
 800c980:	d135      	bne.n	800c9ee <_vfiprintf_r+0x1ce>
 800c982:	9b03      	ldr	r3, [sp, #12]
 800c984:	1d1a      	adds	r2, r3, #4
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	9203      	str	r2, [sp, #12]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	bfb8      	it	lt
 800c98e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c992:	3402      	adds	r4, #2
 800c994:	9305      	str	r3, [sp, #20]
 800c996:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca7c <_vfiprintf_r+0x25c>
 800c99a:	7821      	ldrb	r1, [r4, #0]
 800c99c:	2203      	movs	r2, #3
 800c99e:	4650      	mov	r0, sl
 800c9a0:	f7f3 fcae 	bl	8000300 <memchr>
 800c9a4:	b140      	cbz	r0, 800c9b8 <_vfiprintf_r+0x198>
 800c9a6:	2340      	movs	r3, #64	; 0x40
 800c9a8:	eba0 000a 	sub.w	r0, r0, sl
 800c9ac:	fa03 f000 	lsl.w	r0, r3, r0
 800c9b0:	9b04      	ldr	r3, [sp, #16]
 800c9b2:	4303      	orrs	r3, r0
 800c9b4:	3401      	adds	r4, #1
 800c9b6:	9304      	str	r3, [sp, #16]
 800c9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9bc:	482c      	ldr	r0, [pc, #176]	; (800ca70 <_vfiprintf_r+0x250>)
 800c9be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9c2:	2206      	movs	r2, #6
 800c9c4:	f7f3 fc9c 	bl	8000300 <memchr>
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d03f      	beq.n	800ca4c <_vfiprintf_r+0x22c>
 800c9cc:	4b29      	ldr	r3, [pc, #164]	; (800ca74 <_vfiprintf_r+0x254>)
 800c9ce:	bb1b      	cbnz	r3, 800ca18 <_vfiprintf_r+0x1f8>
 800c9d0:	9b03      	ldr	r3, [sp, #12]
 800c9d2:	3307      	adds	r3, #7
 800c9d4:	f023 0307 	bic.w	r3, r3, #7
 800c9d8:	3308      	adds	r3, #8
 800c9da:	9303      	str	r3, [sp, #12]
 800c9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9de:	443b      	add	r3, r7
 800c9e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c9e2:	e767      	b.n	800c8b4 <_vfiprintf_r+0x94>
 800c9e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9e8:	460c      	mov	r4, r1
 800c9ea:	2001      	movs	r0, #1
 800c9ec:	e7a5      	b.n	800c93a <_vfiprintf_r+0x11a>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	3401      	adds	r4, #1
 800c9f2:	9305      	str	r3, [sp, #20]
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	f04f 0c0a 	mov.w	ip, #10
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca00:	3a30      	subs	r2, #48	; 0x30
 800ca02:	2a09      	cmp	r2, #9
 800ca04:	d903      	bls.n	800ca0e <_vfiprintf_r+0x1ee>
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d0c5      	beq.n	800c996 <_vfiprintf_r+0x176>
 800ca0a:	9105      	str	r1, [sp, #20]
 800ca0c:	e7c3      	b.n	800c996 <_vfiprintf_r+0x176>
 800ca0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca12:	4604      	mov	r4, r0
 800ca14:	2301      	movs	r3, #1
 800ca16:	e7f0      	b.n	800c9fa <_vfiprintf_r+0x1da>
 800ca18:	ab03      	add	r3, sp, #12
 800ca1a:	9300      	str	r3, [sp, #0]
 800ca1c:	462a      	mov	r2, r5
 800ca1e:	4b16      	ldr	r3, [pc, #88]	; (800ca78 <_vfiprintf_r+0x258>)
 800ca20:	a904      	add	r1, sp, #16
 800ca22:	4630      	mov	r0, r6
 800ca24:	f7fd fea4 	bl	800a770 <_printf_float>
 800ca28:	4607      	mov	r7, r0
 800ca2a:	1c78      	adds	r0, r7, #1
 800ca2c:	d1d6      	bne.n	800c9dc <_vfiprintf_r+0x1bc>
 800ca2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca30:	07d9      	lsls	r1, r3, #31
 800ca32:	d405      	bmi.n	800ca40 <_vfiprintf_r+0x220>
 800ca34:	89ab      	ldrh	r3, [r5, #12]
 800ca36:	059a      	lsls	r2, r3, #22
 800ca38:	d402      	bmi.n	800ca40 <_vfiprintf_r+0x220>
 800ca3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca3c:	f000 faaf 	bl	800cf9e <__retarget_lock_release_recursive>
 800ca40:	89ab      	ldrh	r3, [r5, #12]
 800ca42:	065b      	lsls	r3, r3, #25
 800ca44:	f53f af12 	bmi.w	800c86c <_vfiprintf_r+0x4c>
 800ca48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca4a:	e711      	b.n	800c870 <_vfiprintf_r+0x50>
 800ca4c:	ab03      	add	r3, sp, #12
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	462a      	mov	r2, r5
 800ca52:	4b09      	ldr	r3, [pc, #36]	; (800ca78 <_vfiprintf_r+0x258>)
 800ca54:	a904      	add	r1, sp, #16
 800ca56:	4630      	mov	r0, r6
 800ca58:	f7fe f916 	bl	800ac88 <_printf_i>
 800ca5c:	e7e4      	b.n	800ca28 <_vfiprintf_r+0x208>
 800ca5e:	bf00      	nop
 800ca60:	0800d764 	.word	0x0800d764
 800ca64:	0800d784 	.word	0x0800d784
 800ca68:	0800d744 	.word	0x0800d744
 800ca6c:	0800d5ec 	.word	0x0800d5ec
 800ca70:	0800d5f6 	.word	0x0800d5f6
 800ca74:	0800a771 	.word	0x0800a771
 800ca78:	0800c7fb 	.word	0x0800c7fb
 800ca7c:	0800d5f2 	.word	0x0800d5f2

0800ca80 <__swbuf_r>:
 800ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca82:	460e      	mov	r6, r1
 800ca84:	4614      	mov	r4, r2
 800ca86:	4605      	mov	r5, r0
 800ca88:	b118      	cbz	r0, 800ca92 <__swbuf_r+0x12>
 800ca8a:	6983      	ldr	r3, [r0, #24]
 800ca8c:	b90b      	cbnz	r3, 800ca92 <__swbuf_r+0x12>
 800ca8e:	f000 f9e7 	bl	800ce60 <__sinit>
 800ca92:	4b21      	ldr	r3, [pc, #132]	; (800cb18 <__swbuf_r+0x98>)
 800ca94:	429c      	cmp	r4, r3
 800ca96:	d12b      	bne.n	800caf0 <__swbuf_r+0x70>
 800ca98:	686c      	ldr	r4, [r5, #4]
 800ca9a:	69a3      	ldr	r3, [r4, #24]
 800ca9c:	60a3      	str	r3, [r4, #8]
 800ca9e:	89a3      	ldrh	r3, [r4, #12]
 800caa0:	071a      	lsls	r2, r3, #28
 800caa2:	d52f      	bpl.n	800cb04 <__swbuf_r+0x84>
 800caa4:	6923      	ldr	r3, [r4, #16]
 800caa6:	b36b      	cbz	r3, 800cb04 <__swbuf_r+0x84>
 800caa8:	6923      	ldr	r3, [r4, #16]
 800caaa:	6820      	ldr	r0, [r4, #0]
 800caac:	1ac0      	subs	r0, r0, r3
 800caae:	6963      	ldr	r3, [r4, #20]
 800cab0:	b2f6      	uxtb	r6, r6
 800cab2:	4283      	cmp	r3, r0
 800cab4:	4637      	mov	r7, r6
 800cab6:	dc04      	bgt.n	800cac2 <__swbuf_r+0x42>
 800cab8:	4621      	mov	r1, r4
 800caba:	4628      	mov	r0, r5
 800cabc:	f000 f93c 	bl	800cd38 <_fflush_r>
 800cac0:	bb30      	cbnz	r0, 800cb10 <__swbuf_r+0x90>
 800cac2:	68a3      	ldr	r3, [r4, #8]
 800cac4:	3b01      	subs	r3, #1
 800cac6:	60a3      	str	r3, [r4, #8]
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	1c5a      	adds	r2, r3, #1
 800cacc:	6022      	str	r2, [r4, #0]
 800cace:	701e      	strb	r6, [r3, #0]
 800cad0:	6963      	ldr	r3, [r4, #20]
 800cad2:	3001      	adds	r0, #1
 800cad4:	4283      	cmp	r3, r0
 800cad6:	d004      	beq.n	800cae2 <__swbuf_r+0x62>
 800cad8:	89a3      	ldrh	r3, [r4, #12]
 800cada:	07db      	lsls	r3, r3, #31
 800cadc:	d506      	bpl.n	800caec <__swbuf_r+0x6c>
 800cade:	2e0a      	cmp	r6, #10
 800cae0:	d104      	bne.n	800caec <__swbuf_r+0x6c>
 800cae2:	4621      	mov	r1, r4
 800cae4:	4628      	mov	r0, r5
 800cae6:	f000 f927 	bl	800cd38 <_fflush_r>
 800caea:	b988      	cbnz	r0, 800cb10 <__swbuf_r+0x90>
 800caec:	4638      	mov	r0, r7
 800caee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caf0:	4b0a      	ldr	r3, [pc, #40]	; (800cb1c <__swbuf_r+0x9c>)
 800caf2:	429c      	cmp	r4, r3
 800caf4:	d101      	bne.n	800cafa <__swbuf_r+0x7a>
 800caf6:	68ac      	ldr	r4, [r5, #8]
 800caf8:	e7cf      	b.n	800ca9a <__swbuf_r+0x1a>
 800cafa:	4b09      	ldr	r3, [pc, #36]	; (800cb20 <__swbuf_r+0xa0>)
 800cafc:	429c      	cmp	r4, r3
 800cafe:	bf08      	it	eq
 800cb00:	68ec      	ldreq	r4, [r5, #12]
 800cb02:	e7ca      	b.n	800ca9a <__swbuf_r+0x1a>
 800cb04:	4621      	mov	r1, r4
 800cb06:	4628      	mov	r0, r5
 800cb08:	f000 f81a 	bl	800cb40 <__swsetup_r>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d0cb      	beq.n	800caa8 <__swbuf_r+0x28>
 800cb10:	f04f 37ff 	mov.w	r7, #4294967295
 800cb14:	e7ea      	b.n	800caec <__swbuf_r+0x6c>
 800cb16:	bf00      	nop
 800cb18:	0800d764 	.word	0x0800d764
 800cb1c:	0800d784 	.word	0x0800d784
 800cb20:	0800d744 	.word	0x0800d744

0800cb24 <__ascii_wctomb>:
 800cb24:	b149      	cbz	r1, 800cb3a <__ascii_wctomb+0x16>
 800cb26:	2aff      	cmp	r2, #255	; 0xff
 800cb28:	bf85      	ittet	hi
 800cb2a:	238a      	movhi	r3, #138	; 0x8a
 800cb2c:	6003      	strhi	r3, [r0, #0]
 800cb2e:	700a      	strbls	r2, [r1, #0]
 800cb30:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb34:	bf98      	it	ls
 800cb36:	2001      	movls	r0, #1
 800cb38:	4770      	bx	lr
 800cb3a:	4608      	mov	r0, r1
 800cb3c:	4770      	bx	lr
	...

0800cb40 <__swsetup_r>:
 800cb40:	4b32      	ldr	r3, [pc, #200]	; (800cc0c <__swsetup_r+0xcc>)
 800cb42:	b570      	push	{r4, r5, r6, lr}
 800cb44:	681d      	ldr	r5, [r3, #0]
 800cb46:	4606      	mov	r6, r0
 800cb48:	460c      	mov	r4, r1
 800cb4a:	b125      	cbz	r5, 800cb56 <__swsetup_r+0x16>
 800cb4c:	69ab      	ldr	r3, [r5, #24]
 800cb4e:	b913      	cbnz	r3, 800cb56 <__swsetup_r+0x16>
 800cb50:	4628      	mov	r0, r5
 800cb52:	f000 f985 	bl	800ce60 <__sinit>
 800cb56:	4b2e      	ldr	r3, [pc, #184]	; (800cc10 <__swsetup_r+0xd0>)
 800cb58:	429c      	cmp	r4, r3
 800cb5a:	d10f      	bne.n	800cb7c <__swsetup_r+0x3c>
 800cb5c:	686c      	ldr	r4, [r5, #4]
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb64:	0719      	lsls	r1, r3, #28
 800cb66:	d42c      	bmi.n	800cbc2 <__swsetup_r+0x82>
 800cb68:	06dd      	lsls	r5, r3, #27
 800cb6a:	d411      	bmi.n	800cb90 <__swsetup_r+0x50>
 800cb6c:	2309      	movs	r3, #9
 800cb6e:	6033      	str	r3, [r6, #0]
 800cb70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb74:	81a3      	strh	r3, [r4, #12]
 800cb76:	f04f 30ff 	mov.w	r0, #4294967295
 800cb7a:	e03e      	b.n	800cbfa <__swsetup_r+0xba>
 800cb7c:	4b25      	ldr	r3, [pc, #148]	; (800cc14 <__swsetup_r+0xd4>)
 800cb7e:	429c      	cmp	r4, r3
 800cb80:	d101      	bne.n	800cb86 <__swsetup_r+0x46>
 800cb82:	68ac      	ldr	r4, [r5, #8]
 800cb84:	e7eb      	b.n	800cb5e <__swsetup_r+0x1e>
 800cb86:	4b24      	ldr	r3, [pc, #144]	; (800cc18 <__swsetup_r+0xd8>)
 800cb88:	429c      	cmp	r4, r3
 800cb8a:	bf08      	it	eq
 800cb8c:	68ec      	ldreq	r4, [r5, #12]
 800cb8e:	e7e6      	b.n	800cb5e <__swsetup_r+0x1e>
 800cb90:	0758      	lsls	r0, r3, #29
 800cb92:	d512      	bpl.n	800cbba <__swsetup_r+0x7a>
 800cb94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb96:	b141      	cbz	r1, 800cbaa <__swsetup_r+0x6a>
 800cb98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb9c:	4299      	cmp	r1, r3
 800cb9e:	d002      	beq.n	800cba6 <__swsetup_r+0x66>
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7ff fb6f 	bl	800c284 <_free_r>
 800cba6:	2300      	movs	r3, #0
 800cba8:	6363      	str	r3, [r4, #52]	; 0x34
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbb0:	81a3      	strh	r3, [r4, #12]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	6063      	str	r3, [r4, #4]
 800cbb6:	6923      	ldr	r3, [r4, #16]
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	f043 0308 	orr.w	r3, r3, #8
 800cbc0:	81a3      	strh	r3, [r4, #12]
 800cbc2:	6923      	ldr	r3, [r4, #16]
 800cbc4:	b94b      	cbnz	r3, 800cbda <__swsetup_r+0x9a>
 800cbc6:	89a3      	ldrh	r3, [r4, #12]
 800cbc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbd0:	d003      	beq.n	800cbda <__swsetup_r+0x9a>
 800cbd2:	4621      	mov	r1, r4
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f000 fa07 	bl	800cfe8 <__smakebuf_r>
 800cbda:	89a0      	ldrh	r0, [r4, #12]
 800cbdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbe0:	f010 0301 	ands.w	r3, r0, #1
 800cbe4:	d00a      	beq.n	800cbfc <__swsetup_r+0xbc>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	60a3      	str	r3, [r4, #8]
 800cbea:	6963      	ldr	r3, [r4, #20]
 800cbec:	425b      	negs	r3, r3
 800cbee:	61a3      	str	r3, [r4, #24]
 800cbf0:	6923      	ldr	r3, [r4, #16]
 800cbf2:	b943      	cbnz	r3, 800cc06 <__swsetup_r+0xc6>
 800cbf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbf8:	d1ba      	bne.n	800cb70 <__swsetup_r+0x30>
 800cbfa:	bd70      	pop	{r4, r5, r6, pc}
 800cbfc:	0781      	lsls	r1, r0, #30
 800cbfe:	bf58      	it	pl
 800cc00:	6963      	ldrpl	r3, [r4, #20]
 800cc02:	60a3      	str	r3, [r4, #8]
 800cc04:	e7f4      	b.n	800cbf0 <__swsetup_r+0xb0>
 800cc06:	2000      	movs	r0, #0
 800cc08:	e7f7      	b.n	800cbfa <__swsetup_r+0xba>
 800cc0a:	bf00      	nop
 800cc0c:	24000010 	.word	0x24000010
 800cc10:	0800d764 	.word	0x0800d764
 800cc14:	0800d784 	.word	0x0800d784
 800cc18:	0800d744 	.word	0x0800d744

0800cc1c <abort>:
 800cc1c:	b508      	push	{r3, lr}
 800cc1e:	2006      	movs	r0, #6
 800cc20:	f000 fa52 	bl	800d0c8 <raise>
 800cc24:	2001      	movs	r0, #1
 800cc26:	f7f4 fbf9 	bl	800141c <_exit>
	...

0800cc2c <__sflush_r>:
 800cc2c:	898a      	ldrh	r2, [r1, #12]
 800cc2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc32:	4605      	mov	r5, r0
 800cc34:	0710      	lsls	r0, r2, #28
 800cc36:	460c      	mov	r4, r1
 800cc38:	d458      	bmi.n	800ccec <__sflush_r+0xc0>
 800cc3a:	684b      	ldr	r3, [r1, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	dc05      	bgt.n	800cc4c <__sflush_r+0x20>
 800cc40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	dc02      	bgt.n	800cc4c <__sflush_r+0x20>
 800cc46:	2000      	movs	r0, #0
 800cc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc4e:	2e00      	cmp	r6, #0
 800cc50:	d0f9      	beq.n	800cc46 <__sflush_r+0x1a>
 800cc52:	2300      	movs	r3, #0
 800cc54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc58:	682f      	ldr	r7, [r5, #0]
 800cc5a:	602b      	str	r3, [r5, #0]
 800cc5c:	d032      	beq.n	800ccc4 <__sflush_r+0x98>
 800cc5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc60:	89a3      	ldrh	r3, [r4, #12]
 800cc62:	075a      	lsls	r2, r3, #29
 800cc64:	d505      	bpl.n	800cc72 <__sflush_r+0x46>
 800cc66:	6863      	ldr	r3, [r4, #4]
 800cc68:	1ac0      	subs	r0, r0, r3
 800cc6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc6c:	b10b      	cbz	r3, 800cc72 <__sflush_r+0x46>
 800cc6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc70:	1ac0      	subs	r0, r0, r3
 800cc72:	2300      	movs	r3, #0
 800cc74:	4602      	mov	r2, r0
 800cc76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc78:	6a21      	ldr	r1, [r4, #32]
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	47b0      	blx	r6
 800cc7e:	1c43      	adds	r3, r0, #1
 800cc80:	89a3      	ldrh	r3, [r4, #12]
 800cc82:	d106      	bne.n	800cc92 <__sflush_r+0x66>
 800cc84:	6829      	ldr	r1, [r5, #0]
 800cc86:	291d      	cmp	r1, #29
 800cc88:	d82c      	bhi.n	800cce4 <__sflush_r+0xb8>
 800cc8a:	4a2a      	ldr	r2, [pc, #168]	; (800cd34 <__sflush_r+0x108>)
 800cc8c:	40ca      	lsrs	r2, r1
 800cc8e:	07d6      	lsls	r6, r2, #31
 800cc90:	d528      	bpl.n	800cce4 <__sflush_r+0xb8>
 800cc92:	2200      	movs	r2, #0
 800cc94:	6062      	str	r2, [r4, #4]
 800cc96:	04d9      	lsls	r1, r3, #19
 800cc98:	6922      	ldr	r2, [r4, #16]
 800cc9a:	6022      	str	r2, [r4, #0]
 800cc9c:	d504      	bpl.n	800cca8 <__sflush_r+0x7c>
 800cc9e:	1c42      	adds	r2, r0, #1
 800cca0:	d101      	bne.n	800cca6 <__sflush_r+0x7a>
 800cca2:	682b      	ldr	r3, [r5, #0]
 800cca4:	b903      	cbnz	r3, 800cca8 <__sflush_r+0x7c>
 800cca6:	6560      	str	r0, [r4, #84]	; 0x54
 800cca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccaa:	602f      	str	r7, [r5, #0]
 800ccac:	2900      	cmp	r1, #0
 800ccae:	d0ca      	beq.n	800cc46 <__sflush_r+0x1a>
 800ccb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccb4:	4299      	cmp	r1, r3
 800ccb6:	d002      	beq.n	800ccbe <__sflush_r+0x92>
 800ccb8:	4628      	mov	r0, r5
 800ccba:	f7ff fae3 	bl	800c284 <_free_r>
 800ccbe:	2000      	movs	r0, #0
 800ccc0:	6360      	str	r0, [r4, #52]	; 0x34
 800ccc2:	e7c1      	b.n	800cc48 <__sflush_r+0x1c>
 800ccc4:	6a21      	ldr	r1, [r4, #32]
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	4628      	mov	r0, r5
 800ccca:	47b0      	blx	r6
 800cccc:	1c41      	adds	r1, r0, #1
 800ccce:	d1c7      	bne.n	800cc60 <__sflush_r+0x34>
 800ccd0:	682b      	ldr	r3, [r5, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d0c4      	beq.n	800cc60 <__sflush_r+0x34>
 800ccd6:	2b1d      	cmp	r3, #29
 800ccd8:	d001      	beq.n	800ccde <__sflush_r+0xb2>
 800ccda:	2b16      	cmp	r3, #22
 800ccdc:	d101      	bne.n	800cce2 <__sflush_r+0xb6>
 800ccde:	602f      	str	r7, [r5, #0]
 800cce0:	e7b1      	b.n	800cc46 <__sflush_r+0x1a>
 800cce2:	89a3      	ldrh	r3, [r4, #12]
 800cce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cce8:	81a3      	strh	r3, [r4, #12]
 800ccea:	e7ad      	b.n	800cc48 <__sflush_r+0x1c>
 800ccec:	690f      	ldr	r7, [r1, #16]
 800ccee:	2f00      	cmp	r7, #0
 800ccf0:	d0a9      	beq.n	800cc46 <__sflush_r+0x1a>
 800ccf2:	0793      	lsls	r3, r2, #30
 800ccf4:	680e      	ldr	r6, [r1, #0]
 800ccf6:	bf08      	it	eq
 800ccf8:	694b      	ldreq	r3, [r1, #20]
 800ccfa:	600f      	str	r7, [r1, #0]
 800ccfc:	bf18      	it	ne
 800ccfe:	2300      	movne	r3, #0
 800cd00:	eba6 0807 	sub.w	r8, r6, r7
 800cd04:	608b      	str	r3, [r1, #8]
 800cd06:	f1b8 0f00 	cmp.w	r8, #0
 800cd0a:	dd9c      	ble.n	800cc46 <__sflush_r+0x1a>
 800cd0c:	6a21      	ldr	r1, [r4, #32]
 800cd0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd10:	4643      	mov	r3, r8
 800cd12:	463a      	mov	r2, r7
 800cd14:	4628      	mov	r0, r5
 800cd16:	47b0      	blx	r6
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	dc06      	bgt.n	800cd2a <__sflush_r+0xfe>
 800cd1c:	89a3      	ldrh	r3, [r4, #12]
 800cd1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd22:	81a3      	strh	r3, [r4, #12]
 800cd24:	f04f 30ff 	mov.w	r0, #4294967295
 800cd28:	e78e      	b.n	800cc48 <__sflush_r+0x1c>
 800cd2a:	4407      	add	r7, r0
 800cd2c:	eba8 0800 	sub.w	r8, r8, r0
 800cd30:	e7e9      	b.n	800cd06 <__sflush_r+0xda>
 800cd32:	bf00      	nop
 800cd34:	20400001 	.word	0x20400001

0800cd38 <_fflush_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	690b      	ldr	r3, [r1, #16]
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	460c      	mov	r4, r1
 800cd40:	b913      	cbnz	r3, 800cd48 <_fflush_r+0x10>
 800cd42:	2500      	movs	r5, #0
 800cd44:	4628      	mov	r0, r5
 800cd46:	bd38      	pop	{r3, r4, r5, pc}
 800cd48:	b118      	cbz	r0, 800cd52 <_fflush_r+0x1a>
 800cd4a:	6983      	ldr	r3, [r0, #24]
 800cd4c:	b90b      	cbnz	r3, 800cd52 <_fflush_r+0x1a>
 800cd4e:	f000 f887 	bl	800ce60 <__sinit>
 800cd52:	4b14      	ldr	r3, [pc, #80]	; (800cda4 <_fflush_r+0x6c>)
 800cd54:	429c      	cmp	r4, r3
 800cd56:	d11b      	bne.n	800cd90 <_fflush_r+0x58>
 800cd58:	686c      	ldr	r4, [r5, #4]
 800cd5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d0ef      	beq.n	800cd42 <_fflush_r+0xa>
 800cd62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd64:	07d0      	lsls	r0, r2, #31
 800cd66:	d404      	bmi.n	800cd72 <_fflush_r+0x3a>
 800cd68:	0599      	lsls	r1, r3, #22
 800cd6a:	d402      	bmi.n	800cd72 <_fflush_r+0x3a>
 800cd6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd6e:	f000 f915 	bl	800cf9c <__retarget_lock_acquire_recursive>
 800cd72:	4628      	mov	r0, r5
 800cd74:	4621      	mov	r1, r4
 800cd76:	f7ff ff59 	bl	800cc2c <__sflush_r>
 800cd7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd7c:	07da      	lsls	r2, r3, #31
 800cd7e:	4605      	mov	r5, r0
 800cd80:	d4e0      	bmi.n	800cd44 <_fflush_r+0xc>
 800cd82:	89a3      	ldrh	r3, [r4, #12]
 800cd84:	059b      	lsls	r3, r3, #22
 800cd86:	d4dd      	bmi.n	800cd44 <_fflush_r+0xc>
 800cd88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd8a:	f000 f908 	bl	800cf9e <__retarget_lock_release_recursive>
 800cd8e:	e7d9      	b.n	800cd44 <_fflush_r+0xc>
 800cd90:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <_fflush_r+0x70>)
 800cd92:	429c      	cmp	r4, r3
 800cd94:	d101      	bne.n	800cd9a <_fflush_r+0x62>
 800cd96:	68ac      	ldr	r4, [r5, #8]
 800cd98:	e7df      	b.n	800cd5a <_fflush_r+0x22>
 800cd9a:	4b04      	ldr	r3, [pc, #16]	; (800cdac <_fflush_r+0x74>)
 800cd9c:	429c      	cmp	r4, r3
 800cd9e:	bf08      	it	eq
 800cda0:	68ec      	ldreq	r4, [r5, #12]
 800cda2:	e7da      	b.n	800cd5a <_fflush_r+0x22>
 800cda4:	0800d764 	.word	0x0800d764
 800cda8:	0800d784 	.word	0x0800d784
 800cdac:	0800d744 	.word	0x0800d744

0800cdb0 <std>:
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	b510      	push	{r4, lr}
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	e9c0 3300 	strd	r3, r3, [r0]
 800cdba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdbe:	6083      	str	r3, [r0, #8]
 800cdc0:	8181      	strh	r1, [r0, #12]
 800cdc2:	6643      	str	r3, [r0, #100]	; 0x64
 800cdc4:	81c2      	strh	r2, [r0, #14]
 800cdc6:	6183      	str	r3, [r0, #24]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	2208      	movs	r2, #8
 800cdcc:	305c      	adds	r0, #92	; 0x5c
 800cdce:	f7fd fc37 	bl	800a640 <memset>
 800cdd2:	4b05      	ldr	r3, [pc, #20]	; (800cde8 <std+0x38>)
 800cdd4:	6263      	str	r3, [r4, #36]	; 0x24
 800cdd6:	4b05      	ldr	r3, [pc, #20]	; (800cdec <std+0x3c>)
 800cdd8:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdda:	4b05      	ldr	r3, [pc, #20]	; (800cdf0 <std+0x40>)
 800cddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdde:	4b05      	ldr	r3, [pc, #20]	; (800cdf4 <std+0x44>)
 800cde0:	6224      	str	r4, [r4, #32]
 800cde2:	6323      	str	r3, [r4, #48]	; 0x30
 800cde4:	bd10      	pop	{r4, pc}
 800cde6:	bf00      	nop
 800cde8:	0800d101 	.word	0x0800d101
 800cdec:	0800d123 	.word	0x0800d123
 800cdf0:	0800d15b 	.word	0x0800d15b
 800cdf4:	0800d17f 	.word	0x0800d17f

0800cdf8 <_cleanup_r>:
 800cdf8:	4901      	ldr	r1, [pc, #4]	; (800ce00 <_cleanup_r+0x8>)
 800cdfa:	f000 b8af 	b.w	800cf5c <_fwalk_reent>
 800cdfe:	bf00      	nop
 800ce00:	0800cd39 	.word	0x0800cd39

0800ce04 <__sfmoreglue>:
 800ce04:	b570      	push	{r4, r5, r6, lr}
 800ce06:	1e4a      	subs	r2, r1, #1
 800ce08:	2568      	movs	r5, #104	; 0x68
 800ce0a:	4355      	muls	r5, r2
 800ce0c:	460e      	mov	r6, r1
 800ce0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce12:	f7ff fa87 	bl	800c324 <_malloc_r>
 800ce16:	4604      	mov	r4, r0
 800ce18:	b140      	cbz	r0, 800ce2c <__sfmoreglue+0x28>
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	e9c0 1600 	strd	r1, r6, [r0]
 800ce20:	300c      	adds	r0, #12
 800ce22:	60a0      	str	r0, [r4, #8]
 800ce24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce28:	f7fd fc0a 	bl	800a640 <memset>
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	bd70      	pop	{r4, r5, r6, pc}

0800ce30 <__sfp_lock_acquire>:
 800ce30:	4801      	ldr	r0, [pc, #4]	; (800ce38 <__sfp_lock_acquire+0x8>)
 800ce32:	f000 b8b3 	b.w	800cf9c <__retarget_lock_acquire_recursive>
 800ce36:	bf00      	nop
 800ce38:	240126bc 	.word	0x240126bc

0800ce3c <__sfp_lock_release>:
 800ce3c:	4801      	ldr	r0, [pc, #4]	; (800ce44 <__sfp_lock_release+0x8>)
 800ce3e:	f000 b8ae 	b.w	800cf9e <__retarget_lock_release_recursive>
 800ce42:	bf00      	nop
 800ce44:	240126bc 	.word	0x240126bc

0800ce48 <__sinit_lock_acquire>:
 800ce48:	4801      	ldr	r0, [pc, #4]	; (800ce50 <__sinit_lock_acquire+0x8>)
 800ce4a:	f000 b8a7 	b.w	800cf9c <__retarget_lock_acquire_recursive>
 800ce4e:	bf00      	nop
 800ce50:	240126b7 	.word	0x240126b7

0800ce54 <__sinit_lock_release>:
 800ce54:	4801      	ldr	r0, [pc, #4]	; (800ce5c <__sinit_lock_release+0x8>)
 800ce56:	f000 b8a2 	b.w	800cf9e <__retarget_lock_release_recursive>
 800ce5a:	bf00      	nop
 800ce5c:	240126b7 	.word	0x240126b7

0800ce60 <__sinit>:
 800ce60:	b510      	push	{r4, lr}
 800ce62:	4604      	mov	r4, r0
 800ce64:	f7ff fff0 	bl	800ce48 <__sinit_lock_acquire>
 800ce68:	69a3      	ldr	r3, [r4, #24]
 800ce6a:	b11b      	cbz	r3, 800ce74 <__sinit+0x14>
 800ce6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce70:	f7ff bff0 	b.w	800ce54 <__sinit_lock_release>
 800ce74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce78:	6523      	str	r3, [r4, #80]	; 0x50
 800ce7a:	4b13      	ldr	r3, [pc, #76]	; (800cec8 <__sinit+0x68>)
 800ce7c:	4a13      	ldr	r2, [pc, #76]	; (800cecc <__sinit+0x6c>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce82:	42a3      	cmp	r3, r4
 800ce84:	bf04      	itt	eq
 800ce86:	2301      	moveq	r3, #1
 800ce88:	61a3      	streq	r3, [r4, #24]
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f000 f820 	bl	800ced0 <__sfp>
 800ce90:	6060      	str	r0, [r4, #4]
 800ce92:	4620      	mov	r0, r4
 800ce94:	f000 f81c 	bl	800ced0 <__sfp>
 800ce98:	60a0      	str	r0, [r4, #8]
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 f818 	bl	800ced0 <__sfp>
 800cea0:	2200      	movs	r2, #0
 800cea2:	60e0      	str	r0, [r4, #12]
 800cea4:	2104      	movs	r1, #4
 800cea6:	6860      	ldr	r0, [r4, #4]
 800cea8:	f7ff ff82 	bl	800cdb0 <std>
 800ceac:	68a0      	ldr	r0, [r4, #8]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	2109      	movs	r1, #9
 800ceb2:	f7ff ff7d 	bl	800cdb0 <std>
 800ceb6:	68e0      	ldr	r0, [r4, #12]
 800ceb8:	2202      	movs	r2, #2
 800ceba:	2112      	movs	r1, #18
 800cebc:	f7ff ff78 	bl	800cdb0 <std>
 800cec0:	2301      	movs	r3, #1
 800cec2:	61a3      	str	r3, [r4, #24]
 800cec4:	e7d2      	b.n	800ce6c <__sinit+0xc>
 800cec6:	bf00      	nop
 800cec8:	0800d3c4 	.word	0x0800d3c4
 800cecc:	0800cdf9 	.word	0x0800cdf9

0800ced0 <__sfp>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	4607      	mov	r7, r0
 800ced4:	f7ff ffac 	bl	800ce30 <__sfp_lock_acquire>
 800ced8:	4b1e      	ldr	r3, [pc, #120]	; (800cf54 <__sfp+0x84>)
 800ceda:	681e      	ldr	r6, [r3, #0]
 800cedc:	69b3      	ldr	r3, [r6, #24]
 800cede:	b913      	cbnz	r3, 800cee6 <__sfp+0x16>
 800cee0:	4630      	mov	r0, r6
 800cee2:	f7ff ffbd 	bl	800ce60 <__sinit>
 800cee6:	3648      	adds	r6, #72	; 0x48
 800cee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ceec:	3b01      	subs	r3, #1
 800ceee:	d503      	bpl.n	800cef8 <__sfp+0x28>
 800cef0:	6833      	ldr	r3, [r6, #0]
 800cef2:	b30b      	cbz	r3, 800cf38 <__sfp+0x68>
 800cef4:	6836      	ldr	r6, [r6, #0]
 800cef6:	e7f7      	b.n	800cee8 <__sfp+0x18>
 800cef8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cefc:	b9d5      	cbnz	r5, 800cf34 <__sfp+0x64>
 800cefe:	4b16      	ldr	r3, [pc, #88]	; (800cf58 <__sfp+0x88>)
 800cf00:	60e3      	str	r3, [r4, #12]
 800cf02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf06:	6665      	str	r5, [r4, #100]	; 0x64
 800cf08:	f000 f847 	bl	800cf9a <__retarget_lock_init_recursive>
 800cf0c:	f7ff ff96 	bl	800ce3c <__sfp_lock_release>
 800cf10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf18:	6025      	str	r5, [r4, #0]
 800cf1a:	61a5      	str	r5, [r4, #24]
 800cf1c:	2208      	movs	r2, #8
 800cf1e:	4629      	mov	r1, r5
 800cf20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf24:	f7fd fb8c 	bl	800a640 <memset>
 800cf28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf30:	4620      	mov	r0, r4
 800cf32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf34:	3468      	adds	r4, #104	; 0x68
 800cf36:	e7d9      	b.n	800ceec <__sfp+0x1c>
 800cf38:	2104      	movs	r1, #4
 800cf3a:	4638      	mov	r0, r7
 800cf3c:	f7ff ff62 	bl	800ce04 <__sfmoreglue>
 800cf40:	4604      	mov	r4, r0
 800cf42:	6030      	str	r0, [r6, #0]
 800cf44:	2800      	cmp	r0, #0
 800cf46:	d1d5      	bne.n	800cef4 <__sfp+0x24>
 800cf48:	f7ff ff78 	bl	800ce3c <__sfp_lock_release>
 800cf4c:	230c      	movs	r3, #12
 800cf4e:	603b      	str	r3, [r7, #0]
 800cf50:	e7ee      	b.n	800cf30 <__sfp+0x60>
 800cf52:	bf00      	nop
 800cf54:	0800d3c4 	.word	0x0800d3c4
 800cf58:	ffff0001 	.word	0xffff0001

0800cf5c <_fwalk_reent>:
 800cf5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf60:	4606      	mov	r6, r0
 800cf62:	4688      	mov	r8, r1
 800cf64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf68:	2700      	movs	r7, #0
 800cf6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf6e:	f1b9 0901 	subs.w	r9, r9, #1
 800cf72:	d505      	bpl.n	800cf80 <_fwalk_reent+0x24>
 800cf74:	6824      	ldr	r4, [r4, #0]
 800cf76:	2c00      	cmp	r4, #0
 800cf78:	d1f7      	bne.n	800cf6a <_fwalk_reent+0xe>
 800cf7a:	4638      	mov	r0, r7
 800cf7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf80:	89ab      	ldrh	r3, [r5, #12]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d907      	bls.n	800cf96 <_fwalk_reent+0x3a>
 800cf86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	d003      	beq.n	800cf96 <_fwalk_reent+0x3a>
 800cf8e:	4629      	mov	r1, r5
 800cf90:	4630      	mov	r0, r6
 800cf92:	47c0      	blx	r8
 800cf94:	4307      	orrs	r7, r0
 800cf96:	3568      	adds	r5, #104	; 0x68
 800cf98:	e7e9      	b.n	800cf6e <_fwalk_reent+0x12>

0800cf9a <__retarget_lock_init_recursive>:
 800cf9a:	4770      	bx	lr

0800cf9c <__retarget_lock_acquire_recursive>:
 800cf9c:	4770      	bx	lr

0800cf9e <__retarget_lock_release_recursive>:
 800cf9e:	4770      	bx	lr

0800cfa0 <__swhatbuf_r>:
 800cfa0:	b570      	push	{r4, r5, r6, lr}
 800cfa2:	460e      	mov	r6, r1
 800cfa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa8:	2900      	cmp	r1, #0
 800cfaa:	b096      	sub	sp, #88	; 0x58
 800cfac:	4614      	mov	r4, r2
 800cfae:	461d      	mov	r5, r3
 800cfb0:	da07      	bge.n	800cfc2 <__swhatbuf_r+0x22>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	602b      	str	r3, [r5, #0]
 800cfb6:	89b3      	ldrh	r3, [r6, #12]
 800cfb8:	061a      	lsls	r2, r3, #24
 800cfba:	d410      	bmi.n	800cfde <__swhatbuf_r+0x3e>
 800cfbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfc0:	e00e      	b.n	800cfe0 <__swhatbuf_r+0x40>
 800cfc2:	466a      	mov	r2, sp
 800cfc4:	f000 f902 	bl	800d1cc <_fstat_r>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	dbf2      	blt.n	800cfb2 <__swhatbuf_r+0x12>
 800cfcc:	9a01      	ldr	r2, [sp, #4]
 800cfce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cfd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cfd6:	425a      	negs	r2, r3
 800cfd8:	415a      	adcs	r2, r3
 800cfda:	602a      	str	r2, [r5, #0]
 800cfdc:	e7ee      	b.n	800cfbc <__swhatbuf_r+0x1c>
 800cfde:	2340      	movs	r3, #64	; 0x40
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	6023      	str	r3, [r4, #0]
 800cfe4:	b016      	add	sp, #88	; 0x58
 800cfe6:	bd70      	pop	{r4, r5, r6, pc}

0800cfe8 <__smakebuf_r>:
 800cfe8:	898b      	ldrh	r3, [r1, #12]
 800cfea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfec:	079d      	lsls	r5, r3, #30
 800cfee:	4606      	mov	r6, r0
 800cff0:	460c      	mov	r4, r1
 800cff2:	d507      	bpl.n	800d004 <__smakebuf_r+0x1c>
 800cff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cff8:	6023      	str	r3, [r4, #0]
 800cffa:	6123      	str	r3, [r4, #16]
 800cffc:	2301      	movs	r3, #1
 800cffe:	6163      	str	r3, [r4, #20]
 800d000:	b002      	add	sp, #8
 800d002:	bd70      	pop	{r4, r5, r6, pc}
 800d004:	ab01      	add	r3, sp, #4
 800d006:	466a      	mov	r2, sp
 800d008:	f7ff ffca 	bl	800cfa0 <__swhatbuf_r>
 800d00c:	9900      	ldr	r1, [sp, #0]
 800d00e:	4605      	mov	r5, r0
 800d010:	4630      	mov	r0, r6
 800d012:	f7ff f987 	bl	800c324 <_malloc_r>
 800d016:	b948      	cbnz	r0, 800d02c <__smakebuf_r+0x44>
 800d018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d01c:	059a      	lsls	r2, r3, #22
 800d01e:	d4ef      	bmi.n	800d000 <__smakebuf_r+0x18>
 800d020:	f023 0303 	bic.w	r3, r3, #3
 800d024:	f043 0302 	orr.w	r3, r3, #2
 800d028:	81a3      	strh	r3, [r4, #12]
 800d02a:	e7e3      	b.n	800cff4 <__smakebuf_r+0xc>
 800d02c:	4b0d      	ldr	r3, [pc, #52]	; (800d064 <__smakebuf_r+0x7c>)
 800d02e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d030:	89a3      	ldrh	r3, [r4, #12]
 800d032:	6020      	str	r0, [r4, #0]
 800d034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d038:	81a3      	strh	r3, [r4, #12]
 800d03a:	9b00      	ldr	r3, [sp, #0]
 800d03c:	6163      	str	r3, [r4, #20]
 800d03e:	9b01      	ldr	r3, [sp, #4]
 800d040:	6120      	str	r0, [r4, #16]
 800d042:	b15b      	cbz	r3, 800d05c <__smakebuf_r+0x74>
 800d044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d048:	4630      	mov	r0, r6
 800d04a:	f000 f8d1 	bl	800d1f0 <_isatty_r>
 800d04e:	b128      	cbz	r0, 800d05c <__smakebuf_r+0x74>
 800d050:	89a3      	ldrh	r3, [r4, #12]
 800d052:	f023 0303 	bic.w	r3, r3, #3
 800d056:	f043 0301 	orr.w	r3, r3, #1
 800d05a:	81a3      	strh	r3, [r4, #12]
 800d05c:	89a0      	ldrh	r0, [r4, #12]
 800d05e:	4305      	orrs	r5, r0
 800d060:	81a5      	strh	r5, [r4, #12]
 800d062:	e7cd      	b.n	800d000 <__smakebuf_r+0x18>
 800d064:	0800cdf9 	.word	0x0800cdf9

0800d068 <_malloc_usable_size_r>:
 800d068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d06c:	1f18      	subs	r0, r3, #4
 800d06e:	2b00      	cmp	r3, #0
 800d070:	bfbc      	itt	lt
 800d072:	580b      	ldrlt	r3, [r1, r0]
 800d074:	18c0      	addlt	r0, r0, r3
 800d076:	4770      	bx	lr

0800d078 <_raise_r>:
 800d078:	291f      	cmp	r1, #31
 800d07a:	b538      	push	{r3, r4, r5, lr}
 800d07c:	4604      	mov	r4, r0
 800d07e:	460d      	mov	r5, r1
 800d080:	d904      	bls.n	800d08c <_raise_r+0x14>
 800d082:	2316      	movs	r3, #22
 800d084:	6003      	str	r3, [r0, #0]
 800d086:	f04f 30ff 	mov.w	r0, #4294967295
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d08e:	b112      	cbz	r2, 800d096 <_raise_r+0x1e>
 800d090:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d094:	b94b      	cbnz	r3, 800d0aa <_raise_r+0x32>
 800d096:	4620      	mov	r0, r4
 800d098:	f000 f830 	bl	800d0fc <_getpid_r>
 800d09c:	462a      	mov	r2, r5
 800d09e:	4601      	mov	r1, r0
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0a6:	f000 b817 	b.w	800d0d8 <_kill_r>
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d00a      	beq.n	800d0c4 <_raise_r+0x4c>
 800d0ae:	1c59      	adds	r1, r3, #1
 800d0b0:	d103      	bne.n	800d0ba <_raise_r+0x42>
 800d0b2:	2316      	movs	r3, #22
 800d0b4:	6003      	str	r3, [r0, #0]
 800d0b6:	2001      	movs	r0, #1
 800d0b8:	e7e7      	b.n	800d08a <_raise_r+0x12>
 800d0ba:	2400      	movs	r4, #0
 800d0bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	4798      	blx	r3
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	e7e0      	b.n	800d08a <_raise_r+0x12>

0800d0c8 <raise>:
 800d0c8:	4b02      	ldr	r3, [pc, #8]	; (800d0d4 <raise+0xc>)
 800d0ca:	4601      	mov	r1, r0
 800d0cc:	6818      	ldr	r0, [r3, #0]
 800d0ce:	f7ff bfd3 	b.w	800d078 <_raise_r>
 800d0d2:	bf00      	nop
 800d0d4:	24000010 	.word	0x24000010

0800d0d8 <_kill_r>:
 800d0d8:	b538      	push	{r3, r4, r5, lr}
 800d0da:	4d07      	ldr	r5, [pc, #28]	; (800d0f8 <_kill_r+0x20>)
 800d0dc:	2300      	movs	r3, #0
 800d0de:	4604      	mov	r4, r0
 800d0e0:	4608      	mov	r0, r1
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	602b      	str	r3, [r5, #0]
 800d0e6:	f7f4 f989 	bl	80013fc <_kill>
 800d0ea:	1c43      	adds	r3, r0, #1
 800d0ec:	d102      	bne.n	800d0f4 <_kill_r+0x1c>
 800d0ee:	682b      	ldr	r3, [r5, #0]
 800d0f0:	b103      	cbz	r3, 800d0f4 <_kill_r+0x1c>
 800d0f2:	6023      	str	r3, [r4, #0]
 800d0f4:	bd38      	pop	{r3, r4, r5, pc}
 800d0f6:	bf00      	nop
 800d0f8:	240126b0 	.word	0x240126b0

0800d0fc <_getpid_r>:
 800d0fc:	f7f4 b976 	b.w	80013ec <_getpid>

0800d100 <__sread>:
 800d100:	b510      	push	{r4, lr}
 800d102:	460c      	mov	r4, r1
 800d104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d108:	f000 f894 	bl	800d234 <_read_r>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	bfab      	itete	ge
 800d110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d112:	89a3      	ldrhlt	r3, [r4, #12]
 800d114:	181b      	addge	r3, r3, r0
 800d116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d11a:	bfac      	ite	ge
 800d11c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d11e:	81a3      	strhlt	r3, [r4, #12]
 800d120:	bd10      	pop	{r4, pc}

0800d122 <__swrite>:
 800d122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d126:	461f      	mov	r7, r3
 800d128:	898b      	ldrh	r3, [r1, #12]
 800d12a:	05db      	lsls	r3, r3, #23
 800d12c:	4605      	mov	r5, r0
 800d12e:	460c      	mov	r4, r1
 800d130:	4616      	mov	r6, r2
 800d132:	d505      	bpl.n	800d140 <__swrite+0x1e>
 800d134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d138:	2302      	movs	r3, #2
 800d13a:	2200      	movs	r2, #0
 800d13c:	f000 f868 	bl	800d210 <_lseek_r>
 800d140:	89a3      	ldrh	r3, [r4, #12]
 800d142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d14a:	81a3      	strh	r3, [r4, #12]
 800d14c:	4632      	mov	r2, r6
 800d14e:	463b      	mov	r3, r7
 800d150:	4628      	mov	r0, r5
 800d152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d156:	f000 b817 	b.w	800d188 <_write_r>

0800d15a <__sseek>:
 800d15a:	b510      	push	{r4, lr}
 800d15c:	460c      	mov	r4, r1
 800d15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d162:	f000 f855 	bl	800d210 <_lseek_r>
 800d166:	1c43      	adds	r3, r0, #1
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	bf15      	itete	ne
 800d16c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d16e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d176:	81a3      	strheq	r3, [r4, #12]
 800d178:	bf18      	it	ne
 800d17a:	81a3      	strhne	r3, [r4, #12]
 800d17c:	bd10      	pop	{r4, pc}

0800d17e <__sclose>:
 800d17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d182:	f000 b813 	b.w	800d1ac <_close_r>
	...

0800d188 <_write_r>:
 800d188:	b538      	push	{r3, r4, r5, lr}
 800d18a:	4d07      	ldr	r5, [pc, #28]	; (800d1a8 <_write_r+0x20>)
 800d18c:	4604      	mov	r4, r0
 800d18e:	4608      	mov	r0, r1
 800d190:	4611      	mov	r1, r2
 800d192:	2200      	movs	r2, #0
 800d194:	602a      	str	r2, [r5, #0]
 800d196:	461a      	mov	r2, r3
 800d198:	f7f4 f967 	bl	800146a <_write>
 800d19c:	1c43      	adds	r3, r0, #1
 800d19e:	d102      	bne.n	800d1a6 <_write_r+0x1e>
 800d1a0:	682b      	ldr	r3, [r5, #0]
 800d1a2:	b103      	cbz	r3, 800d1a6 <_write_r+0x1e>
 800d1a4:	6023      	str	r3, [r4, #0]
 800d1a6:	bd38      	pop	{r3, r4, r5, pc}
 800d1a8:	240126b0 	.word	0x240126b0

0800d1ac <_close_r>:
 800d1ac:	b538      	push	{r3, r4, r5, lr}
 800d1ae:	4d06      	ldr	r5, [pc, #24]	; (800d1c8 <_close_r+0x1c>)
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	4608      	mov	r0, r1
 800d1b6:	602b      	str	r3, [r5, #0]
 800d1b8:	f7f4 f973 	bl	80014a2 <_close>
 800d1bc:	1c43      	adds	r3, r0, #1
 800d1be:	d102      	bne.n	800d1c6 <_close_r+0x1a>
 800d1c0:	682b      	ldr	r3, [r5, #0]
 800d1c2:	b103      	cbz	r3, 800d1c6 <_close_r+0x1a>
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	240126b0 	.word	0x240126b0

0800d1cc <_fstat_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	4d07      	ldr	r5, [pc, #28]	; (800d1ec <_fstat_r+0x20>)
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	4608      	mov	r0, r1
 800d1d6:	4611      	mov	r1, r2
 800d1d8:	602b      	str	r3, [r5, #0]
 800d1da:	f7f4 f96e 	bl	80014ba <_fstat>
 800d1de:	1c43      	adds	r3, r0, #1
 800d1e0:	d102      	bne.n	800d1e8 <_fstat_r+0x1c>
 800d1e2:	682b      	ldr	r3, [r5, #0]
 800d1e4:	b103      	cbz	r3, 800d1e8 <_fstat_r+0x1c>
 800d1e6:	6023      	str	r3, [r4, #0]
 800d1e8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ea:	bf00      	nop
 800d1ec:	240126b0 	.word	0x240126b0

0800d1f0 <_isatty_r>:
 800d1f0:	b538      	push	{r3, r4, r5, lr}
 800d1f2:	4d06      	ldr	r5, [pc, #24]	; (800d20c <_isatty_r+0x1c>)
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	4604      	mov	r4, r0
 800d1f8:	4608      	mov	r0, r1
 800d1fa:	602b      	str	r3, [r5, #0]
 800d1fc:	f7f4 f96d 	bl	80014da <_isatty>
 800d200:	1c43      	adds	r3, r0, #1
 800d202:	d102      	bne.n	800d20a <_isatty_r+0x1a>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	b103      	cbz	r3, 800d20a <_isatty_r+0x1a>
 800d208:	6023      	str	r3, [r4, #0]
 800d20a:	bd38      	pop	{r3, r4, r5, pc}
 800d20c:	240126b0 	.word	0x240126b0

0800d210 <_lseek_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4d07      	ldr	r5, [pc, #28]	; (800d230 <_lseek_r+0x20>)
 800d214:	4604      	mov	r4, r0
 800d216:	4608      	mov	r0, r1
 800d218:	4611      	mov	r1, r2
 800d21a:	2200      	movs	r2, #0
 800d21c:	602a      	str	r2, [r5, #0]
 800d21e:	461a      	mov	r2, r3
 800d220:	f7f4 f966 	bl	80014f0 <_lseek>
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	d102      	bne.n	800d22e <_lseek_r+0x1e>
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	b103      	cbz	r3, 800d22e <_lseek_r+0x1e>
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	bd38      	pop	{r3, r4, r5, pc}
 800d230:	240126b0 	.word	0x240126b0

0800d234 <_read_r>:
 800d234:	b538      	push	{r3, r4, r5, lr}
 800d236:	4d07      	ldr	r5, [pc, #28]	; (800d254 <_read_r+0x20>)
 800d238:	4604      	mov	r4, r0
 800d23a:	4608      	mov	r0, r1
 800d23c:	4611      	mov	r1, r2
 800d23e:	2200      	movs	r2, #0
 800d240:	602a      	str	r2, [r5, #0]
 800d242:	461a      	mov	r2, r3
 800d244:	f7f4 f8f4 	bl	8001430 <_read>
 800d248:	1c43      	adds	r3, r0, #1
 800d24a:	d102      	bne.n	800d252 <_read_r+0x1e>
 800d24c:	682b      	ldr	r3, [r5, #0]
 800d24e:	b103      	cbz	r3, 800d252 <_read_r+0x1e>
 800d250:	6023      	str	r3, [r4, #0]
 800d252:	bd38      	pop	{r3, r4, r5, pc}
 800d254:	240126b0 	.word	0x240126b0

0800d258 <ceil>:
 800d258:	ee10 1a90 	vmov	r1, s1
 800d25c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d260:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800d264:	2b13      	cmp	r3, #19
 800d266:	b530      	push	{r4, r5, lr}
 800d268:	ee10 0a10 	vmov	r0, s0
 800d26c:	ee10 5a10 	vmov	r5, s0
 800d270:	dc2f      	bgt.n	800d2d2 <ceil+0x7a>
 800d272:	2b00      	cmp	r3, #0
 800d274:	da13      	bge.n	800d29e <ceil+0x46>
 800d276:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800d338 <ceil+0xe0>
 800d27a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d27e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d286:	dd05      	ble.n	800d294 <ceil+0x3c>
 800d288:	2900      	cmp	r1, #0
 800d28a:	db4c      	blt.n	800d326 <ceil+0xce>
 800d28c:	4301      	orrs	r1, r0
 800d28e:	d04e      	beq.n	800d32e <ceil+0xd6>
 800d290:	492b      	ldr	r1, [pc, #172]	; (800d340 <ceil+0xe8>)
 800d292:	2000      	movs	r0, #0
 800d294:	460b      	mov	r3, r1
 800d296:	4602      	mov	r2, r0
 800d298:	ec43 2b10 	vmov	d0, r2, r3
 800d29c:	e020      	b.n	800d2e0 <ceil+0x88>
 800d29e:	4a29      	ldr	r2, [pc, #164]	; (800d344 <ceil+0xec>)
 800d2a0:	411a      	asrs	r2, r3
 800d2a2:	ea01 0402 	and.w	r4, r1, r2
 800d2a6:	4304      	orrs	r4, r0
 800d2a8:	d01a      	beq.n	800d2e0 <ceil+0x88>
 800d2aa:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800d338 <ceil+0xe0>
 800d2ae:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d2b2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ba:	ddeb      	ble.n	800d294 <ceil+0x3c>
 800d2bc:	2900      	cmp	r1, #0
 800d2be:	bfc2      	ittt	gt
 800d2c0:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 800d2c4:	fa40 f303 	asrgt.w	r3, r0, r3
 800d2c8:	18c9      	addgt	r1, r1, r3
 800d2ca:	ea21 0102 	bic.w	r1, r1, r2
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	e7e0      	b.n	800d294 <ceil+0x3c>
 800d2d2:	2b33      	cmp	r3, #51	; 0x33
 800d2d4:	dd05      	ble.n	800d2e2 <ceil+0x8a>
 800d2d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2da:	d101      	bne.n	800d2e0 <ceil+0x88>
 800d2dc:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d2e0:	bd30      	pop	{r4, r5, pc}
 800d2e2:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800d2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ea:	40e2      	lsrs	r2, r4
 800d2ec:	4202      	tst	r2, r0
 800d2ee:	d0f7      	beq.n	800d2e0 <ceil+0x88>
 800d2f0:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800d338 <ceil+0xe0>
 800d2f4:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d2f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d300:	ddc8      	ble.n	800d294 <ceil+0x3c>
 800d302:	2900      	cmp	r1, #0
 800d304:	dd02      	ble.n	800d30c <ceil+0xb4>
 800d306:	2b14      	cmp	r3, #20
 800d308:	d103      	bne.n	800d312 <ceil+0xba>
 800d30a:	3101      	adds	r1, #1
 800d30c:	ea20 0002 	bic.w	r0, r0, r2
 800d310:	e7c0      	b.n	800d294 <ceil+0x3c>
 800d312:	2401      	movs	r4, #1
 800d314:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d318:	fa04 f303 	lsl.w	r3, r4, r3
 800d31c:	4418      	add	r0, r3
 800d31e:	42a8      	cmp	r0, r5
 800d320:	bf38      	it	cc
 800d322:	1909      	addcc	r1, r1, r4
 800d324:	e7f2      	b.n	800d30c <ceil+0xb4>
 800d326:	2000      	movs	r0, #0
 800d328:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d32c:	e7b2      	b.n	800d294 <ceil+0x3c>
 800d32e:	4608      	mov	r0, r1
 800d330:	e7b0      	b.n	800d294 <ceil+0x3c>
 800d332:	bf00      	nop
 800d334:	f3af 8000 	nop.w
 800d338:	8800759c 	.word	0x8800759c
 800d33c:	7e37e43c 	.word	0x7e37e43c
 800d340:	3ff00000 	.word	0x3ff00000
 800d344:	000fffff 	.word	0x000fffff

0800d348 <_init>:
 800d348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d34a:	bf00      	nop
 800d34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d34e:	bc08      	pop	{r3}
 800d350:	469e      	mov	lr, r3
 800d352:	4770      	bx	lr

0800d354 <_fini>:
 800d354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d356:	bf00      	nop
 800d358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d35a:	bc08      	pop	{r3}
 800d35c:	469e      	mov	lr, r3
 800d35e:	4770      	bx	lr
